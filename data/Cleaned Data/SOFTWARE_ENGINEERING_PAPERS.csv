Title,Abstract,Publication Date,Link,Authors,Citations,Cleaned_Abstract,Abstract_NLTK,Abstract_Spacy
Software engineering: A practitioner's approach,"The Worthing physiological scoring system (PSS) was first validated in 2005 as a tool to predict hospital mortality on admission and subsequently introduced into clinical practice at Hospital, UK. Five years on, this study conducted determine the effects length of stay (LOS) after introduction electronic alerting software using PSS. In addition, we investigated whether PSS predictive ability could be improved by addition further variables.Prospective observational acute medical unit, Patient data discharge/transfer were collected between February July 2010 from VitalPAC™. characteristics, co-morbidity, outcomes, biochemistry taken administration pathology systems.The observed reduction 8.3% 5.2% over 5 yr not statistically significant adjustment for score. Median LOS reduced 4 2 days, but reflected an increase short admissions. significantly with biochemical variables or patient co-morbidity. A score before ward showed when compared initial score, analysis found no additional benefit.The did lead adjusted severity illness defined variables. Predictive performance enhanced co-morbidities.",1983-07-01,https://doi.org/10.1016/0141-1195(83)90118-3,Roger S. Pressman,7802,The Worthing physiological scoring system PSS was first validated in 2005 as a tool to predict hospital mortality on admission and subsequently introduced into clinical practice at Hospital UK Five years on this study conducted determine the effects length of stay LOS after introduction electronic alerting software using PSS In addition we investigated whether PSS predictive ability could be improved by addition further variablesProspective observational acute medical unit Patient data dischargetransfer were collected between February July 2010 from VitalPAC characteristics comorbidity outcomes biochemistry taken administration pathology systemsThe observed reduction 83 52 over 5 yr not statistically significant adjustment for score Median LOS reduced 4 2 days but reflected an increase short admissions significantly with biochemical variables or patient comorbidity A score before ward showed when compared initial score analysis found no additional benefitThe did lead adjusted severity illness defined variables Predictive performance enhanced comorbidities,worth physiolog score system pss first valid 2005 tool predict hospit mortal admiss subsequ introduc clinic practic hospit uk five year studi conduct determin effect length stay lo introduct electron alert softwar use pss addit investig whether pss predict abil could improv addit variablesprospect observ acut medic unit patient data dischargetransf collect februari juli 2010 vitalpac characterist comorbid outcom biochemistri taken administr patholog systemsth observ reduct 83 52 5 yr statist signific adjust score median lo reduc 4 2 day reflect increas short admiss significantli biochem variabl patient comorbid score ward show compar initi score analysi found addit benefitth lead adjust sever ill defin variabl predict perform enhanc comorbid,worthe physiological scoring system pss validate tool predict hospital mortality admission subsequently introduce clinical practice hospital uk year study conduct determine effect length stay los introduction electronic alert software pss addition investigate pss predictive ability improve addition variablesprospective observational acute medical unit patient datum dischargetransfer collect february july vitalpac characteristic comorbidity outcome biochemistry take administration pathology systemsthe observe reduction yr statistically significant adjustment score median los reduce day reflect increase short admission significantly biochemical variable patient comorbidity score ward show compare initial score analysis find additional benefitthe lead adjust severity illness define variable predictive performance enhance comorbiditie
Software Engineering Economics,"This paper summarizes the current state of art and recent trends in software engineering economics. It provides an overview economic analysis techniques their applicability to management. surveys field cost estimation, including major estimation available, algorithmic models, outstanding research issues estimation.",1984-01-01,https://doi.org/10.1109/tse.1984.5010193,Barry Boehm,4812,This paper summarizes the current state of art and recent trends in software engineering economics It provides an overview economic analysis techniques their applicability to management surveys field cost estimation including major estimation available algorithmic models outstanding research issues estimation,paper summar current state art recent trend softwar engin econom provid overview econom analysi techniqu applic manag survey field cost estim includ major estim avail algorithm model outstand research issu estim,paper summarize current state art recent trend software engineering economic provide overview economic analysis technique applicability management survey field cost estimation include major estimation available algorithmic model outstanding research issue estimation
No Silver Bullet Essence and Accidents of Software Engineering,"But, as we look to the horizon of a decade hence, see no silver bullet. There is single development, in either technology or management technique, that by itself promises even one order-of-magnitude improvement productivity, reliability, simplicity. In this article, I shall try show why, examining both nature software problem and properties bullets proposed.",1987-04-01,https://doi.org/10.1109/mc.1987.1663532,P A Brooks,3128,But as we look to the horizon of a decade hence see no silver bullet There is single development in either technology or management technique that by itself promises even one orderofmagnitude improvement productivity reliability simplicity In this article I shall try show why examining both nature software problem and properties bullets proposed,look horizon decad henc see silver bullet singl develop either technolog manag techniqu promis even one orderofmagnitud improv product reliabl simplic articl shall tri show examin natur softwar problem properti bullet propos,look horizon decade silver bullet single development technology management technique promise orderofmagnitude improvement productivity reliability simplicity article shall try examine nature software problem property bullet propose
Systematic Mapping Studies in Software Engineering,"BACKGROUND: A software engineering systematic map is a defined method to build classification scheme and structure field of interest. The analysis results focuses on frequencies publications for categories within the scheme. Thereby, coverage research can be determined. Different facets also combined answer more specific questions. OBJECTIVE: We describe how conduct mapping study in provide guidelines. compare maps reviews clarify chose between them. This comparison leads set guidelines maps. METHOD: have process applied it complete study. Furthermore, we with by systematically analyzing existing reviews. RESULTS: studies Based this, conducting are defined. CONCLUSIONS: Systematic different terms goals, breadth, validity issues implications. Thus, they should used complementarily require methods (e.g., analysis).",2008-06-01,https://doi.org/10.14236/ewic/ease2008.8,"Kai Petersen, Robert Feldt, Shahid Mujtaba, Michael Mattsson",2557,BACKGROUND A software engineering systematic map is a defined method to build classification scheme and structure field of interest The analysis results focuses on frequencies publications for categories within the scheme Thereby coverage research can be determined Different facets also combined answer more specific questions OBJECTIVE We describe how conduct mapping study in provide guidelines compare maps reviews clarify chose between them This comparison leads set guidelines maps METHOD have process applied it complete study Furthermore we with by systematically analyzing existing reviews RESULTS studies Based this conducting are defined CONCLUSIONS Systematic different terms goals breadth validity issues implications Thus they should used complementarily require methods eg analysis,background softwar engin systemat map defin method build classif scheme structur field interest analysi result focus frequenc public categori within scheme therebi coverag research determin differ facet also combin answer specif question object describ conduct map studi provid guidelin compar map review clarifi chose comparison lead set guidelin map method process appli complet studi furthermor systemat analyz exist review result studi base conduct defin conclus systemat differ term goal breadth valid issu implic thu use complementarili requir method eg analysi,background software engineering systematic map define method build classification scheme structure field interest analysis result focus frequency publication category scheme coverage research determine different facet combine answer specific question objective describe conduct mapping study provide guideline compare map review clarify choose comparison lead set guideline map method process apply complete study furthermore systematically analyze exist review result study base conducting define conclusion systematic different term goal breadth validity issue implication complementarily require method eg analysis
Guidelines for conducting and reporting case study research in software engineering,"Case study is a suitable research methodology for software engineering since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes case varies, and hence quality resulting studies. This paper aims at providing an introduction to guidelines researchers conducting readers studying reports such The content based on authors’ own experience from reading terminology are compiled different handbooks other domains, particular social science information systems, adapted needs engineering. We present recommended practices as well empirically derived evaluated checklists research.",2008-12-19,https://doi.org/10.1007/s10664-008-9102-8,"Per Runeson, Martin Höst",3324,Case study is a suitable research methodology for software engineering since it studies contemporary phenomena in its natural context However the understanding of what constitutes case varies and hence quality resulting studies This paper aims at providing an introduction to guidelines researchers conducting readers studying reports such The content based on authors own experience from reading terminology are compiled different handbooks other domains particular social science information systems adapted needs engineering We present recommended practices as well empirically derived evaluated checklists research,case studi suitabl research methodolog softwar engin sinc studi contemporari phenomena natur context howev understand constitut case vari henc qualiti result studi paper aim provid introduct guidelin research conduct reader studi report content base author experi read terminolog compil differ handbook domain particular social scienc inform system adapt need engin present recommend practic well empir deriv evalu checklist research,case study suitable research methodology software engineering study contemporary phenomenon natural context understanding constitute case vary quality result study paper aim provide introduction guideline researcher conduct reader study report content base author experience read terminology compile different handbook domain particular social science information system adapt need engineering present recommend practice empirically derive evaluate checklist research
Systematic literature reviews in software engineering – A systematic literature review,"Background: In 2004 the concept of evidence-based software engineering (EBSE) was introduced at ICSE04 conference. Aims: This study assesses impact systematic literature reviews (SLRs) which are recommended EBSE method for aggregating evidence. Method: We used standard review employing a manual search 10 journals and 4 conference proceedings. Results: Of 20 relevant studies, eight addressed research trends rather than technique evaluation. Seven SLRs cost estimation. The quality fair with only three scoring less 2 out 4. Conclusions: Currently, topic areas covered by limited. European researchers, particularly those Simula Laboratory appear to be leading exponents reviews. series estimation demonstrate potential value synthesising evidence making it available practitioners.",2009-01-01,https://doi.org/10.1016/j.infsof.2008.09.009,"Barbara Kitchenham, O. Pearl Brereton, David Budgen, Mark Turner, John Bailey, Stephen Linkman",3295,Background In 2004 the concept of evidencebased software engineering EBSE was introduced at ICSE04 conference Aims This study assesses impact systematic literature reviews SLRs which are recommended EBSE method for aggregating evidence Method We used standard review employing a manual search 10 journals and 4 conference proceedings Results Of 20 relevant studies eight addressed research trends rather than technique evaluation Seven SLRs cost estimation The quality fair with only three scoring less 2 out 4 Conclusions Currently topic areas covered by limited European researchers particularly those Simula Laboratory appear to be leading exponents reviews series estimation demonstrate potential value synthesising evidence making it available practitioners,background 2004 concept evidencebas softwar engin ebs introduc icse04 confer aim studi assess impact systemat literatur review slr recommend ebs method aggreg evid method use standard review employ manual search 10 journal 4 confer proceed result 20 relev studi eight address research trend rather techniqu evalu seven slr cost estim qualiti fair three score less 2 4 conclus current topic area cover limit european research particularli simula laboratori appear lead expon review seri estim demonstr potenti valu synthesis evid make avail practition,background concept evidencebased software engineering ebse introduce conference aim study assess impact systematic literature review slrs recommend ebse method aggregate evidence method standard review employ manual search journal conference proceeding result relevant study address research trend technique evaluation seven slrs cost estimation quality fair scoring conclusion currently topic area cover limited european researcher particularly simula laboratory appear lead exponent reviews series estimation demonstrate potential value synthesise evidence make available practitioner
Experimentation in Software Engineering,"It is my belief that software engineers not only need to know engineering methods and processes, but they also should how assess them. Conse quently, I have taught principles of",2000-01-01,https://doi.org/10.1007/978-1-4615-4625-2,"Claes Wohlin, Per Runeson, Martin Höst, Magnus C. Ohlsson, Björn Regnell, Anders Wesslén",1645,It is my belief that software engineers not only need to know engineering methods and processes but they also should how assess them Conse quently I have taught principles of,belief softwar engin need know engin method process also assess cons quentli taught principl,belief software engineer need know engineering method process assess conse quently teach principle
On Non-Functional Requirements in Software Engineering,"Essentially a software system’s utility is determined by both its functionality and non-functional characteristics, such as usability, flexibility, performance, interoperability security. Nonetheless, there has been lop-sided emphasis in the of software, even though not useful or usable without necessary characteristics. In this chapter, we review state art on treatment requirements (hereafter, NFRs), while providing some prospects for future directions.",2009-01-01,https://doi.org/10.1007/978-3-642-02463-4_19,"Lawrence Chung, Julio César Sampaio do Prado Leite",2169,Essentially a software systems utility is determined by both its functionality and nonfunctional characteristics such as usability flexibility performance interoperability security Nonetheless there has been lopsided emphasis in the of software even though not useful or usable without necessary characteristics In this chapter we review state art on treatment requirements hereafter NFRs while providing some prospects for future directions,essenti softwar system util determin function nonfunct characterist usabl flexibl perform interoper secur nonetheless lopsid emphasi softwar even though use usabl without necessari characterist chapter review state art treatment requir hereaft nfr provid prospect futur direct,essentially software system utility determine functionality nonfunctional characteristic usability flexibility performance interoperability security nonetheless lopside emphasis software useful usable necessary characteristic chapter review state art treatment requirement nfrs provide prospect future direction
Experimentation in software engineering,"Like other sciences and engineering disciplines, software requires a cycle of model building, experimentation, learning. Experiments are valuable tools for all engineers who involved in evaluating choosing between different methods, techniques, languages tools. The purpose Experimentation Software Engineering is to introduce students, teachers, researchers, practitioners empirical studies engineering, using controlled experiments. introduction experimentation provided through process perspective, the focus on steps that we have go perform an experiment. book divided into three parts. first part provides background theories methods used experimentation. Part II then devotes one chapter each five experiment steps: scoping, planning, execution, analysis, result presentation. III completes presentation with two examples. Assignments statistical material appendixes. Overall indispensable information regarding particular experiments, but also case studies, systematic literature reviews, surveys. It revision authors book, which was published 2000. In addition, substantial new material, e.g. concerning reviews study research, introduced. self-contained it suitable as course undergraduate or graduate where need stressed. Exercises assignments included combine more theoretical practical aspects. Researchers will benefit from learning about how conduct likewise may use cookbook when techniques before implementing them their organization.",2013-04-17,https://doi.org/10.5860/choice.50-5018,"Claes Wohlin, Per Runeson, Martin Hst, Magnus C. Ohlsson, Bjrn Regnell, Anders Wessln",1653,Like other sciences and engineering disciplines software requires a cycle of model building experimentation learning Experiments are valuable tools for all engineers who involved in evaluating choosing between different methods techniques languages tools The purpose Experimentation Software Engineering is to introduce students teachers researchers practitioners empirical studies engineering using controlled experiments introduction experimentation provided through process perspective the focus on steps that we have go perform an experiment book divided into three parts first part provides background theories methods used experimentation Part II then devotes one chapter each five experiment steps scoping planning execution analysis result presentation III completes presentation with two examples Assignments statistical material appendixes Overall indispensable information regarding particular experiments but also case studies systematic literature reviews surveys It revision authors book which was published 2000 In addition substantial new material eg concerning reviews study research introduced selfcontained it suitable as course undergraduate or graduate where need stressed Exercises assignments included combine more theoretical practical aspects Researchers will benefit from learning about how conduct likewise may use cookbook when techniques before implementing them their organization,like scienc engin disciplin softwar requir cycl model build experiment learn experi valuabl tool engin involv evalu choos differ method techniqu languag tool purpos experiment softwar engin introduc student teacher research practition empir studi engin use control experi introduct experiment provid process perspect focu step go perform experi book divid three part first part provid background theori method use experiment part ii devot one chapter five experi step scope plan execut analysi result present iii complet present two exampl assign statist materi appendix overal indispens inform regard particular experi also case studi systemat literatur review survey revis author book publish 2000 addit substanti new materi eg concern review studi research introduc selfcontain suitabl cours undergradu graduat need stress exercis assign includ combin theoret practic aspect research benefit learn conduct likewis may use cookbook techniqu implement organ,like science engineering discipline software require cycle model building experimentation learn experiment valuable tool engineer involve evaluate choose different method technique language tool purpose experimentation software engineering introduce student teacher researcher practitioner empirical study engineer control experiment introduction experimentation provide process perspective focus step perform experiment book divide part provide background theory method experimentation ii devote chapter experiment step scope planning execution analysis result presentation iii complete presentation example assignment statistical material appendix overall indispensable information particular experiment case study systematic literature review survey revision author book publish addition substantial new material eg concern review study research introduce selfcontaine suitable course undergraduate graduate need stress exercise assignment include combine theoretical practical aspect researcher benefit learn conduct likewise use cookbook technique implement organization
Guidelines for snowballing in systematic literature studies and a replication in software engineering,"Background: Systematic literature studies have become common in software engineering, and hence it is important to understand how conduct them efficiently reliably.",2014-05-13,https://doi.org/10.1145/2601248.2601268,Claes Wohlin,2592,Background Systematic literature studies have become common in software engineering and hence it is important to understand how conduct them efficiently reliably,background systemat literatur studi becom common softwar engin henc import understand conduct effici reliabl,background systematic literature study common software engineering important understand conduct efficiently reliably
On agent-based software engineering,"Agent-based computing represents an exciting new synthesis both for Artificial Intelligence (AI) and, more generally, Computer Science. It has the potential to significantly improve theory and practice of modeling, designing, implementing computer systems. Yet, date, there been little systematic analysis what makes agent-based approach such appealing powerful computational model. Moreover, even less effort devoted discussing inherent disadvantages that stem from adopting agent-oriented view. Here sets issues are explored. The standpoint this is role software in solving complex, real-world problems. In particular, it will be argued development robust scalable systems requires autonomous agents can complete their objectives while situated a dynamic uncertain environment, engage rich, high-level social interactions, operate within flexible organisational structures.",2000-03-01,https://doi.org/10.1016/s0004-3702(99)00107-1,Nicholas R. Jennings,1590,Agentbased computing represents an exciting new synthesis both for Artificial Intelligence AI and more generally Computer Science It has the potential to significantly improve theory and practice of modeling designing implementing computer systems Yet date there been little systematic analysis what makes agentbased approach such appealing powerful computational model Moreover even less effort devoted discussing inherent disadvantages that stem from adopting agentoriented view Here sets issues are explored The standpoint this is role software in solving complex realworld problems In particular it will be argued development robust scalable systems requires autonomous agents can complete their objectives while situated a dynamic uncertain environment engage rich highlevel social interactions operate within flexible organisational structures,agentbas comput repres excit new synthesi artifici intellig ai gener comput scienc potenti significantli improv theori practic model design implement comput system yet date littl systemat analysi make agentbas approach appeal power comput model moreov even less effort devot discuss inher disadvantag stem adopt agentori view set issu explor standpoint role softwar solv complex realworld problem particular argu develop robust scalabl system requir autonom agent complet object situat dynam uncertain environ engag rich highlevel social interact oper within flexibl organis structur,agentbase computing represent exciting new synthesis artificial intelligence ai generally computer science potential significantly improve theory practice model design implement computer system date little systematic analysis make agentbased approach appeal powerful computational model effort devote discuss inherent disadvantage stem adopt agentoriented view set issue explore standpoint role software solve complex realworld problem particular argue development robust scalable system require autonomous agent complete objective situate dynamic uncertain environment engage rich highlevel social interaction operate flexible organisational structure
"On ""Software engineering""",No abstract available.,1985-01-01,https://doi.org/10.1145/1012443.1012444,E. N. Miya,1076,No abstract available,abstract avail,abstract available
A discipline for software engineering,"From the Publisher:
This new work from Watts Humphrey, author of influential book, Managing Software Process, broadens his orderly view software process management, and lays foundation for a disciplined approach to engineering. In earlier developed concrete methods managing development maintenance. These methods, now commonly practiced in industry, provide programmers managers with specific steps they can take evaluate improve their capabilities. this Humphrey scales those down personal level, helping engineers develop skills habits needed plan, track, analyze large, complex projects. others have used material book train professionals students around world projects-oriented engineering course. First establishing need discipline engineering, benefits practitioners learning how manage process, then develops model that use monitor, test, work. Examples drawn industry enhance practical focus while project exercises give readers opportunity practice management as learn it. Features: presents concepts process; industrial practices planning, tracking, analysis, defect fit needs small-scale program development; shows small disciplines solid base larger",1995-12-01,https://doi.org/10.1016/0967-0661(95)90062-4,Watts S. Humphrey,1132,"From the Publisher
This new work from Watts Humphrey author of influential book Managing Software Process broadens his orderly view software process management and lays foundation for a disciplined approach to engineering In earlier developed concrete methods managing development maintenance These methods now commonly practiced in industry provide programmers managers with specific steps they can take evaluate improve their capabilities this Humphrey scales those down personal level helping engineers develop skills habits needed plan track analyze large complex projects others have used material book train professionals students around world projectsoriented engineering course First establishing need discipline engineering benefits practitioners learning how manage process then develops model that use monitor test work Examples drawn industry enhance practical focus while project exercises give readers opportunity practice management as learn it Features presents concepts process industrial practices planning tracking analysis defect fit needs smallscale program development shows small disciplines solid base larger",publish new work watt humphrey author influenti book manag softwar process broaden orderli view softwar process manag lay foundat disciplin approach engin earlier develop concret method manag develop mainten method commonli practic industri provid programm manag specif step take evalu improv capabl humphrey scale person level help engin develop skill habit need plan track analyz larg complex project other use materi book train profession student around world projectsori engin cours first establish need disciplin engin benefit practition learn manag process develop model use monitor test work exampl drawn industri enhanc practic focu project exercis give reader opportun practic manag learn featur present concept process industri practic plan track analysi defect fit need smallscal program develop show small disciplin solid base larger,publisher new work watts humphrey author influential book manage software process broaden orderly view software process management lay foundation discipline approach engineering early develop concrete method manage development maintenance method commonly practice industry provide programmer manager specific step evaluate improve capability humphrey scale personal level help engineer develop skill habit need plan track analyze large complex project material book train professional student world projectsoriente engineering course establish need discipline engineering benefit practitioner learn manage process develop model use monitor test work example draw industry enhance practical focus project exercise reader opportunity practice management learn feature present concept process industrial practice plan tracking analysis defect fit need smallscale program development show small discipline solid base large
Guidelines for conducting systematic mapping studies in software engineering: An update,"Systematic mapping studies are used to structure a research area, while systematic reviews focused on gathering and synthesizing evidence. The most recent guidelines for from 2008. Since that time, many suggestions have been made of how improve literature (SLRs). There is need evaluate researchers conduct the process identify should be updated based lessons learned existing maps SLR guidelines. To conducted (including search, study selection, analysis presentation data, etc.); improvement potentials in conducting updating accordingly. We maps, considering some practices review as well (in particular relation defining search quality assessment). In large number multiple combined, which leads different ways studies. reason combining was they differed recommendations given. frequently followed not sufficient alone. Hence, there provide an update New proposed consolidating findings.",2015-08-01,https://doi.org/10.1016/j.infsof.2015.03.007,"Kai Petersen, Sairam Vakkalanka, Ludwik Kuźniarz",1876,Systematic mapping studies are used to structure a research area while systematic reviews focused on gathering and synthesizing evidence The most recent guidelines for from 2008 Since that time many suggestions have been made of how improve literature SLRs There is need evaluate researchers conduct the process identify should be updated based lessons learned existing maps SLR guidelines To conducted including search study selection analysis presentation data etc improvement potentials in conducting updating accordingly We maps considering some practices review as well in particular relation defining search quality assessment In large number multiple combined which leads different ways studies reason combining was they differed recommendations given frequently followed not sufficient alone Hence there provide an update New proposed consolidating findings,systemat map studi use structur research area systemat review focus gather synthes evid recent guidelin 2008 sinc time mani suggest made improv literatur slr need evalu research conduct process identifi updat base lesson learn exist map slr guidelin conduct includ search studi select analysi present data etc improv potenti conduct updat accordingli map consid practic review well particular relat defin search qualiti assess larg number multipl combin lead differ way studi reason combin differ recommend given frequent follow suffici alon henc provid updat new propos consolid find,systematic mapping study structure research area systematic review focus gather synthesize evidence recent guideline time suggestion improve literature slrs need evaluate researcher conduct process identify update base lesson learn exist map slr guideline conduct include search study selection analysis presentation datum etc improvement potential conduct update accordingly map consider practice review particular relation define search quality assessment large number multiple combine lead different way study reason combine differ recommendation give frequently follow sufficient provide update new propose consolidating finding
Qualitative methods in empirical studies of software engineering,"While empirical studies in software engineering are beginning to gain recognition the research community, this subarea is also entering a new level of maturity by address human aspects development. This added focus has layer complexity an already challenging area research. Along with questions, methods needed study nontechnical engineering. In many other disciplines, qualitative have been developed and commonly used handle issues involving behaviour. The paper presents several for data collection analysis describes them terms how they might be incorporated into engineering, particular combined quantitative methods. To illustrate use methods, examples from real throughout.",1999-01-01,https://doi.org/10.1109/32.799955,Carolyn Seaman,1331,While empirical studies in software engineering are beginning to gain recognition the research community this subarea is also entering a new level of maturity by address human aspects development This added focus has layer complexity an already challenging area research Along with questions methods needed study nontechnical engineering In many other disciplines qualitative have been developed and commonly used handle issues involving behaviour The paper presents several for data collection analysis describes them terms how they might be incorporated into engineering particular combined quantitative methods To illustrate use methods examples from real throughout,empir studi softwar engin begin gain recognit research commun subarea also enter new level matur address human aspect develop ad focu layer complex alreadi challeng area research along question method need studi nontechn engin mani disciplin qualit develop commonli use handl issu involv behaviour paper present sever data collect analysi describ term might incorpor engin particular combin quantit method illustr use method exampl real throughout,empirical study software engineering begin gain recognition research community subarea enter new level maturity address human aspect development add focus layer complexity challenging area research question method need study nontechnical engineering discipline qualitative develop commonly handle issue involve behaviour paper present data collection analysis describe term incorporate engineer particular combine quantitative method illustrate use method example real
Encyclopedia of Software Engineering,"From the Publisher:
Encompasses field of software development process--from design to transpiration testing and everything in between. Includes all functional disciplines, tools languages associated with engineering large and/or complex projects. Organized alphabetically--every major area contains an overview article that defines topic. Each sub-discipline has a specific covering history, current practice, practical data projections about future practice.",2002-01-15,https://doi.org/10.1002/0471028959,J. Marciniak,1065,"From the Publisher
Encompasses field of software development processfrom design to transpiration testing and everything in between Includes all functional disciplines tools languages associated with engineering large andor complex projects Organized alphabeticallyevery major area contains an overview article that defines topic Each subdiscipline has a specific covering history current practice practical data projections about future practice",publish encompass field softwar develop processfrom design transpir test everyth includ function disciplin tool languag associ engin larg andor complex project organ alphabeticallyeveri major area contain overview articl defin topic subdisciplin specif cover histori current practic practic data project futur practic,publisher encompass field software development processfrom design transpiration testing include functional discipline tool language associate engineer large andor complex project organize alphabeticallyevery major area contain overview article define topic subdiscipline specific covering history current practice practical datum projection future practice
Object-oriented software engineering: a use case driven approach,"Malaria is one of the most prevalent diseases in urban areas. flourishes sub-tropical countries and affect public health. The impact very high, where health monitoring facilities are limited. To minimize malaria population domains, a suitable disease prediction model required. objective this study to determine abundances using clinical environmental variables with Big Data on geographical location Khammam district, Telanagana, India.Prediction based data collected from primary centres department vector borne (DVBD) district satellite such as rain fall, relative humidity, temperature vegetation taken for time period 1995–2014. In study, we test efficacy artificial neural network (ANN) mosquito abundance prediction. Prediction was developed 2015 feed forward compared observed values.The results vary area rainfall corresponding average error ranges 18% 117%. Clinical number patients treated symptoms without can improve level when combined variables. We perform preliminary findings by collecting big across different seasons. Further, more exploration required accuracy real practice. manuscript, some larger Till today, many models have been examine approaches, but new approach analysis.",1992-12-01,https://doi.org/10.1016/0950-5849(92)90126-a,LF Marshall,1576,Malaria is one of the most prevalent diseases in urban areas flourishes subtropical countries and affect public health The impact very high where health monitoring facilities are limited To minimize malaria population domains a suitable disease prediction model required objective this study to determine abundances using clinical environmental variables with Big Data on geographical location Khammam district Telanagana IndiaPrediction based data collected from primary centres department vector borne DVBD district satellite such as rain fall relative humidity temperature vegetation taken for time period 19952014 In study we test efficacy artificial neural network ANN mosquito abundance prediction Prediction was developed 2015 feed forward compared observed valuesThe results vary area rainfall corresponding average error ranges 18 117 Clinical number patients treated symptoms without can improve level when combined variables We perform preliminary findings by collecting big across different seasons Further more exploration required accuracy real practice manuscript some larger Till today many models have been examine approaches but new approach analysis,malaria one preval diseas urban area flourish subtrop countri affect public health impact high health monitor facil limit minim malaria popul domain suitabl diseas predict model requir object studi determin abund use clinic environment variabl big data geograph locat khammam district telanagana indiapredict base data collect primari centr depart vector born dvbd district satellit rain fall rel humid temperatur veget taken time period 19952014 studi test efficaci artifici neural network ann mosquito abund predict predict develop 2015 feed forward compar observ valuesth result vari area rainfal correspond averag error rang 18 117 clinic number patient treat symptom without improv level combin variabl perform preliminari find collect big across differ season explor requir accuraci real practic manuscript larger till today mani model examin approach new approach analysi,malaria prevalent disease urban area flourish subtropical country affect public health impact high health monitoring facility limit minimize malaria population domain suitable disease prediction model require objective study determine abundance clinical environmental variable big datum geographical location khammam district telanagana indiaprediction base datum collect primary centre department vector borne dvbd district satellite rain fall relative humidity temperature vegetation take time period study test efficacy artificial neural network ann mosquito abundance prediction prediction develop feed forward compare observe valuesthe result vary area rainfall correspond average error range clinical number patient treat symptom improve level combine variable perform preliminary finding collect big different season exploration require accuracy real practice manuscript large till today model examine approach new approach analysis
Preliminary guidelines for empirical research in software engineering,"Empirical software engineering research needs guidelines to improve the and reporting processes. We propose a preliminary set of aimed at stimulating discussion among researchers. They are based on review developed for medical researchers our own experience in doing reviewing research. The intended assist researchers, reviewers, meta-analysts designing, conducting, evaluating empirical studies. Editorial boards journals may wish use recommendations as basis developing reviewers framing policies dealing with design, data collection, analysis",2002-08-01,https://doi.org/10.1109/tse.2002.1027796,"Barbara Kitchenham, Shari Lawrence Pfleeger, Lesley M. Pickard, Peter W. Jones, David C. Hoaglin, Khaled El Emam, Jarrett Rosenberg",1451,Empirical software engineering research needs guidelines to improve the and reporting processes We propose a preliminary set of aimed at stimulating discussion among researchers They are based on review developed for medical researchers our own experience in doing reviewing research The intended assist researchers reviewers metaanalysts designing conducting evaluating empirical studies Editorial boards journals may wish use recommendations as basis developing reviewers framing policies dealing with design data collection analysis,empir softwar engin research need guidelin improv report process propos preliminari set aim stimul discuss among research base review develop medic research experi review research intend assist research review metaanalyst design conduct evalu empir studi editori board journal may wish use recommend basi develop review frame polici deal design data collect analysi,empirical software engineering research need guideline improve reporting process propose preliminary set aim stimulate discussion researcher base review develop medical researcher experience review research intend assist researcher reviewer metaanalyst design conduct evaluate empirical study editorial board journal wish use recommendation basis develop reviewer frame policy deal design datum collection analysis
Lessons from applying the systematic literature review process within the software engineering domain,"A consequence of the growing number empirical studies in software engineering is need to adopt systematic approaches assessing and aggregating research outcomes order provide a balanced objective summary evidence for particular topic. The paper reports experiences with applying one such approach, practice literature review, published relevant topics within domain. review process summarised, reviews being undertaken by authors others are described some lessons about applicability this extracted. basic seems appropriate preparation validation protocol advance activity especially valuable. highlights areas where adaptation accommodate domain-specific characteristics needed as well improvements current infrastructure practices would enhance its applicability. In particular, support provided indexing databases inadequate. Also, quality abstracts poor; it usually not possible judge relevance study from abstract alone.",2007-04-01,https://doi.org/10.1016/j.jss.2006.07.009,"Pearl Brereton, Barbara Kitchenham, David Budgen, Mark Turner, Mohamed Bakr Khalil",2024,A consequence of the growing number empirical studies in software engineering is need to adopt systematic approaches assessing and aggregating research outcomes order provide a balanced objective summary evidence for particular topic The paper reports experiences with applying one such approach practice literature review published relevant topics within domain review process summarised reviews being undertaken by authors others are described some lessons about applicability this extracted basic seems appropriate preparation validation protocol advance activity especially valuable highlights areas where adaptation accommodate domainspecific characteristics needed as well improvements current infrastructure practices would enhance its applicability In particular support provided indexing databases inadequate Also quality abstracts poor it usually not possible judge relevance study from abstract alone,consequ grow number empir studi softwar engin need adopt systemat approach assess aggreg research outcom order provid balanc object summari evid particular topic paper report experi appli one approach practic literatur review publish relev topic within domain review process summaris review undertaken author other describ lesson applic extract basic seem appropri prepar valid protocol advanc activ especi valuabl highlight area adapt accommod domainspecif characterist need well improv current infrastructur practic would enhanc applic particular support provid index databas inadequ also qualiti abstract poor usual possibl judg relev studi abstract alon,consequence grow number empirical study software engineering need adopt systematic approach assess aggregate research outcome order provide balanced objective summary evidence particular topic paper report experience apply approach practice literature review publish relevant topic domain review process summarise review undertake author describe lesson applicability extract basic appropriate preparation validation protocol advance activity especially valuable highlight area adaptation accommodate domainspecific characteristic need improvement current infrastructure practice enhance applicability particular support provide indexing database inadequate quality abstract poor usually possible judge relevance study abstract
A Methodology for Collecting Valid Software Engineering Data,"An effective data collection method for evaluating software development methodologies and studying the process is described. The uses goal-directed to evaluate with respect claims made them. Such are used as a basis defining goals of collection, establishing list questions interest be answered by analysis, set categorization schemes, designing form. collected based on changes during development, obtained when made. To ensure accuracy data, validation performed concurrently collection. Validation interviews those people supplying data. Results from using methodology show that necessary part change Without it, much 50 percent may erroneous. Feasibility was demonstrated applying it five different projects in two environments. application showed both feasible useful.",1984-11-01,https://doi.org/10.1109/tse.1984.5010301,"Victor R. Basili, David M. Weiss",1091,An effective data collection method for evaluating software development methodologies and studying the process is described The uses goaldirected to evaluate with respect claims made them Such are used as a basis defining goals of collection establishing list questions interest be answered by analysis set categorization schemes designing form collected based on changes during development obtained when made To ensure accuracy data validation performed concurrently collection Validation interviews those people supplying data Results from using methodology show that necessary part change Without it much 50 percent may erroneous Feasibility was demonstrated applying it five different projects in two environments application showed both feasible useful,effect data collect method evalu softwar develop methodolog studi process describ use goaldirect evalu respect claim made use basi defin goal collect establish list question interest answer analysi set categor scheme design form collect base chang develop obtain made ensur accuraci data valid perform concurr collect valid interview peopl suppli data result use methodolog show necessari part chang without much 50 percent may erron feasibl demonstr appli five differ project two environ applic show feasibl use,effective datum collection method evaluate software development methodology study process describe use goaldirecte evaluate respect claim basis define goal collection establish list question interest answer analysis set categorization scheme designing form collect base change development obtain ensure accuracy datum validation perform concurrently collection validation interview people supply datum result methodology necessary change percent erroneous feasibility demonstrate apply different project environment application show feasible useful
Search-based software engineering,"This paper claims that a new field of software engineering research and practice is emerging: search-based engineering. The argues ideal for the application metaheuristic search techniques, such as genetic algorithms, simulated annealing tabu search. Such techniques could provide solutions to difficult problems balancing competing (and some times inconsistent) constraints may suggest ways finding acceptable in situations where perfect are either theoretically impossible or practically infeasible. In order develop engineering, reformulation classic required. briefly sets out key ingredients successful evaluation criteria",2001-12-01,https://doi.org/10.1016/s0950-5849(01)00189-6,"Mark Harman, B.F. Jones",872,This paper claims that a new field of software engineering research and practice is emerging searchbased engineering The argues ideal for the application metaheuristic search techniques such as genetic algorithms simulated annealing tabu search Such techniques could provide solutions to difficult problems balancing competing and some times inconsistent constraints may suggest ways finding acceptable in situations where perfect are either theoretically impossible or practically infeasible In order develop engineering reformulation classic required briefly sets out key ingredients successful evaluation criteria,paper claim new field softwar engin research practic emerg searchbas engin argu ideal applic metaheurist search techniqu genet algorithm simul anneal tabu search techniqu could provid solut difficult problem balanc compet time inconsist constraint may suggest way find accept situat perfect either theoret imposs practic infeas order develop engin reformul classic requir briefli set key ingredi success evalu criteria,paper claim new field software engineering research practice emerge searchbase engineer argue ideal application metaheuristic search technique genetic algorithm simulate anneal tabu search technique provide solution difficult problem balance compete time inconsistent constraint suggest way find acceptable situation perfect theoretically impossible practically infeasible order develop engineering reformulation classic require briefly set key ingredient successful evaluation criterion
Software Engineering,"This paper provides a definition of the term ""software engineering"" and survey current state art likely future trends in field. The covers technology available various phases software life cycle—requirements engineering, design, coding, test, maintenance—and overall area management integrated technology-management approaches. It is oriented primarily toward discussing domain applicability techniques (where when they work), rather than how work detail. To cover latter, an extensive set 104 references provided.",1976-12-01,https://doi.org/10.1109/tc.1976.1674590,Dimitris Tousoulis,526,This paper provides a definition of the term software engineering and survey current state art likely future trends in field The covers technology available various phases software life cyclerequirements engineering design coding test maintenanceand overall area management integrated technologymanagement approaches It is oriented primarily toward discussing domain applicability techniques where when they work rather than how work detail To cover latter an extensive set 104 references provided,paper provid definit term softwar engin survey current state art like futur trend field cover technolog avail variou phase softwar life cyclerequir engin design code test maintenanceand overal area manag integr technologymanag approach orient primarili toward discuss domain applic techniqu work rather work detail cover latter extens set 104 refer provid,paper provide definition term software engineering survey current state art likely future trend field cover technology available phase software life cyclerequirement engineering design code test maintenanceand overall area management integrate technologymanagement approach orient primarily discuss domain applicability technique work work detail cover extensive set reference provide
Agent-based software engineering,"The technology of intelligent agents and multi-agent systems is expected to alter radically the way in which complex, distributed, open are conceptualised implemented. paper considers problem building a system as software engineering enterprise. Three issues focused on: how might be specified; these specifications refined or otherwise transformed into efficient implementations; implemented subsequently verified, show that they correct with respect their specifications. These discussed reference number case studies. concludes by setting out some problems for future research.",1997-01-01,https://doi.org/10.1049/ip-sen:19971026,Leïla Amgoud,820,The technology of intelligent agents and multiagent systems is expected to alter radically the way in which complex distributed open are conceptualised implemented paper considers problem building a system as software engineering enterprise Three issues focused on how might be specified these specifications refined or otherwise transformed into efficient implementations implemented subsequently verified show that they correct with respect their specifications These discussed reference number case studies concludes by setting out some problems for future research,technolog intellig agent multiag system expect alter radic way complex distribut open conceptualis implement paper consid problem build system softwar engin enterpris three issu focus might specifi specif refin otherwis transform effici implement implement subsequ verifi show correct respect specif discuss refer number case studi conclud set problem futur research,technology intelligent agent multiagent system expect alter radically way complex distribute open conceptualise implement paper consider problem build system software engineering enterprise issue focus specify specification refine transform efficient implementation implement subsequently verify correct respect specification discuss reference number case study conclude set problem future research
Software engineering economics,"This work aims to shed light on an important topic that has begun emerge in recent years, which is the economics of software engineering as a basic pillar national development and confronting competitive market challenges characterize this industry. reviews knowledge economy its connection information digital economy. The background generations from beginning reliance craftsmanship based manual effort professionalism superior skill creative thought; He defined field characterized by distinguished human performance speed change. also perspective organized, controlled effective analysis, evaluation, description, design within framework management, quality, modernity, innovation availability standards skills. explained direct computer science. It clarified characteristics dimensions industry related industrial structure, education, qualified resources, distribution producing companies, their sizes, integration systems packages sold locally face exports them. was discussed making better decisions create added value, monitoring controlling dynamic investment way, stages advantage leading production, investment, creativity, wealth. demonstrated elements practicing applications determine parameters production use capability maturity model. included foundations improving terms reducing size degree complexity, process, forming teams using integrated tools greater mechanism, developing economic technical feasibility; Advancement cost, reliability, ease use, maintainability application were highlighted; ended with conclusion set governing results some recommendations are required be adopted adopting compatible global ones.",2007-09-30,https://doi.org/10.70000/cj.2007.14.426,Mohamed Mohamed Al Hady,758,This work aims to shed light on an important topic that has begun emerge in recent years which is the economics of software engineering as a basic pillar national development and confronting competitive market challenges characterize this industry reviews knowledge economy its connection information digital economy The background generations from beginning reliance craftsmanship based manual effort professionalism superior skill creative thought He defined field characterized by distinguished human performance speed change also perspective organized controlled effective analysis evaluation description design within framework management quality modernity innovation availability standards skills explained direct computer science It clarified characteristics dimensions industry related industrial structure education qualified resources distribution producing companies their sizes integration systems packages sold locally face exports them was discussed making better decisions create added value monitoring controlling dynamic investment way stages advantage leading production investment creativity wealth demonstrated elements practicing applications determine parameters production use capability maturity model included foundations improving terms reducing size degree complexity process forming teams using integrated tools greater mechanism developing economic technical feasibility Advancement cost reliability ease use maintainability application were highlighted ended with conclusion set governing results some recommendations are required be adopted adopting compatible global ones,work aim shed light import topic begun emerg recent year econom softwar engin basic pillar nation develop confront competit market challeng character industri review knowledg economi connect inform digit economi background gener begin relianc craftsmanship base manual effort profession superior skill creativ thought defin field character distinguish human perform speed chang also perspect organ control effect analysi evalu descript design within framework manag qualiti modern innov avail standard skill explain direct comput scienc clarifi characterist dimens industri relat industri structur educ qualifi resourc distribut produc compani size integr system packag sold local face export discuss make better decis creat ad valu monitor control dynam invest way stage advantag lead product invest creativ wealth demonstr element practic applic determin paramet product use capabl matur model includ foundat improv term reduc size degre complex process form team use integr tool greater mechan develop econom technic feasibl advanc cost reliabl eas use maintain applic highlight end conclus set govern result recommend requir adopt adopt compat global one,work aim shed light important topic begin emerge recent year economic software engineering basic pillar national development confront competitive market challenge characterize industry review knowledge economy connection information digital economy background generation begin reliance craftsmanship base manual effort professionalism superior skill creative thought define field characterize distinguished human performance speed change perspective organize control effective analysis evaluation description design framework management quality modernity innovation availability standard skill explain direct computer science clarify characteristic dimension industry relate industrial structure education qualified resource distribution produce company size integration system package sell locally face export discuss make well decision create add value monitor control dynamic investment way stage advantage lead production investment creativity wealth demonstrate element practice application determine parameter production use capability maturity model include foundation improve term reduce size degree complexity process form team integrate tool great mechanism develop economic technical feasibility advancement cost reliability ease use maintainability application highlight end conclusion set governing result recommendation require adopt adopt compatible global one
An open graph visualization system and its applications to software engineering,"We describe a package of practical tools and libraries for manipulating graphs their drawings. Our design, which is aimed at facilitating the combination components with other tools, includes stream event interfaces graph operations, high-quality static dynamic layout algorithms, ability to handle sizeable graphs. conclude description applications this variety software engineering tools. Copyright © 2000 John Wiley & Sons, Ltd.",2000-09-01,https://doi.org/10.1002/1097-024x(200009)30:11<1203::aid-spe338>3.3.co;2-e,"Emden R. Gansner, Stephen C. North",1086,We describe a package of practical tools and libraries for manipulating graphs their drawings Our design which is aimed at facilitating the combination components with other tools includes stream event interfaces graph operations highquality static dynamic layout algorithms ability to handle sizeable graphs conclude description applications this variety software engineering tools Copyright  2000 John Wiley  Sons Ltd,describ packag practic tool librari manipul graph draw design aim facilit combin compon tool includ stream event interfac graph oper highqual static dynam layout algorithm abil handl sizeabl graph conclud descript applic varieti softwar engin tool copyright 2000 john wiley son ltd,describe package practical tool library manipulate graph drawing design aim facilitate combination component tool include stream event interface graph operation highquality static dynamic layout algorithm ability handle sizeable graph conclude description application variety software engineering tool copyright john wiley sons ltd
Property-based software engineering measurement,"Little theory exists in the field of software system measurement. Concepts such as complexity, coupling, cohesion or even size are very often subject to interpretation and appear have inconsistent definitions literature. As a consequence, there is little guidance provided analyst attempting define proper measures for specific problems. Many controversies literature simply misunderstandings stem from fact that some people talk about different measurement concepts under same label (complexity most common case). There need unambiguously important used products. One way doing so precisely what mathematical properties characterize these concepts, regardless artifacts which applied. Such framework could generate consensus engineering community provide means better communication among researchers, guidelines analysts, evaluation methods commercial static analyzers practitioners. We propose generic, because it not any particular artifact, rigorous, based on precise concepts. use this several (size, length, cohesion, coupling). It does intend be complete fully objective; other frameworks been proposed choices made. However, we believe formalisms introduce convenient intuitive. This contributes constructively firmer theoretical ground",1996-01-01,https://doi.org/10.1109/32.481535,"Lionel Briand, Sandro Morasca, Victor R. Basili",755,Little theory exists in the field of software system measurement Concepts such as complexity coupling cohesion or even size are very often subject to interpretation and appear have inconsistent definitions literature As a consequence there is little guidance provided analyst attempting define proper measures for specific problems Many controversies literature simply misunderstandings stem from fact that some people talk about different measurement concepts under same label complexity most common case There need unambiguously important used products One way doing so precisely what mathematical properties characterize these concepts regardless artifacts which applied Such framework could generate consensus engineering community provide means better communication among researchers guidelines analysts evaluation methods commercial static analyzers practitioners We propose generic because it not any particular artifact rigorous based on precise concepts use this several size length cohesion coupling It does intend be complete fully objective other frameworks been proposed choices made However we believe formalisms introduce convenient intuitive This contributes constructively firmer theoretical ground,littl theori exist field softwar system measur concept complex coupl cohes even size often subject interpret appear inconsist definit literatur consequ littl guidanc provid analyst attempt defin proper measur specif problem mani controversi literatur simpli misunderstand stem fact peopl talk differ measur concept label complex common case need unambigu import use product one way precis mathemat properti character concept regardless artifact appli framework could gener consensu engin commun provid mean better commun among research guidelin analyst evalu method commerci static analyz practition propos gener particular artifact rigor base precis concept use sever size length cohes coupl intend complet fulli object framework propos choic made howev believ formal introduc conveni intuit contribut construct firmer theoret ground,little theory exist field software system measurement concept complexity coupling cohesion size subject interpretation appear inconsistent definition literature consequence little guidance provide analyst attempt define proper measure specific problem controversy literature simply misunderstanding stem fact people talk different measurement concept label complexity common case need unambiguously important product way precisely mathematical property characterize concept regardless artifact apply framework generate consensus engineering community provide mean well communication researcher guideline analyst evaluation method commercial static analyzer practitioner propose generic particular artifact rigorous base precise concept use size length cohesion couple intend complete fully objective framework propose choice believe formalism introduce convenient intuitive contribute constructively firm theoretical ground
Software Engineering for Self-Adaptive Systems: A Research Roadmap,"The goal of this roadmap paper is to summarize the state-of-the-art and identify critical challenges for systematic software engineering self-adaptive systems. partitioned into four parts, one each identified essential views self-adaptation: modelling dimensions, requirements, engineering, assurances. For view, we present that our community must address. This a result Dagstuhl Seminar 08031 on “Software Engineering Self-Adaptive Systems,” which took place in January 2008.",2009-01-01,https://doi.org/10.1007/978-3-642-02161-9_1,"Betty H. C. Cheng, Rogério de Lemos, Holger Giese, Paola Inverardi, Jeff Magee, Jesper Andersson, Basil Becker, Nelly Bencomo, Yuriy Brun, Bojan Čukić, Giovanna Di Marzo Serugendo, Schahram Dustdar, Anthony Finkelstein, Cristina Gacek, Kurt Geihs, Vincenzo Grassi, Gábor Karsai, Damiano Distante, Jeff Kramer, Marin Litoiu, Sam Malek, Raffaela Mirandola, Hausi Müller, Sooyong Park, Mary Shaw, Matthias Tichy, Massimo Tivoli, Danny Weyns, Jon Whittle",1030,The goal of this roadmap paper is to summarize the stateoftheart and identify critical challenges for systematic software engineering selfadaptive systems partitioned into four parts one each identified essential views selfadaptation modelling dimensions requirements engineering assurances For view we present that our community must address This a result Dagstuhl Seminar 08031 on Software Engineering SelfAdaptive Systems which took place in January 2008,goal roadmap paper summar stateoftheart identifi critic challeng systemat softwar engin selfadapt system partit four part one identifi essenti view selfadapt model dimens requir engin assur view present commun must address result dagstuhl seminar 08031 softwar engin selfadapt system took place januari 2008,goal roadmap paper summarize stateoftheart identify critical challenge systematic software engineering selfadaptive system partition part identify essential view selfadaptation model dimension requirement engineering assurance view present community address result dagstuhl seminar software engineering selfadaptive system take place january
Agent-Oriented Software Engineering,"Increasingly many computer systems are being viewed in terms of autonomous agents. Agents espoused as a new theoretical model computation that more closely reflects current computing reality than Turing Machines. advocated the next generation for engineering complex, distributed systems. also used an overarching framework bringing together component AI sub-disciplines necessary to design and build intelligent entities. Despite this intense interest, however, number fundamental questions about nature use agents remain unanswered. In particular:",1999-01-01,https://doi.org/10.1007/3-540-48437-x_1,Nicholas R. Jennings,670,Increasingly many computer systems are being viewed in terms of autonomous agents Agents espoused as a new theoretical model computation that more closely reflects current computing reality than Turing Machines advocated the next generation for engineering complex distributed systems also used an overarching framework bringing together component AI subdisciplines necessary to design and build intelligent entities Despite this intense interest however number fundamental questions about nature use agents remain unanswered In particular,increasingli mani comput system view term autonom agent agent espous new theoret model comput close reflect current comput realiti ture machin advoc next gener engin complex distribut system also use overarch framework bring togeth compon ai subdisciplin necessari design build intellig entiti despit intens interest howev number fundament question natur use agent remain unansw particular,increasingly computer system view term autonomous agent agent espouse new theoretical model computation closely reflect current computing reality ture machine advocate generation engineering complex distribute system overarching framework bring component ai subdiscipline necessary design build intelligent entity despite intense interest number fundamental question nature use agent remain unanswered particular
Systematic literature reviews in software engineering – A tertiary study,"In a previous study, we reported on systematic literature review (SLR), based manual search of 13 journals and conferences undertaken in the period 1st January 2004 to 30th June 2007. The aim this on-going research is provide an annotated catalogue SLRs available software engineering researchers practitioners. This study updates our using broad automated search. We performed find published time 2008. contrast number, quality source these with found original study. Our additional 35 corresponding 33 unique studies. Of papers, 17 appeared relevant undergraduate educational curriculum 12 possible interest number being increasing. papers workshops has improved as more use SLR guidelines. appear have gone past stage used solely by innovators but cannot yet be considered main stream methodology. They are addressing wide range topics still limitations, such often failing assess primary quality.",2010-08-01,https://doi.org/10.1016/j.infsof.2010.03.006,"Barbara Kitchenham, Rialette Pretorius, David Budgen, O. Pearl Brereton, Mark Turner, Mahmood Niazi, Stephen Linkman",966,In a previous study we reported on systematic literature review SLR based manual search of 13 journals and conferences undertaken in the period 1st January 2004 to 30th June 2007 The aim this ongoing research is provide an annotated catalogue SLRs available software engineering researchers practitioners This study updates our using broad automated search We performed find published time 2008 contrast number quality source these with found original study Our additional 35 corresponding 33 unique studies Of papers 17 appeared relevant undergraduate educational curriculum 12 possible interest number being increasing papers workshops has improved as more use SLR guidelines appear have gone past stage used solely by innovators but cannot yet be considered main stream methodology They are addressing wide range topics still limitations such often failing assess primary quality,previou studi report systemat literatur review slr base manual search 13 journal confer undertaken period 1st januari 2004 30th june 2007 aim ongo research provid annot catalogu slr avail softwar engin research practition studi updat use broad autom search perform find publish time 2008 contrast number qualiti sourc found origin studi addit 35 correspond 33 uniqu studi paper 17 appear relev undergradu educ curriculum 12 possibl interest number increas paper workshop improv use slr guidelin appear gone past stage use sole innov yet consid main stream methodolog address wide rang topic still limit often fail assess primari qualiti,previous study report systematic literature review slr base manual search journal conference undertake period january june aim ongoing research provide annotated catalogue slrs available software engineering researcher practitioner study update broad automate search perform find publish time contrast number quality source find original study additional correspond unique study paper appear relevant undergraduate educational curriculum possible interest number increase paper workshop improve use slr guideline appear go past stage solely innovator consider main stream methodology address wide range topic limitation fail assess primary quality
Search-based software engineering,"In the past five years there has been a dramatic increase in work on Search-Based Software Engineering (SBSE), an approach to (SE) which Optimization (SBO) algorithms are used address problems SE. SBSE applied throughout SE lifecycle, from requirements and project planning maintenance reengineering. The is attractive because it offers suite of adaptive automated semiautomated solutions situations typified by large complex problem spaces with multiple competing conflicting objectives. This article 1 provides review classification literature SBSE. identifies research trends relationships between techniques applications they have highlights gaps avenues for further research.",2012-11-01,https://doi.org/10.1145/2379776.2379787,"Mark Harman, S. Afshin Mansouri, Yuanyuan Zhang",702,In the past five years there has been a dramatic increase in work on SearchBased Software Engineering SBSE an approach to SE which Optimization SBO algorithms are used address problems SE SBSE applied throughout SE lifecycle from requirements and project planning maintenance reengineering The is attractive because it offers suite of adaptive automated semiautomated solutions situations typified by large complex problem spaces with multiple competing conflicting objectives This article 1 provides review classification literature SBSE identifies research trends relationships between techniques applications they have highlights gaps avenues for further research,past five year dramat increas work searchbas softwar engin sbse approach se optim sbo algorithm use address problem se sbse appli throughout se lifecycl requir project plan mainten reengin attract offer suit adapt autom semiautom solut situat typifi larg complex problem space multipl compet conflict object articl 1 provid review classif literatur sbse identifi research trend relationship techniqu applic highlight gap avenu research,past year dramatic increase work searchbase software engineering sbse approach se optimization sbo algorithm address problem se sbse apply se lifecycle requirement project planning maintenance reengineere attractive offer suite adaptive automate semiautomate solution situation typify large complex problem space multiple compete conflict objective article provide review classification literature sbse identify research trend relationship technique application highlight gap avenue research
Experimentation in software engineering,"A framework is presented for analyzing most of the experimental work performed in software engineering over past several years. The experimentation consists four categories corresponding to phases process: definition, planning, operation, and interpretation. variety experiments are described within their contribution discipline discussed. Some recommendations application process included.",1986-07-01,https://doi.org/10.1109/tse.1986.6312975,"Victor R. Basili, Richard W. Selby, David H. Hutchens",570,A framework is presented for analyzing most of the experimental work performed in software engineering over past several years The experimentation consists four categories corresponding to phases process definition planning operation and interpretation variety experiments are described within their contribution discipline discussed Some recommendations application process included,framework present analyz experiment work perform softwar engin past sever year experiment consist four categori correspond phase process definit plan oper interpret varieti experi describ within contribut disciplin discuss recommend applic process includ,framework present analyze experimental work perform software engineering past year experimentation consist category correspond phase process definition planning operation interpretation variety experiment describe contribution discipline discuss recommendation application process include
A Systematic Literature Review on Fault Prediction Performance in Software Engineering,"Background: The accurate prediction of where faults are likely to occur in code can help direct test effort, reduce costs, and improve the quality software. Objective: We investigate how context models, independent variables used, modeling techniques applied influence performance fault models. Method: used a systematic literature review identify 208 studies published from January 2000 December 2010. synthesize quantitative qualitative results 36 which report sufficient contextual methodological information according criteria we develop apply. Results: models that perform well tend be based on simple such as Naive Bayes or Logistic Regression. Combinations have been by well. Feature selection has these combinations when performing particularly Conclusion: methodology build seems influential predictive performance. Although there set confidence is possible, more needed use reliable their context, methodology, comprehensively.",2012-11-01,https://doi.org/10.1109/tse.2011.103,"Tracy Hall, Sarah Beecham, David Bowes, David Gray, Steve Counsell",1043,Background The accurate prediction of where faults are likely to occur in code can help direct test effort reduce costs and improve the quality software Objective We investigate how context models independent variables used modeling techniques applied influence performance fault models Method used a systematic literature review identify 208 studies published from January 2000 December 2010 synthesize quantitative qualitative results 36 which report sufficient contextual methodological information according criteria we develop apply Results models that perform well tend be based on simple such as Naive Bayes or Logistic Regression Combinations have been by well Feature selection has these combinations when performing particularly Conclusion methodology build seems influential predictive performance Although there set confidence is possible more needed use reliable their context methodology comprehensively,background accur predict fault like occur code help direct test effort reduc cost improv qualiti softwar object investig context model independ variabl use model techniqu appli influenc perform fault model method use systemat literatur review identifi 208 studi publish januari 2000 decemb 2010 synthes quantit qualit result 36 report suffici contextu methodolog inform accord criteria develop appli result model perform well tend base simpl naiv bay logist regress combin well featur select combin perform particularli conclus methodolog build seem influenti predict perform although set confid possibl need use reliabl context methodolog comprehens,background accurate prediction fault likely occur code help direct test effort reduce cost improve quality software objective investigate context model independent variable model technique apply influence performance fault model method systematic literature review identify study publish january december synthesize quantitative qualitative result report sufficient contextual methodological information accord criterion develop apply result model perform tend base simple naive baye logistic regression combination feature selection combination perform particularly conclusion methodology build influential predictive performance set confidence possible needed use reliable context methodology comprehensively
Knowledge management in software engineering,"Software organizations' main assets are not plants, buildings, or expensive machines. A software organization's asset is its intellectual capital, as it in sectors such asconsulting, law, investment banking, and advertising. The major problem with capital that has legs walks home every day. At the same rate experience out door, inexperience door. Whether many organizations admit it, they face challenge ofsustaining level of competence needed to win contracts fulfill undertakings.",2002-05-01,https://doi.org/10.1109/ms.2002.1003450,"Ioana Rus, Mikael Lindvall",731,Software organizations main assets are not plants buildings or expensive machines A software organizations asset is its intellectual capital as it in sectors such asconsulting law investment banking and advertising The major problem with capital that has legs walks home every day At the same rate experience out door inexperience door Whether many organizations admit it they face challenge ofsustaining level of competence needed to win contracts fulfill undertakings,softwar organ main asset plant build expens machin softwar organ asset intellectu capit sector asconsult law invest bank advertis major problem capit leg walk home everi day rate experi door inexperi door whether mani organ admit face challeng ofsustain level compet need win contract fulfil undertak,software organization main asset plant building expensive machine software organization asset intellectual capital sector asconsulte law investment banking advertise major problem capital leg walk home day rate experience door inexperience door organization admit face challenge ofsustaining level competence need win contract fulfill undertaking
Principles of software engineering management,"In order to reduce the time and cost of verification, validation accreditation (VV&A), increase probability that design will succeed at one time, traditional product development framework methodology, which is usually described as V framework, extended through double model data based triple framework. The new provides an opportunity converge lifecycle, lifecycle (development) together. paper analyses interoperability proposed implements it in a ship damage control system project.",1990-01-01,https://doi.org/10.1016/s0960-2593(05)80027-8,Tom Gilb,602,In order to reduce the time and cost of verification validation accreditation VVA increase probability that design will succeed at one time traditional product development framework methodology which is usually described as V framework extended through double model data based triple framework The new provides an opportunity converge lifecycle lifecycle development together paper analyses interoperability proposed implements it in a ship damage control system project,order reduc time cost verif valid accredit vva increas probabl design succeed one time tradit product develop framework methodolog usual describ v framework extend doubl model data base tripl framework new provid opportun converg lifecycl lifecycl develop togeth paper analys interoper propos implement ship damag control system project,order reduce time cost verification validation accreditation vva increase probability design succeed time traditional product development framework methodology usually describe v framework extend double model datum base triple framework new provide opportunity converge lifecycle lifecycle development paper analysis interoperability propose implement ship damage control system project
Evidence-based software engineering,"Objective: Our objective is to describe how softwareengineering might benefit from an evidence-basedapproach and identify the potential difficultiesassociated with approach.Method: We compared organisation technicalinfrastructure supporting evidence-based medicine (EBM)with situation in software engineering. consideredthe impact that factors peculiar engineering(i.e. skill factor lifecycle factor) would haveon our ability practice (EBSE).Results: EBSE promises a number of benefits byencouraging integration research results view tosupporting needs many different stakeholdergroups. However, we do not currently have theinfrastructure needed for widespread adoption EBSE.The means engineering experimentsare vulnerable subject experimenter bias. Thelifecycle it difficult determine howtechnologies will behave once deployed.Conclusions: Software fromadopting what can evidence approach providedthat deals specific problems arise thenature",2004-05-23,https://doi.org/10.5555/998675.999432,"Barbara Kitchenham, Tore Dybå, Magne Jørgensen",612,Objective Our objective is to describe how softwareengineering might benefit from an evidencebasedapproach and identify the potential difficultiesassociated with approachMethod We compared organisation technicalinfrastructure supporting evidencebased medicine EBMwith situation in software engineering consideredthe impact that factors peculiar engineeringie skill factor lifecycle factor would haveon our ability practice EBSEResults EBSE promises a number of benefits byencouraging integration research results view tosupporting needs many different stakeholdergroups However we do not currently have theinfrastructure needed for widespread adoption EBSEThe means engineering experimentsare vulnerable subject experimenter bias Thelifecycle it difficult determine howtechnologies will behave once deployedConclusions Software fromadopting what can evidence approach providedthat deals specific problems arise thenature,object object describ softwareengin might benefit evidencebasedapproach identifi potenti difficultiesassoci approachmethod compar organis technicalinfrastructur support evidencebas medicin ebmwith situat softwar engin consideredth impact factor peculiar engineeringi skill factor lifecycl factor would haveon abil practic ebseresult ebs promis number benefit byencourag integr research result view tosupport need mani differ stakeholdergroup howev current theinfrastructur need widespread adopt ebseth mean engin experimentsar vulner subject experiment bia thelifecycl difficult determin howtechnolog behav deployedconclus softwar fromadopt evid approach providedthat deal specif problem aris thenatur,objective objective describe softwareengineering benefit evidencebasedapproach identify potential difficultiesassociate approachmethod compare organisation technicalinfrastructure support evidencebase medicine ebmwith situation software engineering consideredthe impact factor peculiar engineeringie skill factor lifecycle factor haveon ability practice ebseresult ebse promise number benefit byencouraging integration research result view tosupporting need different stakeholdergroup currently theinfrastructure need widespread adoption ebsethe mean engineering experimentsare vulnerable subject experimenter bias thelifecycle difficult determine howtechnologie behave deployedconclusion software fromadopte evidence approach providedthat deal specific problem arise thenature
The “Physics” of Notations: Toward a Scientific Basis for Constructing Visual Notations in Software Engineering,"Visual notations form an integral part of the language software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues visual representation. In evaluating comparing notations, details syntax are rarely discussed. designing majority effort is spent on semantics, with graphical conventions largely afterthought. Typically, no design rationale, scientific otherwise, provided for representation choices. While has developed mature methods it lacks equivalent syntax. This paper defines a set principles cognitively effective notations: ones that optimized human communication problem solving. Together these theory, called Physics Notations as focuses physical (perceptual) properties rather than their logical (semantic) properties. The were synthesized from theory empirical evidence wide range fields rest explicit how communicate. They can be used to evaluate, compare, improve existing well construct new ones. identifies serious flaws in some leading together practical suggestions improving them. It also showcases examples excellence other fields.",2009-11-01,https://doi.org/10.1109/tse.2009.67,Daniel L. Moody,1102,Visual notations form an integral part of the language software engineering SE Yet historically SE researchers and notation designers have ignored or undervalued issues visual representation In evaluating comparing notations details syntax are rarely discussed designing majority effort is spent on semantics with graphical conventions largely afterthought Typically no design rationale scientific otherwise provided for representation choices While has developed mature methods it lacks equivalent syntax This paper defines a set principles cognitively effective notations ones that optimized human communication problem solving Together these theory called Physics Notations as focuses physical perceptual properties rather than their logical semantic properties The were synthesized from theory empirical evidence wide range fields rest explicit how communicate They can be used to evaluate compare improve existing well construct new ones identifies serious flaws in some leading together practical suggestions improving them It also showcases examples excellence other fields,visual notat form integr part languag softwar engin se yet histor se research notat design ignor undervalu issu visual represent evalu compar notat detail syntax rare discuss design major effort spent semant graphic convent larg afterthought typic design rational scientif otherwis provid represent choic develop matur method lack equival syntax paper defin set principl cognit effect notat one optim human commun problem solv togeth theori call physic notat focus physic perceptu properti rather logic semant properti synthes theori empir evid wide rang field rest explicit commun use evalu compar improv exist well construct new one identifi seriou flaw lead togeth practic suggest improv also showcas exampl excel field,visual notation form integral language software engineering se historically se researcher notation designer ignore undervalue issue visual representation evaluate compare notation detail syntax rarely discuss design majority effort spend semantic graphical convention largely afterthought typically design rationale scientific provide representation choice develop mature method lack equivalent syntax paper define set principle cognitively effective notation one optimize human communication problem solve theory call physics notation focus physical perceptual property logical semantic property synthesize theory empirical evidence wide range field rest explicit communicate evaluate compare improve exist construct new one identify flaw lead practical suggestion improve showcase example excellence field
A survey of controlled experiments in software engineering,"The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how experiments in software engineering are conducted and extent which relevant information reported. Among 5,453 scientific articles published 12 leading journals conferences decade from 1993 2002, 103 (1.9 percent) reported individuals or teams performed one more tasks. survey quantitatively characterizes topics their subjects (number subjects, students versus professionals, recruitment, rewards participation), tasks (type task, duration, type size application) environments (location, development tools). Furthermore, on internal external validity addressed replicated. gathered data reflects relevance industrial practice maturity research.",2005-09-01,https://doi.org/10.1109/tse.2005.97,"D.I.K. Sjoeberg, Jo Erskine Hannay, Ole Hansen, Vigdis By Kampenes, Amela Karahasanović, Nils-Kristian Liborg, A.C. Rekdal",670,The classical method for identifying causeeffect relationships is to conduct controlled experiments This paper reports upon the present state of how experiments in software engineering are conducted and extent which relevant information reported Among 5453 scientific articles published 12 leading journals conferences decade from 1993 2002 103 19 percent reported individuals or teams performed one more tasks survey quantitatively characterizes topics their subjects number subjects students versus professionals recruitment rewards participation tasks type task duration type size application environments location development tools Furthermore on internal external validity addressed replicated gathered data reflects relevance industrial practice maturity research,classic method identifi causeeffect relationship conduct control experi paper report upon present state experi softwar engin conduct extent relev inform report among 5453 scientif articl publish 12 lead journal confer decad 1993 2002 103 19 percent report individu team perform one task survey quantit character topic subject number subject student versu profession recruit reward particip task type task durat type size applic environ locat develop tool furthermor intern extern valid address replic gather data reflect relev industri practic matur research,classical method identify causeeffect relationship conduct control experiment paper report present state experiment software engineering conduct extent relevant information report scientific article publish lead journal conference decade percent report individual team perform task survey quantitatively characterize topic subject number subject student versus professional recruitment reward participation task type task duration type size application environment location development tool furthermore internal external validity address replicate gather datum reflect relevance industrial practice maturity research
Software Engineering for Machine Learning: A Case Study,"Recent advances in machine learning have stimulated widespread interest within the Information Technology sector on integrating AI capabilities into software and services. This goal has forced organizations to evolve their development processes. We report a study that we conducted observing teams at Microsoft as they develop AI-based applications. consider nine-stage workflow process informed by prior experiences developing applications (e.g., search NLP) data science tools (e.g. application diagnostics bug reporting). found various united this preexisting, well-evolved, Agile-like engineering processes, providing insights about several essential challenges may face creating large-scale solutions for marketplace. collected some best practices from address these challenges. In addition, identified three aspects of domain make it fundamentally different domains: 1) discovering, managing, versioning needed is much more complex difficult than other types engineering, 2) model customization reuse require very skills are typically teams, 3) components handle distinct modules traditional - models be ""entangled"" ways experience non-monotonic error behavior. believe lessons learned will valuable organizations.",2019-05-01,https://doi.org/10.1109/icse-seip.2019.00042,"Saleema Amershi, Andrew Begel, Christian Bird, Robert DeLine, Harald C. Gall, Ece Kamar, Nachiappan Nagappan, Besmira Nushi, Thomas Zimmermann",699,Recent advances in machine learning have stimulated widespread interest within the Information Technology sector on integrating AI capabilities into software and services This goal has forced organizations to evolve their development processes We report a study that we conducted observing teams at Microsoft as they develop AIbased applications consider ninestage workflow process informed by prior experiences developing applications eg search NLP data science tools eg application diagnostics bug reporting found various united this preexisting wellevolved Agilelike engineering processes providing insights about several essential challenges may face creating largescale solutions for marketplace collected some best practices from address these challenges In addition identified three aspects of domain make it fundamentally different domains 1 discovering managing versioning needed is much more complex difficult than other types engineering 2 model customization reuse require very skills are typically teams 3 components handle distinct modules traditional  models be entangled ways experience nonmonotonic error behavior believe lessons learned will valuable organizations,recent advanc machin learn stimul widespread interest within inform technolog sector integr ai capabl softwar servic goal forc organ evolv develop process report studi conduct observ team microsoft develop aibas applic consid ninestag workflow process inform prior experi develop applic eg search nlp data scienc tool eg applic diagnost bug report found variou unit preexist wellevolv agilelik engin process provid insight sever essenti challeng may face creat largescal solut marketplac collect best practic address challeng addit identifi three aspect domain make fundament differ domain 1 discov manag version need much complex difficult type engin 2 model custom reus requir skill typic team 3 compon handl distinct modul tradit model entangl way experi nonmonoton error behavior believ lesson learn valuabl organ,recent advance machine learning stimulate widespread interest information technology sector integrate ai capability software service goal force organization evolve development process report study conduct observe team microsoft develop aibased application consider ninestage workflow process inform prior experience develop application eg search nlp datum science tool eg application diagnostic bug reporting find unite preexist wellevolve agilelike engineering process provide insight essential challenge face create largescale solution marketplace collect good practice address challenge addition identify aspect domain fundamentally different domain discover manage versioning need complex difficult type engineer model customization reuse require skill typically team component handle distinct module traditional model entangle way experience nonmonotonic error behavior believe lesson learn valuable organization
Software Engineering for Self-Adaptive Systems,"Although the self-adaptability of systems has been studied in a wide range disciplines, from biology to robotics, only recently software engineering community recognized its key role ena",2009-01-01,https://doi.org/10.1007/978-3-642-02161-9,"Betty H. C. Cheng, Rogério de Lemos, Holger Giese, Paola Inverardi, Jeff Magee",625,Although the selfadaptability of systems has been studied in a wide range disciplines from biology to robotics only recently software engineering community recognized its key role ena,although selfadapt system studi wide rang disciplin biolog robot recent softwar engin commun recogn key role ena,selfadaptability system study wide range discipline biology robotic recently software engineering community recognize key role ena
Cleanroom Software Engineering,Software quality can be engineered under statistical control and delivered with better quality. The Cleanroom process gives management an engineering approach to release reliable products.,1987-09-01,https://doi.org/10.1109/ms.1987.231413,"Harlan D. Mills, M. Dyer, Richard C. Linger",440,Software quality can be engineered under statistical control and delivered with better quality The Cleanroom process gives management an engineering approach to release reliable products,softwar qualiti engin statist control deliv better qualiti cleanroom process give manag engin approach releas reliabl product,software quality engineer statistical control deliver well quality cleanroom process give management engineering approach release reliable product
Continuous software engineering: A roadmap and agenda,"Throughout its short history, software development has been characterized by harmful disconnects between important activities such as planning, and implementation. The problem is further exacerbated the episodic infrequent performance of testing, integration releases. Several emerging phenomena reflect attempts to address these problems. For example, Continuous Integration a practice which emerged eliminate discontinuities deployment. In similar vein, recent emphasis on DevOps recognizes that operational deployment needs be continuous one. We argue continuity required business strategy development, BizDev being term we coin for this. These are even more problematic given need reliability resilience in complex data-intensive systems developed today. identify number together label ‘Continuous *’ (i.e. Star) present part an overall roadmap Software engineering. (but not necessarily rapid) engineering delivery pipeline. conclude paper with research agenda.",2015-07-05,https://doi.org/10.1016/j.jss.2015.06.063,"Brian Fitzgerald, Klaas-Jan Stol",570,Throughout its short history software development has been characterized by harmful disconnects between important activities such as planning and implementation The problem is further exacerbated the episodic infrequent performance of testing integration releases Several emerging phenomena reflect attempts to address these problems For example Continuous Integration a practice which emerged eliminate discontinuities deployment In similar vein recent emphasis on DevOps recognizes that operational deployment needs be continuous one We argue continuity required business strategy development BizDev being term we coin for this These are even more problematic given need reliability resilience in complex dataintensive systems developed today identify number together label Continuous  ie Star present part an overall roadmap Software engineering but not necessarily rapid engineering delivery pipeline conclude paper with research agenda,throughout short histori softwar develop character harm disconnect import activ plan implement problem exacerb episod infrequ perform test integr releas sever emerg phenomena reflect attempt address problem exampl continu integr practic emerg elimin discontinu deploy similar vein recent emphasi devop recogn oper deploy need continu one argu continu requir busi strategi develop bizdev term coin even problemat given need reliabl resili complex dataintens system develop today identifi number togeth label continu ie star present part overal roadmap softwar engin necessarili rapid engin deliveri pipelin conclud paper research agenda,short history software development characterize harmful disconnect important activity planning implementation problem exacerbate episodic infrequent performance testing integration release emerge phenomenon reflect attempt address problem example continuous integration practice emerge eliminate discontinuities deployment similar vein recent emphasis devop recognize operational deployment need continuous argue continuity require business strategy development bizdev term coin problematic give need reliability resilience complex dataintensive system develop today identify number label continuous ie star present overall roadmap software engineering necessarily rapid engineering delivery pipeline conclude paper research agenda
Software engineering for security,"Article Free Access Share on Software engineering for security: a roadmap Authors: Premkumar T. Devanbu Department of Computer Science, University California, Davis, CA CAView Profile , Stuart Stubblebine CertCo, 55 Broad Street, Suite 22, New York, NY NYView Authors Info & Claims ICSE '00: Proceedings the Conference The Future EngineeringMay 2000 Pages 227–239https://doi.org/10.1145/336512.336559Online:01 May 2000Publication History 260citation6,488DownloadsMetricsTotal Citations260Total Downloads6,488Last 12 Months123Last 6 weeks12 Get Citation AlertsNew Alert added!This alert has been successfully added and will be sent to:You notified whenever record that you have chosen cited.To manage your preferences, click button below.Manage my Alert!Please log in to account Save BinderSave BinderCreate BinderNameCancelCreateExport CitationPublisher SiteeReaderPDF",2000-05-01,https://doi.org/10.1145/336512.336559,"Prémkumar Dévanbu, Stuart G. Stubblebine",417,Article Free Access Share on Software engineering for security a roadmap Authors Premkumar T Devanbu Department of Computer Science University California Davis CA CAView Profile  Stuart Stubblebine CertCo 55 Broad Street Suite 22 New York NY NYView Authors Info  Claims ICSE 00 Proceedings the Conference The Future EngineeringMay 2000 Pages 227239httpsdoiorg101145336512336559Online01 May 2000Publication History 260citation6488DownloadsMetricsTotal Citations260Total Downloads6488Last 12 Months123Last 6 weeks12 Get Citation AlertsNew Alert addedThis alert has been successfully added and will be sent toYou notified whenever record that you have chosen citedTo manage your preferences click button belowManage my AlertPlease log in to account Save BinderSave BinderCreate BinderNameCancelCreateExport CitationPublisher SiteeReaderPDF,articl free access share softwar engin secur roadmap author premkumar devanbu depart comput scienc univers california davi ca caview profil stuart stubblebin certco 55 broad street suit 22 new york ny nyview author info claim ics 00 proceed confer futur engineeringmay 2000 page 227239httpsdoiorg101145336512336559online01 may 2000public histori 260citation6488downloadsmetricstot citations260tot downloads6488last 12 months123last 6 weeks12 get citat alertsnew alert addedthi alert success ad sent toyou notifi whenev record chosen citedto manag prefer click button belowmanag alertpleas log account save bindersav bindercr bindernamecancelcreateexport citationpublish siteereaderpdf,article free access share software engineering security roadmap author premkumar t devanbu department computer science university california davis caview profile stuart stubblebine certco broad street suite new york ny nyview author info claim icse proceeding conference future engineeringmay page history citation alertsnew alert addedthis alert successfully add send toyou notify record choose citedto manage preference click button belowmanage alertplease log account save bindersave bindercreate bindernamecancelcreateexport citationpublisher siteereaderpdf
Challenges in automotive software engineering,"The amount of software in cars grows exponentially. Driving forces this development are cheaper and more powerful hardware the demand for innovations by new functions. rapid increase based functionality brings various challenges (see [21], [23], [25], [26]) automotive industries, their organization, key competencies, processes, methods, tools, models, product structures, division work, logistics, maintenance, long term strategies. From a engineering perspective, industry is an ideal fascinating application domain advanced techniques. Although may adopt general results solutions from body knowledge gained other domains, specific constraints requirements ask individual bring engineering. In we find literally all interesting problems challenging issues systems",2006-05-28,https://doi.org/10.1145/1134285.1134292,Manfred Broy,511,The amount of software in cars grows exponentially Driving forces this development are cheaper and more powerful hardware the demand for innovations by new functions rapid increase based functionality brings various challenges see 21 23 25 26 automotive industries their organization key competencies processes methods tools models product structures division work logistics maintenance long term strategies From a engineering perspective industry is an ideal fascinating application domain advanced techniques Although may adopt general results solutions from body knowledge gained other domains specific constraints requirements ask individual bring engineering In we find literally all interesting problems challenging issues systems,amount softwar car grow exponenti drive forc develop cheaper power hardwar demand innov new function rapid increas base function bring variou challeng see 21 23 25 26 automot industri organ key compet process method tool model product structur divis work logist mainten long term strategi engin perspect industri ideal fascin applic domain advanc techniqu although may adopt gener result solut bodi knowledg gain domain specif constraint requir ask individu bring engin find liter interest problem challeng issu system,software car grow exponentially drive force development cheap powerful hardware demand innovation new function rapid increase base functionality bring challenge automotive industry organization key competency process method tool model product structure division work logistic maintenance long term strategy engineering perspective industry ideal fascinating application domain advanced technique adopt general result solution body knowledge gain domain specific constraint requirement ask individual bring engineering find literally interesting problem challenge issue system
Value-based software engineering,"Much of current software engineering practice and research is done in a value-neutral setting, which every requirement, use case, object, defect treated as equally important; methods are presented practiced largely logical activities; ""separation concerns"" practiced, the responsibility engineers confined to turning requirements into verified code. In earlier times, when decisions had relatively minor influences on system's cost, schedule, value, approach was reasonably workable. But today increasingly future, has major influence most systems' value; can seriously degrade project outcomes.This paper presents an agenda for discipline Value-Based Software Engineering. It accepts challenge integrating value considerations all existing emerging principles practices, developing overall framework they compatibly reinforce each other. Example elements this include value-based engineering, architecting, design development, verification validation, planning control, risk management, quality people management. seven key that provide candidate foundations engineering: Benefits Realization Analysis; Stakeholder Value Proposition Elicitation Reconciliation; Business Case Continuous Risk Opportunity Management; Concurrent System Engineering; Monitoring Control; Change Opportunity.",2003-03-01,https://doi.org/10.1145/638750.638776,Barry Boehm,502,Much of current software engineering practice and research is done in a valueneutral setting which every requirement use case object defect treated as equally important methods are presented practiced largely logical activities separation concerns practiced the responsibility engineers confined to turning requirements into verified code In earlier times when decisions had relatively minor influences on systems cost schedule value approach was reasonably workable But today increasingly future has major influence most systems value can seriously degrade project outcomesThis paper presents an agenda for discipline ValueBased Software Engineering It accepts challenge integrating value considerations all existing emerging principles practices developing overall framework they compatibly reinforce each other Example elements this include valuebased engineering architecting design development verification validation planning control risk management quality people management seven key that provide candidate foundations engineering Benefits Realization Analysis Stakeholder Value Proposition Elicitation Reconciliation Business Case Continuous Risk Opportunity Management Concurrent System Engineering Monitoring Control Change Opportunity,much current softwar engin practic research done valueneutr set everi requir use case object defect treat equal import method present practic larg logic activ separ concern practic respons engin confin turn requir verifi code earlier time decis rel minor influenc system cost schedul valu approach reason workabl today increasingli futur major influenc system valu serious degrad project outcomesthi paper present agenda disciplin valuebas softwar engin accept challeng integr valu consider exist emerg principl practic develop overal framework compat reinforc exampl element includ valuebas engin architect design develop verif valid plan control risk manag qualiti peopl manag seven key provid candid foundat engin benefit realiz analysi stakehold valu proposit elicit reconcili busi case continu risk opportun manag concurr system engin monitor control chang opportun,current software engineering practice research valueneutral setting requirement use case object defect treat equally important method present practice largely logical activity separation concern practice responsibility engineer confine turn requirement verified code early time decision relatively minor influence system cost schedule value approach reasonably workable today increasingly future major influence system value seriously degrade project outcomesthis paper present agenda discipline valuebase software engineering accept challenge integrate value consideration exist emerge principle practice develop overall framework compatibly reinforce example element include valuebase engineering architecte design development verification validation planning control risk management quality people management seven key provide candidate foundation engineering benefit realization analysis stakeholder value proposition elicitation reconciliation business case continuous risk opportunity management concurrent system engineering monitoring control change opportunity
A systematic review of systematic review process research in software engineering,"Many researchers adopting systematic reviews (SRs) have also published papers discussing problems with the SR methodology and suggestions for improving it. Since guidelines SRs in software engineering (SE) were last updated 2007, we believe it is time to investigate whether need be amended light of recent research. To identify, evaluate synthesize research by concerning their experiences performing proposals process. We undertook a review reporting undertaking and/or techniques that could used improve Studies classified respect stage process they addressed, related education or faced novices proposed use textual analysis tools. identified 68 63 unique studies SE conferences journals between 2005 mid-2012. The most common criticisms take long time, digital libraries are not appropriate broad literature searches assessing quality empirical different types difficult. recommend removing advice structured questions construct search strings including quasi-gold standard based on limited manual assist construction stings evaluation Textual tools likely useful inclusion/exclusion decisions string but require more stringent evaluation. would benefit from manage existing independent validation. Quality assessment using variety methods remains major problem.",2013-12-01,https://doi.org/10.1016/j.infsof.2013.07.010,"Barbara Kitchenham, Pearl Brereton",757,Many researchers adopting systematic reviews SRs have also published papers discussing problems with the SR methodology and suggestions for improving it Since guidelines SRs in software engineering SE were last updated 2007 we believe it is time to investigate whether need be amended light of recent research To identify evaluate synthesize research by concerning their experiences performing proposals process We undertook a review reporting undertaking andor techniques that could used improve Studies classified respect stage process they addressed related education or faced novices proposed use textual analysis tools identified 68 63 unique studies SE conferences journals between 2005 mid2012 The most common criticisms take long time digital libraries are not appropriate broad literature searches assessing quality empirical different types difficult recommend removing advice structured questions construct search strings including quasigold standard based on limited manual assist construction stings evaluation Textual tools likely useful inclusionexclusion decisions string but require more stringent evaluation would benefit from manage existing independent validation Quality assessment using variety methods remains major problem,mani research adopt systemat review sr also publish paper discuss problem sr methodolog suggest improv sinc guidelin sr softwar engin se last updat 2007 believ time investig whether need amend light recent research identifi evalu synthes research concern experi perform propos process undertook review report undertak andor techniqu could use improv studi classifi respect stage process address relat educ face novic propos use textual analysi tool identifi 68 63 uniqu studi se confer journal 2005 mid2012 common critic take long time digit librari appropri broad literatur search assess qualiti empir differ type difficult recommend remov advic structur question construct search string includ quasigold standard base limit manual assist construct sting evalu textual tool like use inclusionexclus decis string requir stringent evalu would benefit manag exist independ valid qualiti assess use varieti method remain major problem,researcher adopt systematic review srs publish paper discuss problem sr methodology suggestion improve guideline srs software engineering se update believe time investigate need amend light recent research identify evaluate synthesize research concern experience perform proposal process undertake review report undertake andor technique improve study classify respect stage process address related education face novice propose use textual analysis tool identify unique study se conference journal common criticism long time digital library appropriate broad literature search assess quality empirical different type difficult recommend remove advice structure question construct search string include quasigold standard base limited manual assist construction sting evaluation textual tool likely useful inclusionexclusion decision string require stringent evaluation benefit manage exist independent validation quality assessment variety method remain major problem
Recommended Steps for Thematic Synthesis in Software Engineering,"Thematic analysis is an approach that often used for identifying, analyzing, and reporting patterns (themes) within data in primary qualitative research. 'Thematic synthesis' draws on the principles of thematic identifies recurring themes or issues from multiple studies, interprets explains these themes, conclusions systematic reviews. This paper conceptualizes synthesis software engineering as a scientific inquiry involving five steps parallel those The process outcome associated with each step are described illustrated examples reviews engineering.",2011-09-01,https://doi.org/10.1109/esem.2011.36,"Daniela S. Cruzes, Tore Dybå",636,Thematic analysis is an approach that often used for identifying analyzing and reporting patterns themes within data in primary qualitative research Thematic synthesis draws on the principles of thematic identifies recurring themes or issues from multiple studies interprets explains these themes conclusions systematic reviews This paper conceptualizes synthesis software engineering as a scientific inquiry involving five steps parallel those The process outcome associated with each step are described illustrated examples reviews engineering,themat analysi approach often use identifi analyz report pattern theme within data primari qualit research themat synthesi draw principl themat identifi recur theme issu multipl studi interpret explain theme conclus systemat review paper conceptu synthesi softwar engin scientif inquiri involv five step parallel process outcom associ step describ illustr exampl review engin,thematic analysis approach identify analyze report pattern theme datum primary qualitative research thematic synthesis draw principle thematic identifie recur theme issue multiple study interpret explain theme conclusion systematic review paper conceptualize synthesis software engineering scientific inquiry involve step parallel process outcome associate step describe illustrate example review engineering
Continuous software engineering: A roadmap and agenda,"Throughout its short history, software development has been characterized by harmful disconnects between important activities such as planning, and implementation. The problem is further exacerbated the episodic infrequent performance of testing, integration releases. Several emerging phenomena reflect attempts to address these problems. For example, Continuous Integration a practice which emerged eliminate discontinuities deployment. In similar vein, recent emphasis on DevOps recognizes that operational deployment needs be continuous one. We argue continuity required business strategy development, BizDev being term we coin for this. These are even more problematic given need reliability resilience in complex data-intensive systems developed today. identify number together label ‘Continuous *’ (i.e. Star) present part an overall roadmap Software engineering. (but not necessarily rapid) engineering delivery pipeline. conclude paper with research agenda.",2017-01-01,https://doi.org/10.1016/j.jss.2015.06.063,"Brian Fitzgerald, Klaas-Jan Stol",563,Throughout its short history software development has been characterized by harmful disconnects between important activities such as planning and implementation The problem is further exacerbated the episodic infrequent performance of testing integration releases Several emerging phenomena reflect attempts to address these problems For example Continuous Integration a practice which emerged eliminate discontinuities deployment In similar vein recent emphasis on DevOps recognizes that operational deployment needs be continuous one We argue continuity required business strategy development BizDev being term we coin for this These are even more problematic given need reliability resilience in complex dataintensive systems developed today identify number together label Continuous  ie Star present part an overall roadmap Software engineering but not necessarily rapid engineering delivery pipeline conclude paper with research agenda,throughout short histori softwar develop character harm disconnect import activ plan implement problem exacerb episod infrequ perform test integr releas sever emerg phenomena reflect attempt address problem exampl continu integr practic emerg elimin discontinu deploy similar vein recent emphasi devop recogn oper deploy need continu one argu continu requir busi strategi develop bizdev term coin even problemat given need reliabl resili complex dataintens system develop today identifi number togeth label continu ie star present part overal roadmap softwar engin necessarili rapid engin deliveri pipelin conclud paper research agenda,short history software development characterize harmful disconnect important activity planning implementation problem exacerbate episodic infrequent performance testing integration release emerge phenomenon reflect attempt address problem example continuous integration practice emerge eliminate discontinuities deployment similar vein recent emphasis devop recognize operational deployment need continuous argue continuity require business strategy development bizdev term coin problematic give need reliability resilience complex dataintensive system develop today identify number label continuous ie star present overall roadmap software engineering necessarily rapid engineering delivery pipeline conclude paper research agenda
Model-Driven Software Engineering in Practice,"This book discusses how model-based approaches can improve the daily practice of software professionals. is known as Model-Driven Software Engineering (MDSE) or, simply,",2012-09-21,https://doi.org/10.2200/s00441ed1v01y201208swe001,"Marco Brambilla, Jordi Cabot, Manuel Wimmer",540,This book discusses how modelbased approaches can improve the daily practice of software professionals is known as ModelDriven Software Engineering MDSE or simply,book discuss modelbas approach improv daili practic softwar profession known modeldriven softwar engin mdse simpli,book discuss modelbase approach improve daily practice software professional know modeldriven software engineering mdse simply
Global Software Engineering: The Future of Socio-technical Coordination,"Globally-distributed projects are rapidly becoming the norm for large software systems, even as it becomes clear that global distribution of a project seriously impairs critical coordination mechanisms. In this paper, I describe desired future development and problems stand in way achieving vision. review research lay out challenges four areas: architecture, eliciting communicating requirements, environments tools, orchestrating development. conclude by noting need systematic understanding what drives to coordinate effective mechanisms bringing about.",2007-05-01,https://doi.org/10.1109/fose.2007.11,James D. Herbsleb,640,Globallydistributed projects are rapidly becoming the norm for large software systems even as it becomes clear that global distribution of a project seriously impairs critical coordination mechanisms In this paper I describe desired future development and problems stand in way achieving vision review research lay out challenges four areas architecture eliciting communicating requirements environments tools orchestrating development conclude by noting need systematic understanding what drives to coordinate effective mechanisms bringing about,globallydistribut project rapidli becom norm larg softwar system even becom clear global distribut project serious impair critic coordin mechan paper describ desir futur develop problem stand way achiev vision review research lay challeng four area architectur elicit commun requir environ tool orchestr develop conclud note need systemat understand drive coordin effect mechan bring,globallydistribute project rapidly norm large software system clear global distribution project seriously impair critical coordination mechanism paper describe desire future development problem stand way achieve vision review research lie challenge area architecture elicit communicating requirement environment tool orchestrate development conclude note need systematic understanding drive coordinate effective mechanism bring
The Current State and Future of Search Based Software Engineering,"This paper describes work on the application of optimization techniques in software engineering. These come from operations research and metaheuristic computation communities. The briefly reviews widely used key ingredients required for their successful to engineering, providing an overview existing results eight engineering domains. also benefits that are likely accrue growing body this area provides a set open problems, challenges areas future work.",2007-05-01,https://doi.org/10.1109/fose.2007.29,Mark Harman,635,This paper describes work on the application of optimization techniques in software engineering These come from operations research and metaheuristic computation communities The briefly reviews widely used key ingredients required for their successful to engineering providing an overview existing results eight engineering domains also benefits that are likely accrue growing body this area provides a set open problems challenges areas future work,paper describ work applic optim techniqu softwar engin come oper research metaheurist comput commun briefli review wide use key ingredi requir success engin provid overview exist result eight engin domain also benefit like accru grow bodi area provid set open problem challeng area futur work,paper describe work application optimization technique software engineering come operation research metaheuristic computation community briefly review widely key ingredient require successful engineering provide overview exist result engineering domain benefit likely accrue grow body area provide set open problem challenge area future work
Software Engineering for Self-Adaptive Systems: A Second Research Roadmap,"The goal of this roadmap paper is to summarize the state-of-the-art and identify research challenges when developing, deploying managing self-adaptive software systems. Instead dealing with a wide range topics associated field, we focus on four essential self-adaptation: design space for solutions, engineering processes systems, from centralized decentralized control, practical run-time verification & validation For each topic, present an overview, suggest future directions, selected challenges. This complements extends previous systems published in 2009 covering different set topics, reflecting part paper. one many results Dagstuhl Seminar 10431 Software Engineering Self-Adaptive Systems, which took place October 2010.",2013-01-01,https://doi.org/10.1007/978-3-642-35813-5_1,"Rogério de Lemos, Holger Giese, Hausi Müller, Mary Shaw, Jesper Andersson, Marin Litoiu, Bradley Schmerl, Gabriel Tamura, Norha M. Villegas, Thomas Vogel, Danny Weyns, Luciano Baresi, Basil Becker, Nelly Bencomo, Yuriy Brun, Bojan Čukić, Ron Desmarais, Schahram Dustdar, Gregor Engels, Kurt Geihs, Karl M. Goeschka, Alessandra Gorla, Vincenzo Grassi, Paola Inverardi, Gábor Karsai, Jeff Kramer, Antónia Lopes, Jeff Magee, Sam Malek, Serge Mankovskii, Raffaela Mirandola, John Mylopoulos, Oscar Nierstrasz, Mauro Pezzè, Christian Prehofer, Wilhelm Schäfer, Rick Schlichting, Dennis B. Smith, João Pedro Sousa, Ladan Tahvildari, Kenny Wong, Jochen Wuttke",676,The goal of this roadmap paper is to summarize the stateoftheart and identify research challenges when developing deploying managing selfadaptive software systems Instead dealing with a wide range topics associated field we focus on four essential selfadaptation design space for solutions engineering processes systems from centralized decentralized control practical runtime verification  validation For each topic present an overview suggest future directions selected challenges This complements extends previous systems published in 2009 covering different set topics reflecting part paper one many results Dagstuhl Seminar 10431 Software Engineering SelfAdaptive Systems which took place October 2010,goal roadmap paper summar stateoftheart identifi research challeng develop deploy manag selfadapt softwar system instead deal wide rang topic associ field focu four essenti selfadapt design space solut engin process system central decentr control practic runtim verif valid topic present overview suggest futur direct select challeng complement extend previou system publish 2009 cover differ set topic reflect part paper one mani result dagstuhl seminar 10431 softwar engin selfadapt system took place octob 2010,goal roadmap paper summarize stateoftheart identify research challenge develop deploy manage selfadaptive software system instead deal wide range topic associate field focus essential selfadaptation design space solution engineering process system centralized decentralized control practical runtime verification validation topic present overview suggest future direction select challenge complement extend previous system publish cover different set topic reflect paper result dagstuhl seminar software engineering selfadaptive system take place october
A practical guide for using statistical tests to assess randomized algorithms in software engineering,"Randomized algorithms have been used to successfully address many different types of software engineering problems. This type employ a degree randomness as part their logic. are useful for difficult problems where precise solution cannot be derived in deterministic way within reasonable time. However, randomized produce results on every run when applied the same problem instance. It is hence important assess effectiveness by collecting data from large enough number runs. The use rigorous statistical tests then essential provide support conclusions analyzing such data. In this paper, we systematic review selected venues 2009. Its goal not perform complete survey but get representative snapshot current practice research. We show that significant percentage papers that, most cases, properly accounted for.",2011-05-21,https://doi.org/10.1145/1985793.1985795,"Andrea Arcuri, Lionel Briand",840,Randomized algorithms have been used to successfully address many different types of software engineering problems This type employ a degree randomness as part their logic are useful for difficult problems where precise solution cannot be derived in deterministic way within reasonable time However randomized produce results on every run when applied the same problem instance It is hence important assess effectiveness by collecting data from large enough number runs The use rigorous statistical tests then essential provide support conclusions analyzing such data In this paper we systematic review selected venues 2009 Its goal not perform complete survey but get representative snapshot current practice research We show that significant percentage papers that most cases properly accounted for,random algorithm use success address mani differ type softwar engin problem type employ degre random part logic use difficult problem precis solut deriv determinist way within reason time howev random produc result everi run appli problem instanc henc import assess effect collect data larg enough number run use rigor statist test essenti provid support conclus analyz data paper systemat review select venu 2009 goal perform complet survey get repres snapshot current practic research show signific percentag paper case properli account,randomize algorithm successfully address different type software engineering problem type employ degree randomness logic useful difficult problem precise solution derive deterministic way reasonable time randomize produce result run apply problem instance important assess effectiveness collect datum large number run use rigorous statistical test essential provide support conclusion analyze datum paper systematic review select venue goal perform complete survey representative snapshot current practice research significant percentage paper case properly account
The state of the art in end-user software engineering,"Most programs today are written not by professional software developers, but people with expertise in other domains working towards goals for which they need computational support. For example, a teacher might write grading spreadsheet to save time grading, or an interaction designer use interface builder test some user design ideas. Although these end-user programmers may have the same as do face many of engineering challenges, including understanding their requirements, well making decisions about design, reuse, integration, testing, and debugging. This article summarizes classifies research on activities, defining area End-User Software Engineering (EUSE) related terminology. The then discusses empirical activities technologies designed support them. also addresses several crosscutting issues EUSE tools, roles risk, reward, domain complexity, self-efficacy tools potential educating users principles.",2011-04-01,https://doi.org/10.1145/1922649.1922658,"Amy J. Ko, Robin Abraham, Laura Beckwith, Alan F. Blackwell, Margaret Burnett, Martin Erwig, Christopher Scaffidi, Joseph Lawrance, Henry Lieberman, Brad A. Myers, Mary Beth Rosson, Gregg Rothermel, Mary Shaw, Juan de Lara",564,Most programs today are written not by professional software developers but people with expertise in other domains working towards goals for which they need computational support For example a teacher might write grading spreadsheet to save time grading or an interaction designer use interface builder test some user design ideas Although these enduser programmers may have the same as do face many of engineering challenges including understanding their requirements well making decisions about design reuse integration testing and debugging This article summarizes classifies research on activities defining area EndUser Software Engineering EUSE related terminology The then discusses empirical activities technologies designed support them also addresses several crosscutting issues EUSE tools roles risk reward domain complexity selfefficacy tools potential educating users principles,program today written profession softwar develop peopl expertis domain work toward goal need comput support exampl teacher might write grade spreadsheet save time grade interact design use interfac builder test user design idea although endus programm may face mani engin challeng includ understand requir well make decis design reus integr test debug articl summar classifi research activ defin area endus softwar engin eus relat terminolog discuss empir activ technolog design support also address sever crosscut issu eus tool role risk reward domain complex selfefficaci tool potenti educ user principl,program today write professional software developer people expertise domain work goal need computational support example teacher write grade spreadsheet save time grade interaction designer use interface builder test user design idea enduser programmer face engineering challenge include understand requirement make decision design reuse integration testing debug article summarize classifie research activity define area enduser software engineering euse relate terminology discuss empirical activity technology design support address crosscut issue euse tool role risk reward domain complexity selfefficacy tool potential educate user principle
The guide to the Software Engineering Body of Knowledge,"Reporting on the SWEBOK project, authors-who represent project's editorial team-discuss three-phase plan to characterize a body of knowledge, vital step toward developing software engineering as profession.",1999-01-01,https://doi.org/10.1109/52.805471,"Pierre Bourque, Robert Dupuis, Alain Abran, James W. Moore, Leonard L. Tripp",454,Reporting on the SWEBOK project authorswho represent projects editorial teamdiscuss threephase plan to characterize a body of knowledge vital step toward developing software engineering as profession,report swebok project authorswho repres project editori teamdiscuss threephas plan character bodi knowledg vital step toward develop softwar engin profess,report swebok project authorswho represent project editorial teamdiscuss threephase plan characterize body knowledge vital step develop software engineering profession
Evidence-Based Software Engineering and Systematic Reviews,"In the decade since idea of adapting evidence-based paradigm for software engineering was first proposed, it has become a major tool empirical engineering. Evidence-Based Software Engineering and Systematic Reviews provides clear introduction to use an model research practice. The book explains roles primary studies (experiments, surveys, case studies) as elements over-arching evidence model, rather than disjointed in spectrum. Supplying readers with understanding best practices, up-to-date guidance on how conduct secondary engineeringreplacing existing 2004 2007 technical reports. is divided into three parts. part discusses nature practices centered systematic review, both general applying second examines different that provide inputs review (usually considered forming study), especially main forms study currently used final practical reviews (the guidelines), drawing together accumulated experiences guide researchers students planning conducting their own studies. includes extensive glossary appendix catalogue may be useful practice teaching.",2015-11-04,https://doi.org/10.1201/b19467,"Barbara Kitchenham, David Budgen, Pearl Brereton",529,In the decade since idea of adapting evidencebased paradigm for software engineering was first proposed it has become a major tool empirical engineering EvidenceBased Software Engineering and Systematic Reviews provides clear introduction to use an model research practice The book explains roles primary studies experiments surveys case studies as elements overarching evidence model rather than disjointed in spectrum Supplying readers with understanding best practices uptodate guidance on how conduct secondary engineeringreplacing existing 2004 2007 technical reports is divided into three parts part discusses nature practices centered systematic review both general applying second examines different that provide inputs review usually considered forming study especially main forms study currently used final practical reviews the guidelines drawing together accumulated experiences guide researchers students planning conducting their own studies includes extensive glossary appendix catalogue may be useful practice teaching,decad sinc idea adapt evidencebas paradigm softwar engin first propos becom major tool empir engin evidencebas softwar engin systemat review provid clear introduct use model research practic book explain role primari studi experi survey case studi element overarch evid model rather disjoint spectrum suppli reader understand best practic uptod guidanc conduct secondari engineeringreplac exist 2004 2007 technic report divid three part part discuss natur practic center systemat review gener appli second examin differ provid input review usual consid form studi especi main form studi current use final practic review guidelin draw togeth accumul experi guid research student plan conduct studi includ extens glossari appendix catalogu may use practic teach,decade idea adapt evidencebased paradigm software engineering propose major tool empirical engineering evidencebase software engineering systematic review provide clear introduction use model research practice book explain role primary study experiment survey case study element overarch evidence model disjoint spectrum supply reader understand good practice uptodate guidance conduct secondary engineeringreplace exist technical report divide part discuss nature practice center systematic review general apply second examine different provide input review usually consider form study especially main form study currently final practical review guideline draw accumulate experience guide researcher student plan conduct study include extensive glossary appendix catalogue useful practice teaching
Performing systematic literature reviews in software engineering,"Context: Making best use of the growing number empirical studies in Software Engineering, for making decisions and formulating research questions, requires ability to construct an objective summary available evidence. Adopting a systematic approach assessing aggregating outcomes from set is also particularly important given that such may employ very different experimental forms be undertaken contexts.Objectives: To provide introduction role, form processes involved performing Systematic Literature Reviews. After tutorial, participants should able read reviews, have gained knowledge needed conduct reviews their own.Method: We will blend information presentation (including some experiences problems can arise Engineering domain), interactive working, using review material prepared advance.",2006-05-28,https://doi.org/10.1145/1134285.1134500,"David Budgen, Pearl Brereton",520,Context Making best use of the growing number empirical studies in Software Engineering for making decisions and formulating research questions requires ability to construct an objective summary available evidence Adopting a systematic approach assessing aggregating outcomes from set is also particularly important given that such may employ very different experimental forms be undertaken contextsObjectives To provide introduction role form processes involved performing Systematic Literature Reviews After tutorial participants should able read reviews have gained knowledge needed conduct reviews their ownMethod We will blend information presentation including some experiences problems can arise Engineering domain interactive working using review material prepared advance,context make best use grow number empir studi softwar engin make decis formul research question requir abil construct object summari avail evid adopt systemat approach assess aggreg outcom set also particularli import given may employ differ experiment form undertaken contextsobject provid introduct role form process involv perform systemat literatur review tutori particip abl read review gain knowledg need conduct review ownmethod blend inform present includ experi problem aris engin domain interact work use review materi prepar advanc,context make good use grow number empirical study software engineering make decision formulate research question require ability construct objective summary available evidence adopt systematic approach assess aggregate outcome set particularly important give employ different experimental form undertake contextsobjective provide introduction role form process involve perform systematic literature review tutorial participant able read review gain knowledge need conduct review ownmethod blend information presentation include experience problem arise engineering domain interactive working review material prepare advance
An open graph visualization system and its applications to software engineering,"Software: Practice and ExperienceVolume 30, Issue 11 p. 1203-1233 Research Article An open graph visualization system its applications to software engineering Emden R. Gansner, Corresponding Author Gansner AT&T Labs–Research, Shannon Laboratory, 180 Park Avenue, Florham Park, NJ 07932, U.S.A.AT&T U.S.A.Search for more papers by this authorStephen C. North, Stephen North author First published: 24 August 2000 https://doi.org/10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-NCitations: 440AboutPDF ToolsRequest permissionExport citationAdd favoritesTrack citation ShareShare Give accessShare full text full-text accessPlease review our Terms Conditions of Use check box below share version article.I have read accept the Wiley Online Library UseShareable LinkUse link a article with your friends colleagues. Learn more.Copy URL Share linkShare onFacebookTwitterLinkedInRedditWechat Abstract We describe package practical tools libraries manipulating graphs their drawings. Our design, which is aimed at facilitating combination components other tools, includes stream event interfaces operations, high-quality static dynamic layout algorithms, ability handle sizeable graphs. conclude description variety tools. Copyright © John & Sons, Ltd. Citing Literature Volume30, Issue11Special Issue: Special Discrete algorithm engineeringSeptember 2000Pages RelatedInformation",2000-01-01,https://doi.org/10.1002/1097-024x(200009)30:11<1203::aid-spe338>3.0.co;2-n,"Emden R. Gansner, Stephen C. North",563,Software Practice and ExperienceVolume 30 Issue 11 p 12031233 Research Article An open graph visualization system its applications to software engineering Emden R Gansner Corresponding Author Gansner ATT LabsResearch Shannon Laboratory 180 Park Avenue Florham Park NJ 07932 USAATT USASearch for more papers by this authorStephen C North Stephen North author First published 24 August 2000 httpsdoiorg1010021097024X200009301130CO2NCitations 440AboutPDF ToolsRequest permissionExport citationAdd favoritesTrack citation ShareShare Give accessShare full text fulltext accessPlease review our Terms Conditions of Use check box below share version articleI have read accept the Wiley Online Library UseShareable LinkUse link a article with your friends colleagues Learn moreCopy URL Share linkShare onFacebookTwitterLinkedInRedditWechat Abstract We describe package practical tools libraries manipulating graphs their drawings Our design which is aimed at facilitating combination components other tools includes stream event interfaces operations highquality static dynamic layout algorithms ability handle sizeable graphs conclude description variety tools Copyright  John  Sons Ltd Citing Literature Volume30 Issue11Special Issue Special Discrete algorithm engineeringSeptember 2000Pages RelatedInformation,softwar practic experiencevolum 30 issu 11 p 12031233 research articl open graph visual system applic softwar engin emden r gansner correspond author gansner att labsresearch shannon laboratori 180 park avenu florham park nj 07932 usaatt usasearch paper authorstephen c north stephen north author first publish 24 august 2000 httpsdoiorg1010021097024x200009301130co2ncit 440aboutpdf toolsrequest permissionexport citationadd favoritestrack citat shareshar give accessshar full text fulltext accesspleas review term condit use check box share version articlei read accept wiley onlin librari useshar linkus link articl friend colleagu learn morecopi url share linkshar onfacebooktwitterlinkedinredditwechat abstract describ packag practic tool librari manipul graph draw design aim facilit combin compon tool includ stream event interfac oper highqual static dynam layout algorithm abil handl sizeabl graph conclud descript varieti tool copyright john son ltd cite literatur volume30 issue11speci issu special discret algorithm engineeringseptemb 2000page relatedinform,software practice experiencevolume issue p research article open graph visualization system application software engineering emden r gansner corresponding author gansner att labsresearch shannon laboratory park avenue florham park nj usaatt usasearch paper authorstephen c north stephen north author publish august toolsrequ permissionexport citationadd favoritestrack citation shareshare accessshare text fulltext accessplease review term condition use check box share version articlei read accept wiley online library useshareable linkuse link article friend colleague learn morecopy url share linkshare onfacebooktwitterlinkedinredditwechat abstract describe package practical tool librarie manipulate graph drawing design aim facilitate combination component tool include stream event interface operation highquality static dynamic layout algorithm ability handle sizeable graph conclude description variety tool copyright john sons ltd cite literature issue special discrete algorithm engineeringseptember relatedinformation
Commonality and variability in software engineering,"The article describes how to perform domain engineering by identifying the commonalities and variabilities within a family of products. Through interesting examples dealing with reuse libraries, design patterns, programming language design, authors suggest systematic scope, commonalities, approach formal analysis. Their SCV analysis has been an integral part FAST (Family-oriented Abstraction, Specification, Translation) technology applied over 25 domains at Lucent Technologies.",1998-01-01,https://doi.org/10.1109/52.730836,"James O. Coplien, Daniel Hoffman, David M. Weiss",373,The article describes how to perform domain engineering by identifying the commonalities and variabilities within a family of products Through interesting examples dealing with reuse libraries design patterns programming language design authors suggest systematic scope commonalities approach formal analysis Their SCV analysis has been an integral part FAST Familyoriented Abstraction Specification Translation technology applied over 25 domains at Lucent Technologies,articl describ perform domain engin identifi common variabl within famili product interest exampl deal reus librari design pattern program languag design author suggest systemat scope common approach formal analysi scv analysi integr part fast familyori abstract specif translat technolog appli 25 domain lucent technolog,article describe perform domain engineering identify commonality variability family product interesting example deal reuse library design pattern programming language design author suggest systematic scope commonality approach formal analysis scv analysis integral fast familyoriente abstraction specification translation technology apply domain lucent technology
A view of 20th and 21st century software engineering,"George Santayana's statement, ""Those who cannot remember the past are condemned to repeat it,"" is only half true. The also includes successful histories. If you haven't been made aware of them, you're often not their successes.In a rapidly expanding field such as software engineering, this happens lot. Extensive studies many projects Standish Reports offer convincing evidence that fail successes.This paper tries identify at least some major experiences were well worth repeating, and not. It underlying phenomena influencing evolution engineering practices have helped author appreciate how our has gotten where it is.A counterpart Santayana-like statement about future might say, ""In an era rapid change, those bleak future."" (Think dinosaurs, think carefully maturity models emphasize repeatability.)This sources change will affect in next couple decades, identifies strategies for assessing adapting these change. makes first steps towards distinguishing relatively timeless principles risky repeat, conditions under which aging become increasingly repeat.",2006-05-28,https://doi.org/10.1145/1134285.1134288,Barry Boehm,495,George Santayanas statement Those who cannot remember the past are condemned to repeat it is only half true The also includes successful histories If you havent been made aware of them youre often not their successesIn a rapidly expanding field such as software engineering this happens lot Extensive studies many projects Standish Reports offer convincing evidence that fail successesThis paper tries identify at least some major experiences were well worth repeating and not It underlying phenomena influencing evolution engineering practices have helped author appreciate how our has gotten where it isA counterpart Santayanalike statement about future might say In an era rapid change those bleak future Think dinosaurs think carefully maturity models emphasize repeatabilityThis sources change will affect in next couple decades identifies strategies for assessing adapting these change makes first steps towards distinguishing relatively timeless principles risky repeat conditions under which aging become increasingly repeat,georg santayana statement rememb past condemn repeat half true also includ success histori havent made awar your often successesin rapidli expand field softwar engin happen lot extens studi mani project standish report offer convinc evid fail successesthi paper tri identifi least major experi well worth repeat underli phenomena influenc evolut engin practic help author appreci gotten isa counterpart santayanalik statement futur might say era rapid chang bleak futur think dinosaur think care matur model emphas repeatabilitythi sourc chang affect next coupl decad identifi strategi assess adapt chang make first step toward distinguish rel timeless principl riski repeat condit age becom increasingli repeat,george santayanas statement remember past condemn repeat half true include successful history not aware successesin rapidly expand field software engineering happen lot extensive study project standish report offer convincing evidence fail successesthis paper try identify major experience worth repeat underlie phenomenon influence evolution engineering practice help author appreciate get isa counterpart santayanalike statement future era rapid change bleak future think dinosaur think carefully maturity model emphasize repeatabilitythis source change affect couple decade identify strategy assess adapt change make step distinguish relatively timeless principle risky repeat condition age increasingly repeat
