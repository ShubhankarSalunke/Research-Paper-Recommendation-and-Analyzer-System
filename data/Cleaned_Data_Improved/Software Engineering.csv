Title,Abstract,Publication Date,Journal,Link,Authors,Citations,Cleaned_Abstract,Abstract_Spacy
Guidelines for conducting systematic mapping studies in software engineering An update,"Systematic mapping studies are used to structure a research area, while systematic reviews focused on gathering and synthesizing evidence. The most recent guidelines for from 2008. Since that time, many suggestions have been made of how improve literature (SLRs). There is need evaluate researchers conduct the process identify should be updated based lessons learned existing maps SLR guidelines. To conducted (including search, study selection, analysis presentation data, etc.); improvement potentials in conducting updating accordingly. We maps, considering some practices review as well (in particular relation defining search quality assessment). In large number multiple combined, which leads different ways studies. reason combining was they differed recommendations given. frequently followed not sufficient alone. Hence, there provide an update New proposed consolidating findings.",08-04-2015,Information and Software Technology,https://doi.org/10.1016/j.infsof.2015.03.007,"Kai Petersen, Sairam Vakkalanka, Ludwik Kuźniarz",1918,Systematic mapping studies are used to structure a research area while systematic reviews focused on gathering and synthesizing evidence The most recent guidelines for from 2008 Since that time many suggestions have been made of how improve literature SLRs There is need evaluate researchers conduct the process identify should be updated based lessons learned existing maps SLR guidelines To conducted including search study selection analysis presentation data etc improvement potentials in conducting updating accordingly We maps considering some practices review as well in particular relation defining search quality assessment In large number multiple combined which leads different ways studies reason combining was they differed recommendations given frequently followed not sufficient alone Hence there provide an update New proposed consolidating findings,systematic mapping study structure research area systematic review focus gather synthesize evidence recent guideline time suggestion improve literature slrs need evaluate researcher conduct process identify update base lesson learn exist map slr guideline conduct include search study selection analysis presentation datum etc improvement potential conduct update accordingly map consider practice review particular relation define search quality assessment large number multiple combine lead different way study reason combine differ recommendation give frequently follow sufficient provide update new propose consolidating finding
Software Engineering for Machine Learning A Case Study,"Recent advances in machine learning have stimulated widespread interest within the Information Technology sector on integrating AI capabilities into software and services. This goal has forced organizations to evolve their development processes. We report a study that we conducted observing teams at Microsoft as they develop AI-based applications. consider nine-stage workflow process informed by prior experiences developing applications (e.g., search NLP) data science tools (e.g. application diagnostics bug reporting). found various united this preexisting, well-evolved, Agile-like engineering processes, providing insights about several essential challenges may face creating large-scale solutions for marketplace. collected some best practices from address these challenges. In addition, identified three aspects of domain make it fundamentally different domains: 1) discovering, managing, versioning needed is much more complex difficult than other types engineering, 2) model customization reuse require very skills are typically teams, 3) components handle distinct modules traditional - models be ""entangled"" ways experience non-monotonic error behavior. believe lessons learned will valuable organizations.",01-05-2019,2019 IEEEACM 41st International Conference on Software Engineering Software Engineering in Practice ICSESEIP,https://doi.org/10.1109/icse-seip.2019.00042,"Saleema Amershi, Andrew Begel, Christian Bird, Robert DeLine, Harald C. Gall, Ece Kamar, Nachiappan Nagappan, Besmira Nushi, Thomas Zimmermann",699,Recent advances in machine learning have stimulated widespread interest within the Information Technology sector on integrating AI capabilities into software and services This goal has forced organizations to evolve their development processes We report a study that we conducted observing teams at Microsoft as they develop AIbased applications consider ninestage workflow process informed by prior experiences developing applications eg search NLP data science tools eg application diagnostics bug reporting found various united this preexisting wellevolved Agilelike engineering processes providing insights about several essential challenges may face creating largescale solutions for marketplace collected some best practices from address these challenges In addition identified three aspects of domain make it fundamentally different domains 1 discovering managing versioning needed is much more complex difficult than other types engineering 2 model customization reuse require very skills are typically teams 3 components handle distinct modules traditional  models be entangled ways experience nonmonotonic error behavior believe lessons learned will valuable organizations,recent advance machine learning stimulate widespread interest information technology sector integrate ai capability software service goal force organization evolve development process report study conduct observe team microsoft develop aibased application consider ninestage workflow process inform prior experience develop application eg search nlp datum science tool eg application diagnostic bug reporting find unite preexist wellevolve agilelike engineering process provide insight essential challenge face create largescale solution marketplace collect good practice address challenge addition identify aspect domain fundamentally different domain discover manage versioning need complex difficult type engineer model customization reuse require skill typically team component handle distinct module traditional model entangle way experience nonmonotonic error behavior believe lesson learn valuable organization
Continuous software engineering A roadmap and agenda,"Throughout its short history, software development has been characterized by harmful disconnects between important activities such as planning, and implementation. The problem is further exacerbated the episodic infrequent performance of testing, integration releases. Several emerging phenomena reflect attempts to address these problems. For example, Continuous Integration a practice which emerged eliminate discontinuities deployment. In similar vein, recent emphasis on DevOps recognizes that operational deployment needs be continuous one. We argue continuity required business strategy development, BizDev being term we coin for this. These are even more problematic given need reliability resilience in complex data-intensive systems developed today. identify number together label ‘Continuous *’ (i.e. Star) present part an overall roadmap Software engineering. (but not necessarily rapid) engineering delivery pipeline. conclude paper with research agenda.",05-07-2015,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2015.06.063,"Brian Fitzgerald, Klaas-Jan Stol",570,Throughout its short history software development has been characterized by harmful disconnects between important activities such as planning and implementation The problem is further exacerbated the episodic infrequent performance of testing integration releases Several emerging phenomena reflect attempts to address these problems For example Continuous Integration a practice which emerged eliminate discontinuities deployment In similar vein recent emphasis on DevOps recognizes that operational deployment needs be continuous one We argue continuity required business strategy development BizDev being term we coin for this These are even more problematic given need reliability resilience in complex dataintensive systems developed today identify number together label Continuous  ie Star present part an overall roadmap Software engineering but not necessarily rapid engineering delivery pipeline conclude paper with research agenda,short history software development characterize harmful disconnect important activity planning implementation problem exacerbate episodic infrequent performance testing integration release emerge phenomenon reflect attempt address problem example continuous integration practice emerge eliminate discontinuities deployment similar vein recent emphasis devop recognize operational deployment need continuous argue continuity require business strategy development bizdev term coin problematic give need reliability resilience complex dataintensive system develop today identify number label continuous ie star present overall roadmap software engineering necessarily rapid engineering delivery pipeline conclude paper research agenda
Continuous software engineering A roadmap and agenda,"Throughout its short history, software development has been characterized by harmful disconnects between important activities such as planning, and implementation. The problem is further exacerbated the episodic infrequent performance of testing, integration releases. Several emerging phenomena reflect attempts to address these problems. For example, Continuous Integration a practice which emerged eliminate discontinuities deployment. In similar vein, recent emphasis on DevOps recognizes that operational deployment needs be continuous one. We argue continuity required business strategy development, BizDev being term we coin for this. These are even more problematic given need reliability resilience in complex data-intensive systems developed today. identify number together label ‘Continuous *’ (i.e. Star) present part an overall roadmap Software engineering. (but not necessarily rapid) engineering delivery pipeline. conclude paper with research agenda.",01-01-2017,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2015.06.063,"Brian Fitzgerald, Klaas-Jan Stol",563,Throughout its short history software development has been characterized by harmful disconnects between important activities such as planning and implementation The problem is further exacerbated the episodic infrequent performance of testing integration releases Several emerging phenomena reflect attempts to address these problems For example Continuous Integration a practice which emerged eliminate discontinuities deployment In similar vein recent emphasis on DevOps recognizes that operational deployment needs be continuous one We argue continuity required business strategy development BizDev being term we coin for this These are even more problematic given need reliability resilience in complex dataintensive systems developed today identify number together label Continuous  ie Star present part an overall roadmap Software engineering but not necessarily rapid engineering delivery pipeline conclude paper with research agenda,short history software development characterize harmful disconnect important activity planning implementation problem exacerbate episodic infrequent performance testing integration release emerge phenomenon reflect attempt address problem example continuous integration practice emerge eliminate discontinuities deployment similar vein recent emphasis devop recognize operational deployment need continuous argue continuity require business strategy development bizdev term coin problematic give need reliability resilience complex dataintensive system develop today identify number label continuous ie star present overall roadmap software engineering necessarily rapid engineering delivery pipeline conclude paper research agenda
Grounded theory in software engineering research,"Grounded Theory (GT) has proved an extremely useful research approach in several fields including medical sociology, nursing, education and management theory. However, GT is a complex method based on inductive paradigm that fundamentally different from the traditional hypothetico-deductive model. As there are at least three variants of GT, some ostensibly suffers slurring, where researchers adopt arbitrary subset practices not recognizable as GT. In this paper, we describe identify core set practices. We then analyze use grounded theory software engineering. carefully systematically selected 98 articles mention which 52 explicitly claim to with other 46 using techniques only. Only 16 provide detailed accounts their procedures. offer guidelines improve quality both conducting reporting studies. The latter important extension since current engineering do cover process, despite good being necessary for evaluating study informing subsequent research.",13-05-2016,Proceedings of the 38th International Conference on Software Engineering,https://doi.org/10.1145/2884781.2884833,"Klaas-Jan Stol, Paul Ralph, Brian Fitzgerald",388,Grounded Theory GT has proved an extremely useful research approach in several fields including medical sociology nursing education and management theory However GT is a complex method based on inductive paradigm that fundamentally different from the traditional hypotheticodeductive model As there are at least three variants of GT some ostensibly suffers slurring where researchers adopt arbitrary subset practices not recognizable as GT In this paper we describe identify core set practices We then analyze use grounded theory software engineering carefully systematically selected 98 articles mention which 52 explicitly claim to with other 46 using techniques only Only 16 provide detailed accounts their procedures offer guidelines improve quality both conducting reporting studies The latter important extension since current engineering do cover process despite good being necessary for evaluating study informing subsequent research,ground theory gt prove extremely useful research approach field include medical sociology nursing education management theory gt complex method base inductive paradigm fundamentally different traditional hypotheticodeductive model variant gt ostensibly suffer slur researcher adopt arbitrary subset practice recognizable gt paper describe identify core set practice analyze use ground theory software engineering carefully systematically select article mention explicitly claim technique provide detailed account procedure offer guideline improve quality conduct report study important extension current engineering cover process despite good necessary evaluate study inform subsequent research
A Survey of App Store Analysis for Software Engineering,"App Store Analysis studies information about applications obtained from app stores. stores provide a wealth of derived users that would not exist had the been distributed via previous software deployment methods. combines this non-technical with technical to learn trends and behaviours within these forms repositories. Findings have direct actionable impact on teams develop for stores, led techniques requirements engineering, release planning, design, security testing. This survey describes compares areas research explored thus far, drawing out common aspects, directions future should take address open problems challenges.",02-12-2016,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2016.2630689,"William H. Martin, Federica Sarro, Yue Jia, Yuanyuan Zhang, Mark Harman",409,App Store Analysis studies information about applications obtained from app stores stores provide a wealth of derived users that would not exist had the been distributed via previous software deployment methods combines this nontechnical with technical to learn trends and behaviours within these forms repositories Findings have direct actionable impact on teams develop for stores led techniques requirements engineering release planning design security testing This survey describes compares areas research explored thus far drawing out common aspects directions future should take address open problems challenges,app store analysis study information application obtain app store store provide wealth derive user exist distribute previous software deployment method combine nontechnical technical learn trend behaviour form repository finding direct actionable impact team develop store lead technique requirement engineering release planning design security testing survey describe compare area research explore far draw common aspect direction future address open problem challenge
A survey of the use of crowdsourcing in software engineering,"The term 'crowdsourcing' was initially introduced in 2006 to describe an emerging distributed problem-solving model by online workers. Since then it has been widely studied and practiced support software engineering. In this paper we provide a comprehensive survey of the use crowdsourcing engineering, seeking cover all literature on topic. We first review definitions derive our definition Crowdsourcing Software Engineering together with its taxonomy. Then summarise industrial practice engineering corresponding case studies. further analyse domains, tasks applications for platforms stakeholders involved realising Crowdsourced solutions. conclude exposing trends, open issues opportunities future research Engineering.",20-09-2016,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2016.09.015,"Ke Mao, Licia Capra, Mark Harman, Yue Jia",362,The term crowdsourcing was initially introduced in 2006 to describe an emerging distributed problemsolving model by online workers Since then it has been widely studied and practiced support software engineering In this paper we provide a comprehensive survey of the use crowdsourcing engineering seeking cover all literature on topic We first review definitions derive our definition Crowdsourcing Software Engineering together with its taxonomy Then summarise industrial practice engineering corresponding case studies further analyse domains tasks applications for platforms stakeholders involved realising Crowdsourced solutions conclude exposing trends open issues opportunities future research Engineering,term crowdsourcing initially introduce describe emerge distribute problemsolving model online worker widely study practice support software engineering paper provide comprehensive survey use crowdsource engineering seek cover literature topic review definition derive definition crowdsource software engineering taxonomy summarise industrial practice engineering correspond case study analyse domain task application platform stakeholder involve realise crowdsourced solution conclude expose trend open issue opportunity future research engineering
A Survey of App Store Analysis for Software Engineering,"App Store Analysis studies information about applications obtained from app stores. stores provide a wealth of derived users that would not exist had the been distributed via previous software deployment methods. combines this non-technical with technical to learn trends and behaviours within these forms repositories. Findings have direct actionable impact on teams develop for stores, led techniques requirements engineering, release planning, design, security testing. This survey describes compares areas research explored thus far, drawing out common aspects, directions future should take address open problems challenges.",01-09-2017,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2016.2630689,"William H. Martin, Federica Sarro, Yue Jia, Yuanyuan Zhang, Mark Harman",404,App Store Analysis studies information about applications obtained from app stores stores provide a wealth of derived users that would not exist had the been distributed via previous software deployment methods combines this nontechnical with technical to learn trends and behaviours within these forms repositories Findings have direct actionable impact on teams develop for stores led techniques requirements engineering release planning design security testing This survey describes compares areas research explored thus far drawing out common aspects directions future should take address open problems challenges,app store analysis study information application obtain app store store provide wealth derive user exist distribute previous software deployment method combine nontechnical technical learn trend behaviour form repository finding direct actionable impact team develop store lead technique requirement engineering release planning design security testing survey describe compare area research explore far draw common aspect direction future address open problem challenge
A survey of the use of crowdsourcing in software engineering,"The term 'crowdsourcing' was initially introduced in 2006 to describe an emerging distributed problem-solving model by online workers. Since then it has been widely studied and practiced support software engineering. In this paper we provide a comprehensive survey of the use crowdsourcing engineering, seeking cover all literature on topic. We first review definitions derive our definition Crowdsourcing Software Engineering together with its taxonomy. Then summarise industrial practice engineering corresponding case studies. further analyse domains, tasks applications for platforms stakeholders involved realising Crowdsourced solutions. conclude exposing trends, open issues opportunities future research Engineering.",01-04-2017,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2016.09.015,"Ke Mao, Licia Capra, Mark Harman, Yue Jia",360,The term crowdsourcing was initially introduced in 2006 to describe an emerging distributed problemsolving model by online workers Since then it has been widely studied and practiced support software engineering In this paper we provide a comprehensive survey of the use crowdsourcing engineering seeking cover all literature on topic We first review definitions derive our definition Crowdsourcing Software Engineering together with its taxonomy Then summarise industrial practice engineering corresponding case studies further analyse domains tasks applications for platforms stakeholders involved realising Crowdsourced solutions conclude exposing trends open issues opportunities future research Engineering,term crowdsourcing initially introduce describe emerge distribute problemsolving model online worker widely study practice support software engineering paper provide comprehensive survey use crowdsource engineering seek cover literature topic review definition derive definition crowdsource software engineering taxonomy summarise industrial practice engineering correspond case study analyse domain task application platform stakeholder involve realise crowdsourced solution conclude expose trend open issue opportunity future research engineering
Gamification in software engineering  A systematic mapping,"Gamification seeks for improvement of the user’s engagement, motivation, and performance when carrying out a certain task, by means incorporating game mechanics elements, thus making that task more attractive. Much research work has studied application gamification in software engineering increasing engagement results developers. The objective this paper is to carry systematic mapping field an attempt characterize state art identifying gaps opportunities further research. We carried with view finding primary studies existing literature, which were later classified analyzed according four criteria: process area addressed, elements used, type method followed, forum they published. A subjective evaluation was also evaluate them terms methodology, empirical evidence, integration organization, replicability. As result we found 29 studies, published between January 2011 June 2014. Most focus on development, lesser extent, requirements, project management, other support areas. In main, consider very simple such as points badges, few provide evidence impact gamification. Existing quite preliminary, effort analyzing SE would be needed. Future should look at addition basic ones tackle areas have not been fully studied, maintenance, or testing. share lack methodological make their proposals replicable settings. organization’s tools important challenge needs taken up field.",01-01-2015,Information and Software Technology,https://doi.org/10.1016/j.infsof.2014.08.007,"Óscar Pedreira, Félix García, Nieves R. Brisaboa, Mario Piattini",328,Gamification seeks for improvement of the users engagement motivation and performance when carrying out a certain task by means incorporating game mechanics elements thus making that task more attractive Much research work has studied application gamification in software engineering increasing engagement results developers The objective this paper is to carry systematic mapping field an attempt characterize state art identifying gaps opportunities further research We carried with view finding primary studies existing literature which were later classified analyzed according four criteria process area addressed elements used type method followed forum they published A subjective evaluation was also evaluate them terms methodology empirical evidence integration organization replicability As result we found 29 studies published between January 2011 June 2014 Most focus on development lesser extent requirements project management other support areas In main consider very simple such as points badges few provide evidence impact gamification Existing quite preliminary effort analyzing SE would be needed Future should look at addition basic ones tackle areas have not been fully studied maintenance or testing share lack methodological make their proposals replicable settings organizations tools important challenge needs taken up field,gamification seek improvement user engagement motivation performance carry certain task mean incorporate game mechanic element make task attractive research work study application gamification software engineering increase engagement result developer objective paper carry systematic mapping field attempt characterize state art identify gap opportunity research carry view find primary study exist literature later classify analyze accord criterion process area address element type method follow forum publish subjective evaluation evaluate term methodology empirical evidence integration organization replicability result find study publish january june focus development less extent requirement project management support area main consider simple point badge provide evidence impact gamification exist preliminary effort analyze se need future look addition basic one tackle area fully study maintenance testing share lack methodological proposal replicable setting organization tool important challenge need take field
Guidelines for including grey literature and conducting multivocal literature reviews in software engineering,"A Multivocal Literature Review (MLR) is a form of Systematic (SLR) which includes the grey literature (e.g., blog posts, videos and white papers) in addition to published (formal) journal conference papers). MLRs are useful for both researchers practitioners since they provide summaries state-of-the art –practice given area. popular other fields have recently started appear software engineering (SE). As more MLR studies conducted reported, it important set guidelines ensure high quality processes their results. There several conduct SLR SE. However, phases differ from those traditional SLRs, instance with respect search process source assessment. Therefore, only partially conducting studies. Our goal this paper present on how To develop guidelines, we benefit inputs: (1) existing SE, (2), survey experience papers fields, (3) our own experiences We took Kitchenham Charters as baseline extended/adopted them All derived discussed context an already-published SE running example. The resulting cover all reporting planning phase, over review final review. In particular, believe that incorporating adopting vast experience-based recommendations enabled us propose solid foundations. Having been developed basis types evidence, provided will support effectively efficiently new any area authors recommend utilize these then share lessons learned experiences.",20-09-2018,Information and Software Technology,https://doi.org/10.1016/j.infsof.2018.09.006,"Vahid Garousi, Michael Felderer, Mika Mäntylä",496,A Multivocal Literature Review MLR is a form of Systematic SLR which includes the grey literature eg blog posts videos and white papers in addition to published formal journal conference papers MLRs are useful for both researchers practitioners since they provide summaries stateofthe art practice given area popular other fields have recently started appear software engineering SE As more MLR studies conducted reported it important set guidelines ensure high quality processes their results There several conduct SLR SE However phases differ from those traditional SLRs instance with respect search process source assessment Therefore only partially conducting studies Our goal this paper present on how To develop guidelines we benefit inputs 1 existing SE 2 survey experience papers fields 3 our own experiences We took Kitchenham Charters as baseline extendedadopted them All derived discussed context an alreadypublished SE running example The resulting cover all reporting planning phase over review final review In particular believe that incorporating adopting vast experiencebased recommendations enabled us propose solid foundations Having been developed basis types evidence provided will support effectively efficiently new any area authors recommend utilize these then share lessons learned experiences,multivocal literature review mlr form systematic slr include grey literature eg blog post video white paper addition publish formal journal conference paper mlrs useful researcher practitioner provide summary stateofthe art practice give area popular field recently start appear software engineering se mlr study conduct report important set guideline ensure high quality process result conduct slr se phase differ traditional slrs instance respect search process source assessment partially conduct study goal paper present develop guideline benefit input exist se survey experience paper field experience take kitchenham charter baseline extendedadopte derive discuss context alreadypublishe se run example result cover reporting planning phase review final review particular believe incorporate adopt vast experiencebase recommendation enable propose solid foundation having develop basis type evidence provide support effectively efficiently new area author recommend utilize share lesson learn experience
ModelDriven Software Engineering in Practice,"This book discusses how model-based approaches can improve the daily practice of software professionals. is known as Model-Driven Software Engineering (MDSE) or, simply,",01-01-2017,Synthesis Lectures on Software Engineering,https://doi.org/10.1007/978-3-031-02549-5,"Marco Brambilla, Jordi Cabot, Manuel Wimmer",298,This book discusses how modelbased approaches can improve the daily practice of software professionals is known as ModelDriven Software Engineering MDSE or simply,book discuss modelbase approach improve daily practice software professional know modeldriven software engineering mdse simply
Guidelines for including grey literature and conducting multivocal literature reviews in software engineering,"A Multivocal Literature Review (MLR) is a form of Systematic (SLR) which includes the grey literature (e.g., blog posts, videos and white papers) in addition to published (formal) journal conference papers). MLRs are useful for both researchers practitioners since they provide summaries state-of-the art –practice given area. popular other fields have recently started appear software engineering (SE). As more MLR studies conducted reported, it important set guidelines ensure high quality processes their results. There several conduct SLR SE. However, phases differ from those traditional SLRs, instance with respect search process source assessment. Therefore, only partially conducting studies. Our goal this paper present on how To develop guidelines, we benefit inputs: (1) existing SE, (2), survey experience papers fields, (3) our own experiences We took Kitchenham Charters as baseline extended/adopted them All derived discussed context an already-published SE running example. The resulting cover all reporting planning phase, over review final review. In particular, believe that incorporating adopting vast experience-based recommendations enabled us propose solid foundations. Having been developed basis types evidence, provided will support effectively efficiently new any area authors recommend utilize these then share lessons learned experiences.",01-02-2019,Information and Software Technology,https://doi.org/10.1016/j.infsof.2018.09.006,"Vahid Garousi, Michael Felderer, Mika Mäntylä",484,A Multivocal Literature Review MLR is a form of Systematic SLR which includes the grey literature eg blog posts videos and white papers in addition to published formal journal conference papers MLRs are useful for both researchers practitioners since they provide summaries stateofthe art practice given area popular other fields have recently started appear software engineering SE As more MLR studies conducted reported it important set guidelines ensure high quality processes their results There several conduct SLR SE However phases differ from those traditional SLRs instance with respect search process source assessment Therefore only partially conducting studies Our goal this paper present on how To develop guidelines we benefit inputs 1 existing SE 2 survey experience papers fields 3 our own experiences We took Kitchenham Charters as baseline extendedadopted them All derived discussed context an alreadypublished SE running example The resulting cover all reporting planning phase over review final review In particular believe that incorporating adopting vast experiencebased recommendations enabled us propose solid foundations Having been developed basis types evidence provided will support effectively efficiently new any area authors recommend utilize these then share lessons learned experiences,multivocal literature review mlr form systematic slr include grey literature eg blog post video white paper addition publish formal journal conference paper mlrs useful researcher practitioner provide summary stateofthe art practice give area popular field recently start appear software engineering se mlr study conduct report important set guideline ensure high quality process result conduct slr se phase differ traditional slrs instance respect search process source assessment partially conduct study goal paper present develop guideline benefit input exist se survey experience paper field experience take kitchenham charter baseline extendedadopte derive discuss context alreadypublishe se run example result cover reporting planning phase review final review particular believe incorporate adopt vast experiencebase recommendation enable propose solid foundation having develop basis type evidence provide support effectively efficiently new area author recommend utilize share lesson learn experience
Docker Software engineering,"Later this year, we'll publish an episode in which I interview all the podcast hosts and some of editorial staff.This will give our listeners opportunity to nd out why busy software engineers are volunteering their time podcast.In 217, host Charles Anderson talks with James Turnbull, a developer security specialist who's vice president services at Docker.Lightweight Docker containers rapidly becoming tool for deploying microservice-based architectures, topic we've covered several shows last issue's column.Portions that aren't featured column owing space include networking between containers, how images built, DockerHub repository sharing images, use cases role microservices architecture, Docker's importance DevOps.",01-05-2015,IEEE Software,https://doi.org/10.1109/ms.2015.62,Charles Anderson,234,Later this year well publish an episode in which I interview all the podcast hosts and some of editorial staffThis will give our listeners opportunity to nd out why busy software engineers are volunteering their time podcastIn 217 host Charles Anderson talks with James Turnbull a developer security specialist whos vice president services at DockerLightweight Docker containers rapidly becoming tool for deploying microservicebased architectures topic weve covered several shows last issues columnPortions that arent featured column owing space include networking between containers how images built DockerHub repository sharing images use cases role microservices architecture Dockers importance DevOps,later year publish episode interview podcast host editorial staffthis listener opportunity nd busy software engineer volunteer time podcastin host charles anderson talk james turnbull developer security specialist s vice president service dockerlightweight docker container rapidly tool deploy microservicebase architecture topic ve cover show issue columnportion not feature column owe space include network container image build dockerhub repository sharing image use case role microservice architecture docker importance devop
BlockchainOriented Software Engineering Challenges and New Directions,"In this work, we acknowledge the need for software engineers to devise specialized tools and techniques blockchain-oriented development. Ensuring effective testing activities, enhancing collaboration in large teams, facilitating development of smart contracts all appear as key factors future",01-05-2017,2017 IEEEACM 39th International Conference on Software Engineering Companion ICSEC,https://doi.org/10.1109/icse-c.2017.142,"Simone Porru, Andrea Pinna, Michele Marchesi, Roberto Tonelli",273,In this work we acknowledge the need for software engineers to devise specialized tools and techniques blockchainoriented development Ensuring effective testing activities enhancing collaboration in large teams facilitating development of smart contracts all appear as key factors future,work acknowledge need software engineer devise specialized tool technique blockchainoriente development ensure effective testing activity enhance collaboration large team facilitate development smart contract appear key factor future
Robust Statistical Methods for Empirical Software Engineering,"There have been many changes in statistical theory the past 30 years, including increased evidence that non-robust methods may fail to detect important results. The advice available software engineering researchers needs be updated address these issues. This paper aims both explain new results area of robust analysis and provide a large-scale worked example methods. We summarise analyses Type 1 error efficiency power standard parametric non-parametric tests when applied non-normal data sets. identify are non-normality. present an experiment illustrate their use. use kernel density plots, using four different why necessary rationale for selecting specific analysis. suggest plots rather than box visualise distributions. For analysis, we recommend trimmed means, which can support reliable differences between central location two or more samples. When distribution differs among groups, ordinal scale data, such as Cliff’s δ rank-based ANOVA-like method.",16-06-2016,Empirical Software Engineering,https://doi.org/10.1007/s10664-016-9437-5,"Barbara Kitchenham, Lech Madeyski, David Budgen, Jacky Keung, Pearl Brereton, Stuart Charters, Shirley Gibbs, Amnart Pohthong",212,There have been many changes in statistical theory the past 30 years including increased evidence that nonrobust methods may fail to detect important results The advice available software engineering researchers needs be updated address these issues This paper aims both explain new results area of robust analysis and provide a largescale worked example methods We summarise analyses Type 1 error efficiency power standard parametric nonparametric tests when applied nonnormal data sets identify are nonnormality present an experiment illustrate their use use kernel density plots using four different why necessary rationale for selecting specific analysis suggest plots rather than box visualise distributions For analysis we recommend trimmed means which can support reliable differences between central location two or more samples When distribution differs among groups ordinal scale data such as Cliffs  rankbased ANOVAlike method,change statistical theory past year include increase evidence nonrobust method fail detect important result advice available software engineering researcher need update address issue paper aim explain new result area robust analysis provide largescale work example method summarise analysis type error efficiency power standard parametric nonparametric test apply nonnormal datum set identify nonnormality present experiment illustrate use use kernel density plot different necessary rationale select specific analysis suggest plot box visualise distribution analysis recommend trim mean support reliable difference central location sample distribution differ group ordinal scale datum cliff rankbase anovalike method
The ABC of Software Engineering Research,"A variety of research methods and techniques are available to SE researchers, while several overviews exist, there is consistency neither in the covered nor terminology used. Furthermore, sometimes critically reviewed for characteristics inherent methods. We adopt a taxonomy from social sciences, termed here ABC framework research, which offers holistic view eight archetypal strategies. refers goal that strives generalizability over Actors (A) precise measurement their Behavior (B), realistic Context (C). The uses two dimensions widely considered be key design: level obtrusiveness findings. discuss metaphors each strategy limitations potential strengths. illustrate these strategies domains, global software engineering requirements engineering, apply on sample 75 articles. Finally, we six ways can advance research.",31-07-2018,ACM Transactions on Software Engineering and Methodology,https://doi.org/10.1145/3241743,"Klaas-Jan Stol, Brian Fitzgerald",178,A variety of research methods and techniques are available to SE researchers while several overviews exist there is consistency neither in the covered nor terminology used Furthermore sometimes critically reviewed for characteristics inherent methods We adopt a taxonomy from social sciences termed here ABC framework research which offers holistic view eight archetypal strategies refers goal that strives generalizability over Actors A precise measurement their Behavior B realistic Context C The uses two dimensions widely considered be key design level obtrusiveness findings discuss metaphors each strategy limitations potential strengths illustrate these strategies domains global software engineering requirements engineering apply on sample 75 articles Finally we six ways can advance research,variety research method technique available se researcher overviews exist consistency covered terminology furthermore critically review characteristic inherent method adopt taxonomy social science term abc framework research offer holistic view archetypal strategy refer goal strive generalizability actor precise measurement behavior b realistic context c use dimension widely consider key design level obtrusiveness finding discuss metaphor strategy limitation potential strength illustrate strategy domain global software engineering requirement engineering apply sample article finally way advance research
Sentiment analysis for software engineering,"Sentiment analysis has been applied to various software engineering (SE) tasks, such as evaluating app reviews or analyzing developers' emotions in commit messages. Studies indicate that sentiment tools provide unreliable results when used out-of-the-box, since they are not designed process SE datasets. The silver bullet for a successful application of datasets might be their customization the specific usage context.",27-05-2018,Proceedings of the 40th International Conference on Software Engineering,https://doi.org/10.1145/3180155.3180195,"Bin Lin, Fiorella Zampetti, Gabriele Bavota, Massimiliano Di Penta, Michele Lanza, Rocco Oliveto",163,Sentiment analysis has been applied to various software engineering SE tasks such as evaluating app reviews or analyzing developers emotions in commit messages Studies indicate that sentiment tools provide unreliable results when used outofthebox since they are not designed process SE datasets The silver bullet for a successful application of datasets might be their customization the specific usage context,sentiment analysis apply software engineering se task evaluate app review analyze developer emotion commit message study indicate sentiment tool provide unreliable result outofthebox design process se dataset silver bullet successful application dataset customization specific usage context
From word embeddings to document similarities for improved information retrieval in software engineering,"The application of information retrieval techniques to search tasks in software engineering is made difficult by the lexical gap between queries, usually expressed natural language (e.g. English), and retrieved documents, code programming languages). This often case bug feature location, community question answering, or more generally communication technical personnel non-technical stake holders a project. In this paper, we propose bridging projecting statements snippets as meaning vectors shared representation space. proposed architecture, word embeddings are first trained on API tutorials, reference then aggregated order estimate semantic similarities documents. Empirical evaluations show that learned vector space lead improvements previously explored localization task newly defined linking documents computer questions.",13-05-2016,Proceedings of the 38th International Conference on Software Engineering,https://doi.org/10.1145/2884781.2884862,"Xin Ye, Hui Shen, Xiao Ma, Răzvan Bunescu, Chang Liu",274,The application of information retrieval techniques to search tasks in software engineering is made difficult by the lexical gap between queries usually expressed natural language eg English and retrieved documents code programming languages This often case bug feature location community question answering or more generally communication technical personnel nontechnical stake holders a project In this paper we propose bridging projecting statements snippets as meaning vectors shared representation space proposed architecture word embeddings are first trained on API tutorials reference then aggregated order estimate semantic similarities documents Empirical evaluations show that learned vector space lead improvements previously explored localization task newly defined linking documents computer questions,application information retrieval technique search task software engineering difficult lexical gap query usually express natural language eg english retrieve document code programming language case bug feature location community question answer generally communication technical personnel nontechnical stake holder project paper propose bridge project statement snippet mean vector share representation space propose architecture word embedding train api tutorial reference aggregate order estimate semantic similarity document empirical evaluation learn vector space lead improvement previously explore localization task newly define link document computer question
Systems and Software Engineering,"This chapter begins with a brief introduction to systems engineering in Sect. 6.1, which describes as an interdisciplinary field of primarily focused on how successfully design, implement, evaluate, and manage complex engineered over their life cycles. It also introduces the International Organization for Standardization (ISO) Electrotechnical Commission (IEC) ISO/IEC 15288:2008 standard. Section 6.2 design challenges cyber-physical (CPS) impact reference requirements definition management using Cradle is tool that integrates entire project cycle into one, massively scalable, integrated, multiuser software product. 6.3 principal concept special focus V-model Agile development methodology. 6.4 different CPS includes standard American National Standards Institute/Institute Electrical Electronics Engineers (ANSI/IEEE) 29148-2011. 6.5 provides maritime area case study focuses tracking monitoring containers at ports ships well transported from sea gate port dry port. 6.6 contains comprehensive questions topics, followed by references suggestions further reading.",01-01-2016,Computer Communications and Networks,https://doi.org/10.1007/978-3-319-25178-3_6,Dietmar P. F. Möller,136,This chapter begins with a brief introduction to systems engineering in Sect 61 which describes as an interdisciplinary field of primarily focused on how successfully design implement evaluate and manage complex engineered over their life cycles It also introduces the International Organization for Standardization ISO Electrotechnical Commission IEC ISOIEC 152882008 standard Section 62 design challenges cyberphysical CPS impact reference requirements definition management using Cradle is tool that integrates entire project cycle into one massively scalable integrated multiuser software product 63 principal concept special focus Vmodel Agile development methodology 64 different CPS includes standard American National Standards InstituteInstitute Electrical Electronics Engineers ANSIIEEE 291482011 65 provides maritime area case study focuses tracking monitoring containers at ports ships well transported from sea gate port dry port 66 contains comprehensive questions topics followed by references suggestions further reading,chapter begin brief introduction system engineering sect describe interdisciplinary field primarily focus successfully design implement evaluate manage complex engineer life cycle introduce international organization standardization iso electrotechnical commission iec isoiec standard section design challenge cyberphysical cp impact reference requirement definition management cradle tool integrate entire project cycle massively scalable integrate multiuser software product principal concept special focus vmodel agile development methodology different cp include standard american national standards instituteinstitute electrical electronic engineer ansiieee provide maritime area case study focus track monitor container port ship transport sea gate port dry port contain comprehensive question topic follow reference suggestion read
Behavioral software engineering A definition and systematic literature review,"Throughout the history of software engineering, human aspects have repeatedly been recognized as important. Even though research that investigates them has growing in past decade, these should be more generally considered. The main objective this study is to clarify area concerned with engineering and create a common platform for future research. In order meet objective, we propose definition behavioral (BSE) present results from systematic literature review based on definition. result indicates there are knowledge gaps earlier focused few concepts, which applied limited number areas. individual studies typically had narrow perspective focusing concepts single unit analysis. Further, rarely conducted collaboration by researchers both social science. Altogether, can help put broader set higher agenda practice.",06-05-2015,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2015.04.084,"Per Lenberg, Robert Feldt, Lars Göran Wallgren",206,Throughout the history of software engineering human aspects have repeatedly been recognized as important Even though research that investigates them has growing in past decade these should be more generally considered The main objective this study is to clarify area concerned with engineering and create a common platform for future research In order meet objective we propose definition behavioral BSE present results from systematic literature review based on definition result indicates there are knowledge gaps earlier focused few concepts which applied limited number areas individual studies typically had narrow perspective focusing concepts single unit analysis Further rarely conducted collaboration by researchers both social science Altogether can help put broader set higher agenda practice,history software engineering human aspect repeatedly recognize important research investigate grow past decade generally consider main objective study clarify area concern engineering create common platform future research order meet objective propose definition behavioral bse present result systematic literature review base definition result indicate knowledge gap early focus concept apply limited number area individual study typically narrow perspective focus concept single unit analysis rarely conduct collaboration researcher social science altogether help broad set high agenda practice
Are Students Representatives of Professionals in Software Engineering Experiments,"Background: Most of the experiments in software engineering (SE) employ students as subjects. This raises concerns about realism results acquired through and adaptability to industry. Aim: We compare professionals understand how well represent experimental subjects SE research. Method: The comparison was made context two test-driven development conducted with an academic setting a organization. measured code quality several tasks implemented by both subject groups checked whether perform similarly terms metrics. Results: Except for minor differences, neither is better than other. Professionals produce larger, yet less complex, methods when they use their traditional approach, whereas apply new approach first time. Conclusion: Given carefully scoped experiment on that professionals, similar performances are observed. Further investigation necessary analyze effects demographics level experience experiments.",01-05-2015,2015 IEEEACM 37th IEEE International Conference on Software Engineering,https://doi.org/10.1109/icse.2015.82,"Iflaah Salman, Ayşe Tosun, Natália Juristo",176,Background Most of the experiments in software engineering SE employ students as subjects This raises concerns about realism results acquired through and adaptability to industry Aim We compare professionals understand how well represent experimental subjects SE research Method The comparison was made context two testdriven development conducted with an academic setting a organization measured code quality several tasks implemented by both subject groups checked whether perform similarly terms metrics Results Except for minor differences neither is better than other Professionals produce larger yet less complex methods when they use their traditional approach whereas apply new approach first time Conclusion Given carefully scoped experiment on that professionals similar performances are observed Further investigation necessary analyze effects demographics level experience experiments,background experiment software engineering se employ student subject raise concern realism result acquire adaptability industry aim compare professional understand represent experimental subject se research method comparison context testdriven development conduct academic set organization measure code quality task implement subject group check perform similarly term metric result minor difference well professional produce large complex method use traditional approach apply new approach time conclusion give carefully scope experiment professional similar performance observe investigation necessary analyze effect demographic level experience experiment
The need for multivocal literature reviews in software engineering,"Systematic Literature Reviews (SLR) may not provide insight into the ""state of practice"" in SE, as they do typically include ""grey"" (non-published) literature. A Multivocal Review (MLR) is a form SLR which includes grey literature addition to published (formal) Only few MLRs have been SE so far. We aim at raising awareness for by addressing two research questions (RQs): (1) What types knowledge are missed when does multivocal field? and (2) we, community, gain we conduct MLRs? To answer these RQs, sample example SLRs identify missing gained due excluding or including find that can give substantial benefits certain areas inclusion brings forward challenges evidence them often experience opinion based. Given conflicting viewpoints, authors planning prepare systematic guidelines performing SE.",01-06-2016,Proceedings of the 20th International Conference on Evaluation and Assessment in Software Engineering,https://doi.org/10.1145/2915970.2916008,"Vahid Garousi, Michael Felderer, Mika Mäntylä",169,Systematic Literature Reviews SLR may not provide insight into the state of practice in SE as they do typically include grey nonpublished literature A Multivocal Review MLR is a form SLR which includes grey literature addition to published formal Only few MLRs have been SE so far We aim at raising awareness for by addressing two research questions RQs 1 What types knowledge are missed when does multivocal field and 2 we community gain we conduct MLRs To answer these RQs sample example SLRs identify missing gained due excluding or including find that can give substantial benefits certain areas inclusion brings forward challenges evidence them often experience opinion based Given conflicting viewpoints authors planning prepare systematic guidelines performing SE,systematic literature review slr provide insight state practice se typically include grey nonpublished literature multivocal review mlr form slr include grey literature addition publish formal mlrs se far aim raise awareness address research question rqs type knowledge miss multivocal field community gain conduct mlrs answer rqs sample example slrs identify miss gain exclude include find substantial benefit certain area inclusion bring forward challenge evidence experience opinion base give conflict viewpoint author plan prepare systematic guideline perform se
Gamification in software engineering education A systematic mapping,"The potential of gamification in education is based on the hypothesis that it supports and motivates students can thus lead to enhanced learning processes outcomes. Gamification software engineering (SE) its infancy. However, as SE educators we are particularly interested understanding how pollinating our field extent which above claim valid context. A systematic literature mapping has underscored difficulty fully corroborating because few empirical data available so far. key trends challenges have been identified. We found purpose applying mostly directly related improving student engagement and, a lesser extent, knowledge, although other targets application best practices socialization. also discussed insightful issues regarding implementation cost gamification, patterns most often used elements, teaching activities addressed. Of identified challenges, should highlight complexity deciding approach follow, lack information for choosing elements need control impact gamification.",29-03-2018,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2018.03.065,"Manal M. Alhammad, Ana M. Moreno",173,The potential of gamification in education is based on the hypothesis that it supports and motivates students can thus lead to enhanced learning processes outcomes Gamification software engineering SE its infancy However as SE educators we are particularly interested understanding how pollinating our field extent which above claim valid context A systematic literature mapping has underscored difficulty fully corroborating because few empirical data available so far key trends challenges have been identified We found purpose applying mostly directly related improving student engagement and a lesser extent knowledge although other targets application best practices socialization also discussed insightful issues regarding implementation cost gamification patterns most often used elements teaching activities addressed Of identified challenges should highlight complexity deciding approach follow lack information for choosing elements need control impact gamification,potential gamification education base hypothesis support motivate student lead enhanced learning process outcomes gamification software engineering se infancy se educator particularly interested understanding pollinate field extent claim valid context systematic literature mapping underscore difficulty fully corroborate empirical datum available far key trend challenge identify find purpose apply directly related improve student engagement less extent knowledge target application good practice socialization discuss insightful issue implementation cost gamification pattern element teach activity address identify challenge highlight complexity decide approach follow lack information choose element need control impact gamification
Are students representatives of professionals in software engineering experiments,"Abstract -- Background: Most of the experiments in software engineering (SE) employ students as subjects. This raises concerns about realism results acquired through and adaptability to industry. Aim: We compare professionals understand how well represent experimental subjects SE research. Method: The comparison was made context two test-driven development conducted with an academic setting a organization. measured code quality several tasks implemented by both subject groups checked whether perform similarly terms metrics. Results: Except for minor differences, neither is better than other. Professionals produce larger, yet less complex, methods when they use their traditional approach, whereas apply new approach first time. Conclusion: Given carefully scoped experiment on that professionals, similar performances are observed. Further investigation necessary analyze effects demographics level experience experiments.",16-05-2015,Failed to retrieve data,https://doi.org/10.5555/2818754.2818836,"Iflaah Salman, Ayşe Tosun, Natália Juristo",168,Abstract  Background Most of the experiments in software engineering SE employ students as subjects This raises concerns about realism results acquired through and adaptability to industry Aim We compare professionals understand how well represent experimental subjects SE research Method The comparison was made context two testdriven development conducted with an academic setting a organization measured code quality several tasks implemented by both subject groups checked whether perform similarly terms metrics Results Except for minor differences neither is better than other Professionals produce larger yet less complex methods when they use their traditional approach whereas apply new approach first time Conclusion Given carefully scoped experiment on that professionals similar performances are observed Further investigation necessary analyze effects demographics level experience experiments,abstract background experiment software engineering se employ student subject raise concern realism result acquire adaptability industry aim compare professional understand represent experimental subject se research method comparison context testdriven development conduct academic set organization measure code quality task implement subject group check perform similarly term metric result minor difference well professional produce large complex method use traditional approach apply new approach time conclusion give carefully scope experiment professional similar performance observe investigation necessary analyze effect demographic level experience experiment
Empirical software engineering experts on the use of students and professionals in experiments,"[Context] Controlled experiments are an important empirical method to generate and validate theories. Many software engineering conducted with students. It is often claimed that the use of students as participants in comes at cost low external validity while using professionals does not. [Objective] We believe a deeper understanding needed on or professionals. aim gain insight about pros cons experiments. [Method] performed unconventional, focus group approach follow-up survey. First, during session ISERN 2014, 65 researchers, including seven authors, argued discussed open mind. Afterwards, we revisited topic elicited experts’ opinions foster discussions. Then derived 14 statements asked attendees excluding provide their level agreement statements. Finally, analyzed researchers’ used findings further discuss [Results] Our survey results showed that, general, respondents disagreed us drawbacks We, contrary, strongly no population (students, professionals, others) can be deemed better than another absolute terms. [Conclusion] Using remains valid simplification reality laboratory contexts. effective way advance theories technologies but, like any other aspect study settings, should carefully considered design, execution, interpretation, reporting experiment. The key understand which developer portion being represented by Thus, proposal for describing experimental put forward.",08-06-2017,Empirical Software Engineering,https://doi.org/10.1007/s10664-017-9523-3,"Davide Falessi, Natália Juristo, Claes Wohlin, Burak Turhan, Jürgen Münch, Andreas Jedlitschka, Markku Oivo",204,Context Controlled experiments are an important empirical method to generate and validate theories Many software engineering conducted with students It is often claimed that the use of students as participants in comes at cost low external validity while using professionals does not Objective We believe a deeper understanding needed on or professionals aim gain insight about pros cons experiments Method performed unconventional focus group approach followup survey First during session ISERN 2014 65 researchers including seven authors argued discussed open mind Afterwards we revisited topic elicited experts opinions foster discussions Then derived 14 statements asked attendees excluding provide their level agreement statements Finally analyzed researchers used findings further discuss Results Our survey results showed that general respondents disagreed us drawbacks We contrary strongly no population students professionals others can be deemed better than another absolute terms Conclusion Using remains valid simplification reality laboratory contexts effective way advance theories technologies but like any other aspect study settings should carefully considered design execution interpretation reporting experiment The key understand which developer portion being represented by Thus proposal for describing experimental put forward,context control experiment important empirical method generate validate theory software engineering conduct student claim use student participant come cost low external validity professional objective believe deep understanding need professional aim gain insight pro con experiment method perform unconventional focus group approach followup survey session isern researcher include seven author argue discuss open mind revisit topic elicit expert opinion foster discussion derive statement ask attendee excluding provide level agreement statement finally analyze researcher finding discuss result survey result show general respondent disagree drawback contrary strongly population student professional deem well absolute term conclusion remain valid simplification reality laboratory context effective way advance theory technology like aspect study setting carefully consider design execution interpretation reporting experiment key understand developer portion represent proposal describe experimental forward
Six strategies for generalizing software engineering theories,"General theories of software engineering must balance between providing full understanding a single case and partial many cases. In this paper we argue that for to be useful in practice, they should give sufficient sufficiently large class cases, without having universal or complete. We provide six strategies developing such the middle range. lab-to-lab strategies, laboratory phenomena are developed generalized other phenomena. This is characteristic strategy basic science. lab-to-field artifacts first operate under idealized conditions, which then scaled up until can uncontrolled field conditions. sciences. case-based generalize about components real-world supposed exhibit less variation than cases as whole. sample-based aggregate behavior samples patterns not visible at level. discuss three examples strategies. Throughout paper, use generalization from illustrate our analysis. The concludes with discussion related work implications empirical research.",01-04-2015,Science of Computer Programming,https://doi.org/10.1016/j.scico.2014.11.013,"Roel Wieringa, Maya Daneva",163,General theories of software engineering must balance between providing full understanding a single case and partial many cases In this paper we argue that for to be useful in practice they should give sufficient sufficiently large class cases without having universal or complete We provide six strategies developing such the middle range labtolab strategies laboratory phenomena are developed generalized other phenomena This is characteristic strategy basic science labtofield artifacts first operate under idealized conditions which then scaled up until can uncontrolled field conditions sciences casebased generalize about components realworld supposed exhibit less variation than cases as whole samplebased aggregate behavior samples patterns not visible at level discuss three examples strategies Throughout paper use generalization from illustrate our analysis The concludes with discussion related work implications empirical research,general theory software engineering balance provide understanding single case partial case paper argue useful practice sufficient sufficiently large class case have universal complete provide strategy develop middle range labtolab strategy laboratory phenomenon develop generalize phenomenon characteristic strategy basic science labtofield artifact operate idealize condition scale uncontrolle field condition sciences casebase generalize component realworld suppose exhibit variation case samplebase aggregate behavior sample pattern visible level discuss example strategy paper use generalization illustrate analysis conclude discussion relate work implication empirical research
Managing Technical Debt in Software Engineering Dagstuhl Seminar 16162,"This report documents the program and outcomes of Dagstuhl Seminar 16162, “Managing Technical Debt in Software Engineering.” We summarize goals format seminar, results from breakout groups, a definition for technical debt, draft conceptual model, research road map that culminated discussions during seminar. The also includes abstracts talks presented at seminar summaries open discussions.",01-01-2016,Failed to retrieve data,https://doi.org/10.4230/dagrep.6.4.110,"Paris Avgeriou, Philippe Kruchten, İpek Özkaya, Carolyn Seaman",190,This report documents the program and outcomes of Dagstuhl Seminar 16162 Managing Technical Debt in Software Engineering We summarize goals format seminar results from breakout groups a definition for technical debt draft conceptual model research road map that culminated discussions during seminar The also includes abstracts talks presented at seminar summaries open discussions,report document program outcome dagstuhl seminar manage technical debt software engineering summarize goal format seminar result breakout group definition technical debt draft conceptual model research road map culminate discussion seminar include abstract talk present seminar summary open discussion
ModelDriven Software Engineering in Practice Second Edition,"This book discusses how model-based approaches can improve the daily practice of software professionals. is known as Model-Driven Software Engineering (MDSE) or, simply,",30-03-2017,Synthesis Lectures on Software Engineering,https://doi.org/10.2200/s00751ed2v01y201701swe004,"Marco Brambilla, Jordi Cabot, Manuel Wimmer",178,This book discusses how modelbased approaches can improve the daily practice of software professionals is known as ModelDriven Software Engineering MDSE or simply,book discuss modelbase approach improve daily practice software professional know modeldriven software engineering mdse simply
Smart contracts vulnerabilities a call for blockchain software engineering,"Smart Contracts have gained tremendous popularity in the past few years, to point that billions of US Dollars are currently exchanged every day through such technology. However, since release Frontier network Ethereum 2015, there been many cases which execution managing Ether coins has led problems or conflicts. Compared traditional Software Engineering, a discipline Contract and Blockchain programming, with standardized best practices can help solve mentioned conflicts, is not yet sufficiently developed. Furthermore, rely on non-standard software life-cycle, according which, for instance, delivered applications hardly be updated bugs resolved by releasing new version software. In this paper we advocate need addressing issues posed smart contract programming other running blockchains.We analyse case study where bug discovered library, perhaps ""unsafe"" allowed an attack Parity, wallet application, causing freezing about 500K Ethers (about 150M USD, November 2017). analyze source code Parity discuss how recognised could mitigate, if adopted adapted, detrimental misbehavior. We also reflect specificity development, makes some existing approaches insufficient, call definition specific Engineering.",20-03-2018,2018 International Workshop on Blockchain Oriented Software Engineering IWBOSE,https://doi.org/10.1109/iwbose.2018.8327567,"Giuseppe Destefanis, Michele Marchesi, Marco Ortu, Roberto Tonelli, Andrea Bracciali, Robert M. Hierons",187,Smart Contracts have gained tremendous popularity in the past few years to point that billions of US Dollars are currently exchanged every day through such technology However since release Frontier network Ethereum 2015 there been many cases which execution managing Ether coins has led problems or conflicts Compared traditional Software Engineering a discipline Contract and Blockchain programming with standardized best practices can help solve mentioned conflicts is not yet sufficiently developed Furthermore rely on nonstandard software lifecycle according which for instance delivered applications hardly be updated bugs resolved by releasing new version software In this paper we advocate need addressing issues posed smart contract programming other running blockchainsWe analyse case study where bug discovered library perhaps unsafe allowed an attack Parity wallet application causing freezing about 500K Ethers about 150M USD November 2017 analyze source code Parity discuss how recognised could mitigate if adopted adapted detrimental misbehavior We also reflect specificity development makes some existing approaches insufficient call definition specific Engineering,smart contract gain tremendous popularity past year point billion dollar currently exchange day technology release frontier network ethereum case execution manage ether coin lead problem conflict compare traditional software engineer discipline contract blockchain programming standardized good practice help solve mention conflict sufficiently develop furthermore rely nonstandard software lifecycle accord instance deliver application hardly update bug resolve release new version software paper advocate need addressing issue pose smart contract program running blockchainswe analyse case study bug discover library unsafe allow attack parity wallet application cause freeze ether m usd november analyze source code parity discuss recognise mitigate adopt adapt detrimental misbehavior reflect specificity development make exist approach insufficient definition specific engineering
Fundamentals of Software Engineering,"The FSEN 2019 proceedings on fundamentals of software engineering span over all aspects formal methods, especially those related to advancing the application methods in industry and promoting their integration with practical techniques.",01-01-2019,Lecture Notes in Computer Science,https://doi.org/10.1007/978-3-030-31517-7,"Hossein Hojjat, Mieke Massink",117,The FSEN 2019 proceedings on fundamentals of software engineering span over all aspects formal methods especially those related to advancing the application methods in industry and promoting their integration with practical techniques,fsen proceeding fundamental software engineering span aspect formal method especially relate advance application method industry promote integration practical technique
A Map of Threats to Validity of Systematic Literature Reviews in Software Engineering,"Context: The assessment of Threats to Validity (TTVs) is critical secure the quality empirical studies in Software Engineering (SE). In recent decade, Systematic Literature Review (SLR) was becoming an increasingly important research method SE. One mechanisms insuring level scientific value findings SLR rigorously assess its validity. Hence, it necessary realize status quo and issues TTVs SLRs Objective: This study aims investigate the-state-of-the-practice published SE, further support SE researchers improve strategies against order increase Method: We conducted a tertiary by reviewing that report TTVs. Results: identified 316 from 2004 first half 2015, which are discussed. associated were also summarized categorized. Conclusion: common related research, such as internal validity reliability, thoroughly discussed most SLRs. threats construct external drew less attention. Moreover, there few tactics being reported cope with various",01-01-2016,2016 23rd AsiaPacific Software Engineering Conference APSEC,https://doi.org/10.1109/apsec.2016.031,"Xin Zhou, Jin Yu-qin, He Zhang, Shanshan Li, Xin Huang",181,Context The assessment of Threats to Validity TTVs is critical secure the quality empirical studies in Software Engineering SE In recent decade Systematic Literature Review SLR was becoming an increasingly important research method SE One mechanisms insuring level scientific value findings SLR rigorously assess its validity Hence it necessary realize status quo and issues TTVs SLRs Objective This study aims investigate thestateofthepractice published SE further support SE researchers improve strategies against order increase Method We conducted a tertiary by reviewing that report TTVs Results identified 316 from 2004 first half 2015 which are discussed associated were also summarized categorized Conclusion common related research such as internal validity reliability thoroughly discussed most SLRs threats construct external drew less attention Moreover there few tactics being reported cope with various,context assessment threat validity ttv critical secure quality empirical study software engineering se recent decade systematic literature review slr increasingly important research method se mechanism insure level scientific value finding slr rigorously assess validity necessary realize status quo issue ttv slrs objective study aim investigate thestateofthepractice publish se support se researcher improve strategy order increase method conduct tertiary review report ttv result identify half discuss associate summarize categorize conclusion common relate research internal validity reliability thoroughly discuss slrs threat construct external draw attention tactic report cope
Crowdsourcing in Software Engineering Models Motivations and Challenges,"Almost surreptitiously, crowdsourcing has entered software engineering practice. In-house development, contracting, and outsourcing still dominate, but many development projects use crowdsourcing-for example, to squash bugs, test software, or gather alternative UI designs. Although the overall impact been mundane so far, could lead fundamental, disruptive changes in how is developed. Various models have applied development. Such offer exciting opportunities, several challenges must be met for reach its potential.",01-01-2016,IEEE Software,https://doi.org/10.1109/ms.2016.12,"Thomas D. LaToza, André van der Hoek",147,Almost surreptitiously crowdsourcing has entered software engineering practice Inhouse development contracting and outsourcing still dominate but many development projects use crowdsourcingfor example to squash bugs test software or gather alternative UI designs Although the overall impact been mundane so far could lead fundamental disruptive changes in how is developed Various models have applied development Such offer exciting opportunities several challenges must be met for reach its potential,surreptitiously crowdsource enter software engineering practice inhouse development contracting outsourcing dominate development project use crowdsourcingfor example squash bug test software gather alternative ui design overall impact mundane far lead fundamental disruptive change develop model apply development offer exciting opportunity challenge meet reach potential
Forty years of research on personality in software engineering A mapping study,"In this article, we present a systematic mapping study of research on personality in software engineering. The goal is to plot the landscape current published empirical and theoretical studies that deal with role We applied review method search select articles, extract synthesize data from selected articles reported about personality. Our retrieved more than 19,000 which 90 between 1970 2010. Nearly 72% were after 2002 83% findings. Data extracted showed education pair programming most recurring topics, MBTI was used test. Research related programming, education, team effectiveness, process allocation, engineer characteristics, individual performance concentrated over 88% studies, while process, behavior preferences, leadership topics smallest number studies. conclude has grown last few years, but contradictory evidence found might have been caused by differences context, method, versions tests While raises warning for practitioners wish use practice, it shows several opportunities community improve extend findings field.",01-05-2015,Computers in Human Behavior,https://doi.org/10.1016/j.chb.2014.12.008,"Shirley S. J. O. Cruz, Fábio Q. B. da Silva, Luiz Fernando Capretz",187,In this article we present a systematic mapping study of research on personality in software engineering The goal is to plot the landscape current published empirical and theoretical studies that deal with role We applied review method search select articles extract synthesize data from selected articles reported about personality Our retrieved more than 19000 which 90 between 1970 2010 Nearly 72 were after 2002 83 findings Data extracted showed education pair programming most recurring topics MBTI was used test Research related programming education team effectiveness process allocation engineer characteristics individual performance concentrated over 88 studies while process behavior preferences leadership topics smallest number studies conclude has grown last few years but contradictory evidence found might have been caused by differences context method versions tests While raises warning for practitioners wish use practice it shows several opportunities community improve extend findings field,article present systematic mapping study research personality software engineer goal plot landscape current publish empirical theoretical study deal role apply review method search select article extract synthesize datum select article report personality retrieve nearly finding datum extract show education pair program recur topic mbti test research relate programming education team effectiveness process allocation engineer characteristic individual performance concentrate study process behavior preference leadership topic small number study conclude grow year contradictory evidence find cause difference context method version test raise warn practitioner wish use practice show opportunity community improve extend finding field
Identifying categorizing and mitigating threats to validity in software engineering secondary studies,"Secondary studies are vulnerable to threats validity. Although, mitigating these is crucial for the credibility of studies, we currently lack a systematic approach identify, categorize and mitigate validity secondary studies. In this paper, review corpus with aim identify: (a) trend reporting validity, (b) most common corresponding mitigation actions, (c) possible categories in which can be classified. To achieve goal employ tertiary study research method that used synthesizing knowledge from existing particular, collected data more than 100 published until December 2016 top quality software engineering venues (both journals conference). Our results suggest recent years, likely report their However, presentation such rather ad hoc, e.g., same threat may presented different name, or under category. alleviate problem, propose classification schema actions. Both associated actions have been validated by an empirical study, i.e., Delphi rounds experts. Based on proposed schema, provide checklist, authors use identifying categorizing while readers checklist assessing reported results.",09-10-2018,Information and Software Technology,https://doi.org/10.1016/j.infsof.2018.10.006,"Apostolos Ampatzoglou, Stamatia Bibi, Paris Avgeriou, Marijn Verbeek, Alexander Chatzigeorgiou",199,Secondary studies are vulnerable to threats validity Although mitigating these is crucial for the credibility of studies we currently lack a systematic approach identify categorize and mitigate validity secondary studies In this paper review corpus with aim identify a trend reporting validity b most common corresponding mitigation actions c possible categories in which can be classified To achieve goal employ tertiary study research method that used synthesizing knowledge from existing particular collected data more than 100 published until December 2016 top quality software engineering venues both journals conference Our results suggest recent years likely report their However presentation such rather ad hoc eg same threat may presented different name or under category alleviate problem propose classification schema actions Both associated actions have been validated by an empirical study ie Delphi rounds experts Based on proposed schema provide checklist authors use identifying categorizing while readers checklist assessing reported results,secondary study vulnerable threat validity mitigate crucial credibility study currently lack systematic approach identify categorize mitigate validity secondary study paper review corpus aim identify trend report validity b common corresponding mitigation action c possible category classify achieve goal employ tertiary study research method synthesize knowledge exist particular collect datum publish december quality software engineering venue journal conference result suggest recent year likely report presentation ad hoc eg threat present different category alleviate problem propose classification schema action associate action validate empirical study ie delphi round expert base propose schema provide checklist author use identify categorize reader checklist assess report result
A framework for gamification in software engineering,"Gamification seeks for improvement of the user's engagement, motivation, and performance when carrying out a certain task; it does so by incorporating game mechanics elements, thus making that task more attractive. The application gamification in Software Engineering can be promising; software projects organized as set challenges which ordered need to fulfilled, some skills, mainly much collective effort, are required. objective this paper is propose complete framework introduction engineering environments. This composed an ontology, methodology guiding process, support engine. We carried case study proposed was applied real company. In project company used gamify areas management, requirements testing. As result, has clearly enabled introduce its work environment, achieving quality solution with appropriate design development effort. tool allowed current tools very easily.",01-10-2017,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2017.06.021,"Félix García, Óscar Pedreira, Mario Piattini, Ana Cerdeira-Pena, Miguel R. Penabad",113,Gamification seeks for improvement of the users engagement motivation and performance when carrying out a certain task it does so by incorporating game mechanics elements thus making that task more attractive The application gamification in Software Engineering can be promising software projects organized as set challenges which ordered need to fulfilled some skills mainly much collective effort are required objective this paper is propose complete framework introduction engineering environments This composed an ontology methodology guiding process support engine We carried case study proposed was applied real company In project company used gamify areas management requirements testing As result has clearly enabled introduce its work environment achieving quality solution with appropriate design development effort tool allowed current tools very easily,gamification seek improvement user engagement motivation performance carry certain task incorporate game mechanic element make task attractive application gamification software engineering promise software project organize set challenge order need fulfil skill mainly collective effort require objective paper propose complete framework introduction engineering environment compose ontology methodology guide process support engine carry case study propose apply real company project company gamify area management requirement test result clearly enable introduce work environment achieve quality solution appropriate design development effort tool allow current tool easily
Belief amp evidence in empirical software engineering,"Empirical software engineering has produced a steady stream of evidence-based results concerning the factors that affect important outcomes such as cost, quality, and interval. However, programmers often also have strongly-held priori opinions about these issues. These are important, since developers highly-trained professionals whose beliefs would doubtless their practice. As in medicine, disseminating empirical findings to is key step ensuring impact In this paper, we describe case study, on prior at Microsoft, relationship actual data projects which work. Our a) do indeed very strong certain topics b) primarily formed based personal experience, rather than research c) can vary with each project, but not necessarily correspond evidence project. suggest more effort should be taken disseminate in-depth study interplay belief practice needed.",13-05-2016,Proceedings of the 38th International Conference on Software Engineering,https://doi.org/10.1145/2884781.2884812,"Prémkumar Dévanbu, Thomas Zimmermann, Christian Bird",136,Empirical software engineering has produced a steady stream of evidencebased results concerning the factors that affect important outcomes such as cost quality and interval However programmers often also have stronglyheld priori opinions about these issues These are important since developers highlytrained professionals whose beliefs would doubtless their practice As in medicine disseminating empirical findings to is key step ensuring impact In this paper we describe case study on prior at Microsoft relationship actual data projects which work Our a do indeed very strong certain topics b primarily formed based personal experience rather than research c can vary with each project but not necessarily correspond evidence project suggest more effort should be taken disseminate indepth study interplay belief practice needed,empirical software engineering produce steady stream evidencebase result concern factor affect important outcome cost quality interval programmer stronglyheld priori opinion issue important developer highlytraine professional belief doubtless practice medicine disseminate empirical finding key step ensure impact paper describe case study prior microsoft relationship actual datum project work strong certain topic b primarily form base personal experience research c vary project necessarily correspond evidence project suggest effort take disseminate indepth study interplay belief practice need
An empirical study of practitioners perspectives on green software engineering,"The energy consumption of software is an increasing concern as the use mobile applications, embedded systems, and data center-based services expands. While research in green engineering correspondingly increasing, little known about current practices perspectives engineers field. This paper describes first empirical study how practitioners think when they write requirements, design, construct, test, maintain their software. We report findings from a quantitative, targeted survey 464 ABB, Google, IBM, Microsoft, which was motivated by supported with qualitative 18 in-depth interviews Microsoft employees. major implications collected contextualize existing suggest directions for researchers aiming to develop strategies tools help improve usage applications.",13-05-2016,Proceedings of the 38th International Conference on Software Engineering,https://doi.org/10.1145/2884781.2884810,"Irene Manotas, Christian Bird, Rui Zhang, David Shepherd, Ciera Jaspan, Caitlin Sadowski, Lori Pollock, James Clause",149,The energy consumption of software is an increasing concern as the use mobile applications embedded systems and data centerbased services expands While research in green engineering correspondingly increasing little known about current practices perspectives engineers field This paper describes first empirical study how practitioners think when they write requirements design construct test maintain their software We report findings from a quantitative targeted survey 464 ABB Google IBM Microsoft which was motivated by supported with qualitative 18 indepth interviews Microsoft employees major implications collected contextualize existing suggest directions for researchers aiming to develop strategies tools help improve usage applications,energy consumption software increase concern use mobile application embed system datum centerbase service expand research green engineering correspondingly increase little know current practice perspective engineer field paper describe empirical study practitioner think write requirement design construct test maintain software report finding quantitative target survey abb google ibm microsoft motivate support qualitative indepth interview microsoft employee major implication collect contextualize exist suggest direction researcher aim develop strategy tool help improve usage application
Exploring the intersection between software industry and Software Engineering education  A systematic mapping of Software Engineering Trends,"Software has become ubiquitous in every corner of modern societies. During the last five decades, software engineering also changed significantly to advance development various types and scales products. In this context, Engineering Education plays an important role keeping students updated with technologies, processes, practices that are popular industries. We investigate from literature extent addresses major Trends academic setting. conducted a systematic mapping study about teaching project courses. classified 126 papers based on their investigated Trends, specifically processes practices, approaches, evolution over time. reveal Agile Development is trend. The other i.e., Implementation, Usability Value, Global Engineering, Lean Startup, relatively small setting, but continuously growing years. System Systems least among all Trends. points out possible gaps between Industry Education, which implies actionable insights for researchers, educators, practitioners.",01-02-2021,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2020.110736,"Orges Cico, Letizia Jaccheri, Anh Nguyen‐Duc, He Zhang",118,Software has become ubiquitous in every corner of modern societies During the last five decades software engineering also changed significantly to advance development various types and scales products In this context Engineering Education plays an important role keeping students updated with technologies processes practices that are popular industries We investigate from literature extent addresses major Trends academic setting conducted a systematic mapping study about teaching project courses classified 126 papers based on their investigated Trends specifically processes practices approaches evolution over time reveal Agile Development is trend The other ie Implementation Usability Value Global Engineering Lean Startup relatively small setting but continuously growing years System Systems least among all Trends points out possible gaps between Industry Education which implies actionable insights for researchers educators practitioners,software ubiquitous corner modern society decade software engineering change significantly advance development type scale product context engineering education play important role keep student update technology process practice popular industry investigate literature extent address major trend academic setting conduct systematic mapping study teach project course classify paper base investigate trend specifically process practice approach evolution time reveal agile development trend ie implementation usability value global engineering lean startup relatively small setting continuously grow year system system trend point possible gap industry education imply actionable insight researcher educator practitioner
Identifying categorizing and mitigating threats to validity in software engineering secondary studies,"Secondary studies are vulnerable to threats validity. Although, mitigating these is crucial for the credibility of studies, we currently lack a systematic approach identify, categorize and mitigate validity secondary studies. In this paper, review corpus with aim identify: (a) trend reporting validity, (b) most common corresponding mitigation actions, (c) possible categories in which can be classified. To achieve goal employ tertiary study research method that used synthesizing knowledge from existing particular, collected data more than 100 published until December 2016 top quality software engineering venues (both journals conference). Our results suggest recent years, likely report their However, presentation such rather ad hoc, e.g., same threat may presented different name, or under category. alleviate problem, propose classification schema actions. Both associated actions have been validated by an empirical study, i.e., Delphi rounds experts. Based on proposed schema, provide checklist, authors use identifying categorizing while readers checklist assessing reported results.",01-02-2019,Information and Software Technology,https://doi.org/10.1016/j.infsof.2018.10.006,"Apostolos Ampatzoglou, Stamatia Bibi, Paris Avgeriou, Marijn Verbeek, Alexander Chatzigeorgiou",184,Secondary studies are vulnerable to threats validity Although mitigating these is crucial for the credibility of studies we currently lack a systematic approach identify categorize and mitigate validity secondary studies In this paper review corpus with aim identify a trend reporting validity b most common corresponding mitigation actions c possible categories in which can be classified To achieve goal employ tertiary study research method that used synthesizing knowledge from existing particular collected data more than 100 published until December 2016 top quality software engineering venues both journals conference Our results suggest recent years likely report their However presentation such rather ad hoc eg same threat may presented different name or under category alleviate problem propose classification schema actions Both associated actions have been validated by an empirical study ie Delphi rounds experts Based on proposed schema provide checklist authors use identifying categorizing while readers checklist assessing reported results,secondary study vulnerable threat validity mitigate crucial credibility study currently lack systematic approach identify categorize mitigate validity secondary study paper review corpus aim identify trend report validity b common corresponding mitigation action c possible category classify achieve goal employ tertiary study research method synthesize knowledge exist particular collect datum publish december quality software engineering venue journal conference result suggest recent year likely report presentation ad hoc eg threat present different category alleviate problem propose classification schema action associate action validate empirical study ie delphi round expert base propose schema provide checklist author use identify categorize reader checklist assess report result
A systematic literature review on the usage of eyetracking in software engineering,"Eye-tracking is a mean to collect evidence regarding some participants' cognitive processes. Eye-trackers monitor visual attention by collecting eye-movement data. These data are useful get insights into processes during reasoning tasks. The Evidence-based Software Engineering (EBSE) paradigm has been proposed in 2004 and, since then, used provide detailed different topics software engineering research and practice. Systematic Literature Reviews (SLR) also the context of EBSE bringing together all existing results about particular topic. This SLR evaluates current state art using eye-trackers provides on uses contributions empirical studies engineering. We perform covering eye-tracking published from 1990 up end 2014. To search recognised resources, instead applying manual search, we an extensive automated Village. identify 36 relevant publications, including nine journal papers, two workshop 25 conference papers. community started 1990s they have become increasingly as tools conduct 2006. observe that researchers use study model comprehension, code debugging, collaborative interaction, traceability. Moreover, find metrics based obtain quantitative measures. report limitations technology, which threaten validity previous studies, along with suggestions mitigate these limitations. However, not withstanding threats, conclude advent new makes easier less obtrusive could benefit more this technology.",01-11-2015,Information and Software Technology,https://doi.org/10.1016/j.infsof.2015.06.008,"Zohreh Sharafi, Zéphyrin Soh, Yann‐Gaël Guéhéneuc",165,Eyetracking is a mean to collect evidence regarding some participants cognitive processes Eyetrackers monitor visual attention by collecting eyemovement data These data are useful get insights into processes during reasoning tasks The Evidencebased Software Engineering EBSE paradigm has been proposed in 2004 and since then used provide detailed different topics software engineering research and practice Systematic Literature Reviews SLR also the context of EBSE bringing together all existing results about particular topic This SLR evaluates current state art using eyetrackers provides on uses contributions empirical studies engineering We perform covering eyetracking published from 1990 up end 2014 To search recognised resources instead applying manual search we an extensive automated Village identify 36 relevant publications including nine journal papers two workshop 25 conference papers community started 1990s they have become increasingly as tools conduct 2006 observe that researchers use study model comprehension code debugging collaborative interaction traceability Moreover find metrics based obtain quantitative measures report limitations technology which threaten validity previous studies along with suggestions mitigate these limitations However not withstanding threats conclude advent new makes easier less obtrusive could benefit more this technology,eyetracke mean collect evidence participant cognitive process eyetracker monitor visual attention collect eyemovement datum datum useful insight process reasoning task evidencebase software engineering ebse paradigm propose provide detailed different topic software engineering research practice systematic literature review slr context ebse bring exist result particular topic slr evaluate current state art eyetracker provide use contribution empirical study engineer perform cover eyetracking publish end search recognise resource instead apply manual search extensive automate village identify relevant publication include journal paper workshop conference paper community start increasingly tool conduct observe researcher use study model comprehension code debug collaborative interaction traceability find metric base obtain quantitative measure report limitation technology threaten validity previous study suggestion mitigate limitation withstand threat conclude advent new make easy obtrusive benefit technology
Sampling in software engineering research a critical review and guidelines,"Representative sampling appears rare in empirical software engineering research. Not all studies need representative samples, but a general lack of undermines scientific field. This article therefore reports critical review the state recent, high-quality The key findings are: (1) random is rare; (2) sophisticated strategies are very (3) sampling, representativeness and randomness often appear misunderstood. These suggest that research has generalizability crisis. To address these problems, this paper synthesizes existing knowledge into succinct primer proposes extensive guidelines for improving conduct, presentation evaluation It further recommended while researchers should strive more disparaging non-probability generally capricious particularly misguided predominately qualitative",28-04-2022,Empirical Software Engineering,https://doi.org/10.1007/s10664-021-10072-8,"Sebastian Baltes, Paul Ralph",154,Representative sampling appears rare in empirical software engineering research Not all studies need representative samples but a general lack of undermines scientific field This article therefore reports critical review the state recent highquality The key findings are 1 random is rare 2 sophisticated strategies are very 3 sampling representativeness and randomness often appear misunderstood These suggest that research has generalizability crisis To address these problems this paper synthesizes existing knowledge into succinct primer proposes extensive guidelines for improving conduct presentation evaluation It further recommended while researchers should strive more disparaging nonprobability generally capricious particularly misguided predominately qualitative,representative sampling appear rare empirical software engineering research study need representative sample general lack undermine scientific field article report critical review state recent highquality key finding random rare sophisticated strategy sample representativeness randomness appear misunderstood suggest research generalizability crisis address problem paper synthesize exist knowledge succinct primer propose extensive guideline improve conduct presentation evaluation recommend researcher strive disparage nonprobability generally capricious particularly misguide predominately qualitative
A Taxonomy of Software Engineering Challenges for Machine Learning Systems An Empirical Investigation,"Artificial intelligence enabled systems have been an inevitable part of everyday life. However, efficient software engineering principles and processes need to be considered extended when developing AI- systems. The objective this study is identify classify challenges that are faced by different companies software-intensive incorporate machine learning components. Using case approach, we explored the development from six across various domains identified main challenges. mapped into a proposed taxonomy depicts evolution use ML components in system industrial settings. Our provides insights community research guide discussions future applied learning.",01-01-2019,Lecture Notes in Business Information Processing,https://doi.org/10.1007/978-3-030-19034-7_14,"Lucy Ellen Lwakatare, Aiswarya Raj, Jan Bosch, Helena Holmström Olsson, Ivica Crnković",172,Artificial intelligence enabled systems have been an inevitable part of everyday life However efficient software engineering principles and processes need to be considered extended when developing AI systems The objective this study is identify classify challenges that are faced by different companies softwareintensive incorporate machine learning components Using case approach we explored the development from six across various domains identified main challenges mapped into a proposed taxonomy depicts evolution use ML components in system industrial settings Our provides insights community research guide discussions future applied learning,artificial intelligence enable system inevitable everyday life efficient software engineering principle process need consider extended develop ai system objective study identify classify challenge face different company softwareintensive incorporate machine learn component case approach explore development domain identify main challenge map propose taxonomy depict evolution use ml component system industrial setting provide insight community research guide discussion future apply learning
Twentyeight years of componentbased software engineering,"The idea of developing software components was envisioned more than forty years ago. In the past two decades, Component-Based Software Engineering (CBSE) has emerged as a distinguishable approach in engineering, and it attracted attention many researchers, which led to results being published research literature. There is huge amount knowledge encapsulated conferences journals targeting this area, but systematic analysis that missing. For reason, we aim investigate state-of-the-art CBSE area through detailed literature review. To do this, 1231 studies dating from 1984 2012 were analyzed. Using available evidence, paper addresses five dimensions CBSE: main objectives, topics, application domains, intensity applied methods. objectives found increase productivity, save costs improve quality. most addressed domains are homogeneously divided between commercial-off-the-shelf (COTS), distributed embedded systems. Intensity showed considerable last fourteen years. addition analysis, also synthesizes identifies open issues points out areas call for further research.",01-01-2016,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2015.09.019,"Tassio Vale, Ivica Crnković, Eduardo Santana de Almeida, Paulo Anselmo da Mota Silveira Neto, Yguaratã Cerqueira Cavalcanti, Sílvio Romero de Lemos Meira",132,The idea of developing software components was envisioned more than forty years ago In the past two decades ComponentBased Software Engineering CBSE has emerged as a distinguishable approach in engineering and it attracted attention many researchers which led to results being published research literature There is huge amount knowledge encapsulated conferences journals targeting this area but systematic analysis that missing For reason we aim investigate stateoftheart CBSE area through detailed literature review To do this 1231 studies dating from 1984 2012 were analyzed Using available evidence paper addresses five dimensions CBSE main objectives topics application domains intensity applied methods objectives found increase productivity save costs improve quality most addressed domains are homogeneously divided between commercialofftheshelf COTS distributed embedded systems Intensity showed considerable last fourteen years addition analysis also synthesizes identifies open issues points out areas call for further research,idea develop software component envision year ago past decade componentbased software engineering cbse emerge distinguishable approach engineering attract attention researcher lead result publish research literature huge knowledge encapsulate conference journal target area systematic analysis miss reason aim investigate stateoftheart cbse area detailed literature review study date analyze available evidence paper address dimension cbse main objective topic application domain intensity apply method objective find increase productivity save cost improve quality address domain homogeneously divide commercialofftheshelf cot distribute embed system intensity show considerable fourteen year addition analysis synthesize identifie open issue point area research
Software Engineering Project Courses with Industrial Clients,"There is an acknowledged need for teaching realistic software development in project courses. The design space such courses wide, ranging from single-semester to two-semester courses, single-client multicustomer local globally distributed and toy projects with real clients. challenge a nontrivial course how make the complex enough enrich students’ engineering experience, yet have environment that does not unduly burden students or instructor. We describe methodology realizable instructors, improves skills, leads viable results industry partners. In particular, recent advances release management collaboration workflows reduce effort of instructors during delivery increase quality deliverables. To enable feedback management, we introduce Rugby, agile process model based on Scrum allows reacting changing requirements. improve early communication, use Tornado, scenario-based approach emphasizes informal models interaction between clients students. combination Rugby Tornado deal requirements, produce multiple releases, obtain client through duration course. our experience more than 300 working 40 external over 4-year period. latest instance course, produced 7000 builds 600 releases eleven evaluation found introduction significantly increased technical especially respect engineering, usability configuration as well their nontechnical skills communication client, teamwork, presentation, demo management. Finally, discuss other can adapt concept.",03-12-2015,ACM Transactions on Computing Education,https://doi.org/10.1145/2732155,"Bernd Bruegge, Stephan Krusche, Lukas Alperowitz",123,There is an acknowledged need for teaching realistic software development in project courses The design space such courses wide ranging from singlesemester to twosemester courses singleclient multicustomer local globally distributed and toy projects with real clients challenge a nontrivial course how make the complex enough enrich students engineering experience yet have environment that does not unduly burden students or instructor We describe methodology realizable instructors improves skills leads viable results industry partners In particular recent advances release management collaboration workflows reduce effort of instructors during delivery increase quality deliverables To enable feedback management we introduce Rugby agile process model based on Scrum allows reacting changing requirements improve early communication use Tornado scenariobased approach emphasizes informal models interaction between clients students combination Rugby Tornado deal requirements produce multiple releases obtain client through duration course our experience more than 300 working 40 external over 4year period latest instance course produced 7000 builds 600 releases eleven evaluation found introduction significantly increased technical especially respect engineering usability configuration as well their nontechnical skills communication client teamwork presentation demo management Finally discuss other can adapt concept,acknowledge need teach realistic software development project course design space course wide range singlesemester twosemester course singleclient multicustomer local globally distribute toy project real client challenge nontrivial course complex enrich student engineering experience environment unduly burden student instructor describe methodology realizable instructor improve skill lead viable result industry partner particular recent advance release management collaboration workflow reduce effort instructor delivery increase quality deliverable enable feedback management introduce rugby agile process model base scrum allow react change requirement improve early communication use tornado scenariobase approach emphasize informal model interaction client student combination rugby tornado deal requirement produce multiple release obtain client duration course experience work external period late instance course produce build release evaluation find introduction significantly increase technical especially respect engineering usability configuration nontechnical skill communication client teamwork presentation demo management finally discuss adapt concept
Challenges and best practices in industryacademia collaborations in software engineering A systematic literature review,"Context: The global software industry and the engineering (SE) academia are two large communities. However, unfortunately, level of joint industry-academia collaborations in SE is still relatively very low, compared to amount activity each It seems that ’camps’ show only limited interest/motivation collaborate with one other. Many researchers practitioners have written about challenges, success patterns (what do, i.e., how collaborate) anti-patterns not do do) for collaborations. Objective: To identify (a) challenges avoid risks collaboration by being aware (b) best practices provide an inventory (patterns) allowing informed choice use when planning conducting collaborative projects. Method: A systematic review has been conducted. Synthesis done using grounded-theory based coding procedures. Results: Through thematic analysis we identified 10 challenge themes 17 practice themes. key outcome was practices, most common ones recommended different contexts were hold regular workshops seminars industry, assure continuous learning from academic sides, ensure management engagement, need a champion, basing research on real-world problems, showing explicit benefits partner, be agile during collaboration, co-location researcher side. Conclusion: Given importance conduct high practical relevance synthesis which can used make decisions structure their",01-11-2016,Information and Software Technology,https://doi.org/10.1016/j.infsof.2016.07.006,"Vahid Garousi, Kai Petersen, Barış Özkan",187,Context The global software industry and the engineering SE academia are two large communities However unfortunately level of joint industryacademia collaborations in SE is still relatively very low compared to amount activity each It seems that camps show only limited interestmotivation collaborate with one other Many researchers practitioners have written about challenges success patterns what do ie how collaborate antipatterns not do do for collaborations Objective To identify a challenges avoid risks collaboration by being aware b best practices provide an inventory patterns allowing informed choice use when planning conducting collaborative projects Method A systematic review has been conducted Synthesis done using groundedtheory based coding procedures Results Through thematic analysis we identified 10 challenge themes 17 practice themes key outcome was practices most common ones recommended different contexts were hold regular workshops seminars industry assure continuous learning from academic sides ensure management engagement need a champion basing research on realworld problems showing explicit benefits partner be agile during collaboration colocation researcher side Conclusion Given importance conduct high practical relevance synthesis which can used make decisions structure their,context global software industry engineering se academia large community unfortunately level joint industryacademia collaboration se relatively low compare activity camp limited interestmotivation collaborate researcher practitioner write challenge success pattern ie collaborate antipattern collaboration objective identify challenge avoid risk collaboration aware b good practice provide inventory pattern allow informed choice use planning conduct collaborative project method systematic review conduct synthesis groundedtheory base code procedure result thematic analysis identify challenge theme practice theme key outcome practice common one recommend different context hold regular workshop seminar industry assure continuous learning academic side ensure management engagement need champion base research realworld problem show explicit benefit partner agile collaboration colocation researcher conclusion give importance conduct high practical relevance synthesis decision structure
What is wrong with topic modeling And how to fix it using searchbased software engineering,"Topic modeling finds human-readable structures in unstructured textual data. A widely used topic technique is Latent Dirichlet allocation. When running on different datasets, LDA suffers from “order effects”, i.e., topics are generated if the order of training data shuffled. Such effects introduce a systematic error for any study. This can relate to misleading results; specifically, inaccurate descriptions and reduction efficacy text mining classification results. To provide method which distributions by more stable be further analysis. We use LDADE, search-based software engineering tool uses Differential Evolution (DE) tune LDA’s parameters. LDADE evaluated programmer information exchange site (Stackoverflow), title abstract thousands Software Engineering (SE) papers, defect reports NASA. Results were collected across implementations (Python+Scikit-Learn, Scala+Spark) Linux platform kinds LDAs (VEM, Gibbs sampling). scored via stability accuracy. In all treatments: (i) standard exhibits very large instability; (ii) LDADE’s tunings dramatically reduce cluster (iii) also leads improved performances supervised as well unsupervised learning. Due instability, using with its “off-the-shelf” settings should now depreciated. Also, future, we require SE papers that test (if needed) mitigate instability. Finally, candidate technology effectively efficiently reducing",20-02-2018,Information and Software Technology,https://doi.org/10.1016/j.infsof.2018.02.005,"Amritanshu Agrawal, Wei Fu, Tim Menzies",202,Topic modeling finds humanreadable structures in unstructured textual data A widely used topic technique is Latent Dirichlet allocation When running on different datasets LDA suffers from order effects ie topics are generated if the order of training data shuffled Such effects introduce a systematic error for any study This can relate to misleading results specifically inaccurate descriptions and reduction efficacy text mining classification results To provide method which distributions by more stable be further analysis We use LDADE searchbased software engineering tool uses Differential Evolution DE tune LDAs parameters LDADE evaluated programmer information exchange site Stackoverflow title abstract thousands Software Engineering SE papers defect reports NASA Results were collected across implementations PythonScikitLearn ScalaSpark Linux platform kinds LDAs VEM Gibbs sampling scored via stability accuracy In all treatments i standard exhibits very large instability ii LDADEs tunings dramatically reduce cluster iii also leads improved performances supervised as well unsupervised learning Due instability using with its offtheshelf settings should now depreciated Also future we require SE papers that test if needed mitigate instability Finally candidate technology effectively efficiently reducing,topic modeling find humanreadable structure unstructured textual datum widely topic technique latent dirichlet allocation run different dataset lda suffer order effect ie topic generate order training datum shuffle effect introduce systematic error study relate mislead result specifically inaccurate description reduction efficacy text mining classification result provide method distribution stable analysis use ldade searchbased software engineering tool use differential evolution de tune ldas parameter ldade evaluate programmer information exchange site stackoverflow title abstract thousand software engineering se paper defect report nasa result collect implementation pythonscikitlearn scalaspark linux platform kind ldas vem gibb sample score stability accuracy treatment standard exhibit large instability ii ldades tuning dramatically reduce cluster iii lead improved performance supervise unsupervised learn instability offtheshelf setting depreciate future require se paper test need mitigate instability finally candidate technology effectively efficiently reduce
Software Engineering for AIBased Systems A Survey,"AI-based systems are software with functionalities enabled by at least one AI component (e.g., for image- and speech-recognition, autonomous driving). becoming pervasive in society due to advances AI. However, there is limited synthesized knowledge on Software Engineering (SE) approaches building, operating, maintaining systems. To collect analyze state-of-the-art about SE systems, we conducted a systematic mapping study. We considered 248 studies published between January 2010 March 2020. an emerging research area, where more than 2/3 of the have been since 2018. The most studied properties dependability safety. identified multiple which classified according SWEBOK areas. Studies related testing quality very prevalent, while areas like maintenance seem neglected. Data-related issues recurrent challenges. Our results valuable for: researchers, quickly understand state art learn topics need research; practitioners, challenges that entails systems; and, educators, bridge gap among their curricula.",01-04-2022,ACM Transactions on Software Engineering and Methodology,https://doi.org/10.1145/3487043,"Silverio Martínez‐Fernández, Justus Bogner, Xavier Franch, Marc Oriol, Julien Siebert, Adam Trendowicz, Anna Maria Vollmer, Stefan Wagner",129,AIbased systems are software with functionalities enabled by at least one AI component eg for image and speechrecognition autonomous driving becoming pervasive in society due to advances AI However there is limited synthesized knowledge on Software Engineering SE approaches building operating maintaining systems To collect analyze stateoftheart about SE systems we conducted a systematic mapping study We considered 248 studies published between January 2010 March 2020 an emerging research area where more than 23 of the have been since 2018 The most studied properties dependability safety identified multiple which classified according SWEBOK areas Studies related testing quality very prevalent while areas like maintenance seem neglected Datarelated issues recurrent challenges Our results valuable for researchers quickly understand state art learn topics need research practitioners challenges that entails systems and educators bridge gap among their curricula,aibase system software functionality enable ai component eg image speechrecognition autonomous driving pervasive society advance ai limit synthesized knowledge software engineering se approach build operate maintain system collect analyze stateoftheart se system conduct systematic mapping study consider study publish january march emerge research area study property dependability safety identify multiple classify accord swebok areas studies relate testing quality prevalent area like maintenance neglect datarelated issue recurrent challenge result valuable researcher quickly understand state art learn topic need research practitioner challenge entail system educator bridge gap curriculum
Closing the Gap Between Software Engineering Education and Industrial Needs,"Many recent software engineering graduates often face difficulties when beginning their professional careers, due to misalignment of the skills learned in university education with what is needed industry. In this article, we report a literature review studies that have been done make improvements on issue.",11-03-2019,IEEE Software,https://doi.org/10.1109/ms.2018.2880823,"Vahid Garousi, Görkem Giray, Eray Tüzün, Çağatay Çatal, Michael Felderer",142,Many recent software engineering graduates often face difficulties when beginning their professional careers due to misalignment of the skills learned in university education with what is needed industry In this article we report a literature review studies that have been done make improvements on issue,recent software engineering graduate face difficulty begin professional career misalignment skill learn university education need industry article report literature review study improvement issue
On negative results when using sentiment analysis tools for software engineering research,"Recent years have seen an increasing attention to social aspects of software engineering, including studies emotions and sentiments experienced expressed by the developers. Most these reuse existing sentiment analysis tools such as SentiStrength NLTK. However, been trained on product reviews movie and, therefore, their results might not be applicable in engineering domain. In this paper we study whether agree with recognized human evaluators (as reported earlier study) well each other. Furthermore, evaluate impact choice a tool conducting simple differences issue resolution times for positive, negative neutral texts. We repeat seven datasets (issue trackers Stack Overflow questions) different observe that disagreement between can lead diverging conclusions. Finally, perform two replications previously published those cannot confirmed when is used.",10-01-2017,Empirical Software Engineering,https://doi.org/10.1007/s10664-016-9493-x,"Robbert Jongeling, Proshanta Sarkar, Subhajit Datta, Alexander Serebrenik",162,Recent years have seen an increasing attention to social aspects of software engineering including studies emotions and sentiments experienced expressed by the developers Most these reuse existing sentiment analysis tools such as SentiStrength NLTK However been trained on product reviews movie and therefore their results might not be applicable in engineering domain In this paper we study whether agree with recognized human evaluators as reported earlier study well each other Furthermore evaluate impact choice a tool conducting simple differences issue resolution times for positive negative neutral texts We repeat seven datasets issue trackers Stack Overflow questions different observe that disagreement between can lead diverging conclusions Finally perform two replications previously published those cannot confirmed when is used,recent year see increase attention social aspect software engineering include study emotion sentiment experience express developer reuse exist sentiment analysis tool sentistrength nltk train product review movie result applicable engineering domain paper study agree recognize human evaluator report early study furthermore evaluate impact choice tool conduct simple difference issue resolution time positive negative neutral text repeat seven dataset issue tracker stack overflow question different observe disagreement lead diverge conclusion finally perform replication previously publish confirm
Views on internal and external validity in empirical software engineering,"Empirical methods have grown common in software engineering, but there is no consensus on how to apply them properly. Is practical relevance key? Do internally valid studies any value? Should we replicate more address the tradeoff between internal and external validity? We asked community empirical research should take place with a focus validity replication, complemented literature review about status of engineering. found that opinions differ considerably, when or conduct replications.",16-05-2015,Failed to retrieve data,https://doi.org/10.5555/2818754.2818759,"Janet Siegmund, Norbert Siegmund, Sven Apel",123,Empirical methods have grown common in software engineering but there is no consensus on how to apply them properly Is practical relevance key Do internally valid studies any value Should we replicate more address the tradeoff between internal and external validity We asked community empirical research should take place with a focus validity replication complemented literature review about status of engineering found that opinions differ considerably when or conduct replications,empirical method grow common software engineering consensus apply properly practical relevance key internally valid study value replicate address tradeoff internal external validity ask community empirical research place focus validity replication complement literature review status engineering find opinion differ considerably conduct replication
The Role of Ethnographic Studies in Empirical Software Engineering,"Ethnography is a qualitative research method used to study people and cultures. It largely adopted in disciplines outside software engineering, including different areas of computer science. can provide an in-depth understanding the socio-technological realities surrounding everyday development practice, i.e., it help uncover not only what practitioners do, but also why they do it. Despite its potential, ethnography has been widely by empirical engineering researchers, receives little attention related literature. The main goal this paper explain how researchers would benefit from adopting ethnography. This achieved explicating four roles that play furthering goals engineering: strengthen investigations into social human aspects engineering; inform design tools; improve process development; programmes. article introduces ethnography, explains origin, context, strengths weaknesses, presents set dimensions position as useful usable approach research. Throughout paper, relevant examples ethnographic studies practice are illustrate points being made.",20-01-2016,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2016.2519887,"Helen Sharp, Yvonne Dittrich, Cleidson R. B. de Souza",103,Ethnography is a qualitative research method used to study people and cultures It largely adopted in disciplines outside software engineering including different areas of computer science can provide an indepth understanding the sociotechnological realities surrounding everyday development practice ie it help uncover not only what practitioners do but also why they do it Despite its potential ethnography has been widely by empirical engineering researchers receives little attention related literature The main goal this paper explain how researchers would benefit from adopting ethnography This achieved explicating four roles that play furthering goals engineering strengthen investigations into social human aspects engineering inform design tools improve process development programmes article introduces ethnography explains origin context strengths weaknesses presents set dimensions position as useful usable approach research Throughout paper relevant examples ethnographic studies practice are illustrate points being made,ethnography qualitative research method study people culture largely adopt discipline outside software engineering include different area computer science provide indepth understand sociotechnological reality surround everyday development practice ie help uncover practitioner despite potential ethnography widely empirical engineering researcher receive little attention relate literature main goal paper explain researcher benefit adopt ethnography achieve explicate role play further goal engineering strengthen investigation social human aspect engineering inform design tool improve process development programme article introduce ethnography explain origin context strength weakness present set dimension position useful usable approach research paper relevant example ethnographic study practice illustrate point
Word embeddings for the software engineering domain,"The software development process produces vast amounts of textual data expressed in natural language. Outcomes from the language processing community have been adapted engineering research for leveraging this rich information; these include methods and readily available tools, often furnished with pre-trained models. State art models however, capture general, common sense knowledge, limited value when it comes to handling specific a specialized domain. There is currently lack domain-specific that would further enhance artefacts related engineering. To end, we release word2vec model trained over 15GB Stack Overflow posts. We illustrate how disambiguates polysemous words by interpreting them within their context. In addition, present examples fine-grained semantics captured model, imply transferability results diverse, targeted information retrieval tasks motivate reuse model.",28-05-2018,Proceedings of the 15th International Conference on Mining Software Repositories,https://doi.org/10.1145/3196398.3196448,"Vasiliki Efstathiou, Christos Chatzilenas, Diomidis Spinellis",99,The software development process produces vast amounts of textual data expressed in natural language Outcomes from the language processing community have been adapted engineering research for leveraging this rich information these include methods and readily available tools often furnished with pretrained models State art models however capture general common sense knowledge limited value when it comes to handling specific a specialized domain There is currently lack domainspecific that would further enhance artefacts related engineering To end we release word2vec model trained over 15GB Stack Overflow posts We illustrate how disambiguates polysemous words by interpreting them within their context In addition present examples finegrained semantics captured model imply transferability results diverse targeted information retrieval tasks motivate reuse model,software development process produce vast amount textual datum express natural language outcome language processing community adapt engineering research leverage rich information include method readily available tool furnish pretraine model state art model capture general common sense knowledge limited value come handle specific specialized domain currently lack domainspecific enhance artefact related engineering end release model train gb stack overflow post illustrate disambiguate polysemous word interpret context addition present example finegraine semantic capture model imply transferability result diverse target information retrieval task motivate reuse model
Closing the Gap Between Software Engineering Education and Industrial Needs,"Many recent software engineering graduates often face difficulties when beginning their professional careers, due to misalignment of the skills learned in university education with what is needed industry. In this article, we report a literature review studies that have been done make improvements on issue.",01-03-2020,IEEE Software,https://doi.org/10.1109/ms.2018.2880823,"Vahid Garousi, Görkem Giray, Eray Tüzün, Çağatay Çatal, Michael Felderer",140,Many recent software engineering graduates often face difficulties when beginning their professional careers due to misalignment of the skills learned in university education with what is needed industry In this article we report a literature review studies that have been done make improvements on issue,recent software engineering graduate face difficulty begin professional career misalignment skill learn university education need industry article report literature review study improvement issue
How practitioners perceive the relevance of software engineering research,"The number of software engineering research papers over the last few years has grown significantly. An important question here is: how relevant is to practitioners in field? To address this question, we conducted a survey at Microsoft where invited 3,000 industry rate relevance ideas contained 571 ICSE, ESEC/FSE and FSE that were published five year period. We received 17,913 ratings by 512 who labelled as essential, worthwhile, unimportant, or unwise. results from suggest are positive towards studies done community: 71% all essential worthwhile. found no correlation between citation counts scores papers. Through qualitative analysis free text responses, identify several reasons why considered certain be approach described paper lightweight: on average, participant spent only 22.5 minutes respond survey. At same time, can provide useful insight conference organizers, authors, participating practitioners.",30-08-2015,Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering,https://doi.org/10.1145/2786805.2786809,"David Lo, Nachiappan Nagappan, Thomas Zimmermann",117,The number of software engineering research papers over the last few years has grown significantly An important question here is how relevant is to practitioners in field To address this question we conducted a survey at Microsoft where invited 3000 industry rate relevance ideas contained 571 ICSE ESECFSE and FSE that were published five year period We received 17913 ratings by 512 who labelled as essential worthwhile unimportant or unwise results from suggest are positive towards studies done community 71 all essential worthwhile found no correlation between citation counts scores papers Through qualitative analysis free text responses identify several reasons why considered certain be approach described paper lightweight on average participant spent only 225 minutes respond survey At same time can provide useful insight conference organizers authors participating practitioners,number software engineering research paper year grow significantly important question relevant practitioner field address question conduct survey microsoft invite industry rate relevance idea contain icse esecfse fse publish year period receive rating label essential worthwhile unimportant unwise result suggest positive study community essential worthwhile find correlation citation count score paper qualitative analysis free text response identify reason consider certain approach describe paper lightweight average participant spend minute respond survey time provide useful insight conference organizer author participate practitioner
Investigating Country Differences in Mobile App User Behavior and Challenges for Software Engineering,"Mobile applications (apps) are software developed for use on mobile devices and made available through app stores. App stores highly competitive markets where developers need to cater a large number of users spanning multiple countries. This work hypothesizes that there exist country differences in user behavior conducts one the largest surveys date across world, order identify precise nature those differences. The survey investigated adoption store concept, needs, rationale selecting or abandoning an app. We collected data from more than 15 countries, including USA, China, Japan, Germany, France, Brazil, United Kingdom, Italy, Russia, India, Canada, Spain, Australia, Mexico, South Korea. Analysis provided by 4,824 participants showed significant behaviors example USA likely download medical apps, Kingdom Canada be influenced price, Japan Australia less rate apps. results revealed new challenges market-driven engineering related packaging requirements, feature space, quality expectations, dependency, price sensitivity, ecosystem effect.",01-01-2015,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2014.2360674,"Soo Ling Lim, Peter J. Bentley, Natalie Kanakam, Fuyuki Ishikawa, Shinichi Honiden",155,Mobile applications apps are software developed for use on mobile devices and made available through app stores App stores highly competitive markets where developers need to cater a large number of users spanning multiple countries This work hypothesizes that there exist country differences in user behavior conducts one the largest surveys date across world order identify precise nature those differences The survey investigated adoption store concept needs rationale selecting or abandoning an app We collected data from more than 15 countries including USA China Japan Germany France Brazil United Kingdom Italy Russia India Canada Spain Australia Mexico South Korea Analysis provided by 4824 participants showed significant behaviors example USA likely download medical apps Kingdom Canada be influenced price Japan Australia less rate apps results revealed new challenges marketdriven engineering related packaging requirements feature space quality expectations dependency price sensitivity ecosystem effect,mobile application app software develop use mobile device available app store app store highly competitive market developer need cater large number user span multiple country work hypothesize exist country difference user behavior conduct large survey date world order identify precise nature difference survey investigate adoption store concept need rationale select abandon app collect datum country include usa china japan germany france brazil united kingdom italy russia india canada spain australia mexico south korea analysis provide participant show significant behavior example usa likely download medical app kingdom canada influence price japan australia rate app result reveal new challenge marketdriven engineer relate packaging requirement feature space quality expectation dependency price sensitivity ecosystem effect
EyeTracking Metrics in Software Engineering,"Eye-tracking studies are getting more prevalent in software engineering. Researchers often use different metrics when publishing their results eye-tracking studies. Even the same used, they given names, causing difficulties comparing To encourage replications and facilitate advancing state of art, it is important that used by researchers be clearly consistently defined literature. There therefore a need for survey to support (future) goal standardizing metrics. This paper seeks bring awareness along with practical suggestions on using them. It compares contrasts various also provides definitions common discusses some engineering community might borrow from other fields.",01-12-2015,2015 AsiaPacific Software Engineering Conference APSEC,https://doi.org/10.1109/apsec.2015.53,"Zohreh Sharafi, Tim Shaffer, Bonita Sharif, Yann‐Gaël Guéhéneuc",95,Eyetracking studies are getting more prevalent in software engineering Researchers often use different metrics when publishing their results eyetracking studies Even the same used they given names causing difficulties comparing To encourage replications and facilitate advancing state of art it is important that used by researchers be clearly consistently defined literature There therefore a need for survey to support future goal standardizing metrics This paper seeks bring awareness along with practical suggestions on using them It compares contrasts various also provides definitions common discusses some engineering community might borrow from other fields,eyetracke study get prevalent software engineering researcher use different metric publish result eyetracke study give name cause difficulty compare encourage replication facilitate advance state art important researcher clearly consistently define literature need survey support future goal standardize metric paper seeks bring awareness practical suggestion compare contrast provide definition common discuss engineering community borrow field
Leveraging Automated Sentiment Analysis in Software Engineering,"Automated sentiment analysis in software engineering textual artifacts has long been suffering from inaccuracies those few tools available for the purpose. We conduct an in-depth qualitative study to identify difficulties responsible such low accuracy. Majority of exposed are then carefully addressed developing SentiStrength-SE, a tool improved especially designed application domain. Using benchmark dataset consisting 5,600 manually annotated JIRA issue comments, we carry out both quantitative and evaluations our tool. SentiStrength-SE achieves 73.85% precision 85% recall, which significantly higher than state-of-the-art compare with.",01-05-2017,2017 IEEEACM 14th International Conference on Mining Software Repositories MSR,https://doi.org/10.1109/msr.2017.9,"Md. Rakibul Islam, Minhaz F. Zibran",104,Automated sentiment analysis in software engineering textual artifacts has long been suffering from inaccuracies those few tools available for the purpose We conduct an indepth qualitative study to identify difficulties responsible such low accuracy Majority of exposed are then carefully addressed developing SentiStrengthSE a tool improved especially designed application domain Using benchmark dataset consisting 5600 manually annotated JIRA issue comments we carry out both quantitative and evaluations our tool SentiStrengthSE achieves 7385 precision 85 recall which significantly higher than stateoftheart compare with,automate sentiment analysis software engineering textual artifact long suffer inaccuracy tool available purpose conduct indepth qualitative study identify difficulty responsible low accuracy majority expose carefully address develop sentistrengthse tool improve especially design application domain benchmark dataset consist manually annotate jira issue comment carry quantitative evaluation tool sentistrengthse achieve precision recall significantly high stateoftheart compare
Understanding the Challenges Faced by Neurodiverse Software Engineering Employees,"Technology workers are often stereotyped as being socially awkward or having difficulty communicating, with humorous intent; however, for many technology atypical cognitive profiles, such issues no laughing matter. In this paper, we explore the hidden lives of neurodiverse workers, e.g., those autism spectrum disorder (ASD), attention deficit hyperactivity (ADHD), and/or other learning disabilities, dyslexia. We present findings from interviews 10 identifying challenges that impede these employees fully realizing their potential in workplace. Based on interview findings, developed a survey was taken by 846 engineers at large software company. reflect differences between neurotypical (N = 781) and 59) respondents. companies struggle to attract, develop, retain talented developers; our offer insight into how employers can better support needs important worker constituency.",01-01-2015,Proceedings of the 17th International ACM SIGACCESS Conference on Computers amp Accessibility  ASSETS 15,https://doi.org/10.1145/2700648.2809841,"Meredith Ringel Morris, Andrew Begel, Ben Wiedermann",115,Technology workers are often stereotyped as being socially awkward or having difficulty communicating with humorous intent however for many technology atypical cognitive profiles such issues no laughing matter In this paper we explore the hidden lives of neurodiverse workers eg those autism spectrum disorder ASD attention deficit hyperactivity ADHD andor other learning disabilities dyslexia We present findings from interviews 10 identifying challenges that impede these employees fully realizing their potential in workplace Based on interview findings developed a survey was taken by 846 engineers at large software company reflect differences between neurotypical N  781 and 59 respondents companies struggle to attract develop retain talented developers our offer insight into how employers can better support needs important worker constituency,technology worker stereotype socially awkward have difficulty communicate humorous intent technology atypical cognitive profile issue laugh matter paper explore hidden life neurodiverse worker eg autism spectrum disorder asd attention deficit hyperactivity adhd andor learn disability dyslexia present finding interview identify challenge impede employee fully realize potential workplace base interview finding develop survey take engineer large software company reflect difference neurotypical n respondent company struggle attract develop retain talented developer offer insight employer well support need important worker constituency
Views on Internal and External Validity in Empirical Software Engineering,"Empirical methods have grown common in software engineering, but there is no consensus on how to apply them properly. Is practical relevance key? Do internally valid studies any value? Should we replicate more address the tradeoff between internal and external validity? We asked community empirical research should take place with a focus validity replication, complemented literature review about status of engineering. found that opinions differ considerably, when or conduct replications.",01-05-2015,2015 IEEEACM 37th IEEE International Conference on Software Engineering,https://doi.org/10.1109/icse.2015.24,"Janet Siegmund, Norbert Siegmund, Sven Apel",114,Empirical methods have grown common in software engineering but there is no consensus on how to apply them properly Is practical relevance key Do internally valid studies any value Should we replicate more address the tradeoff between internal and external validity We asked community empirical research should take place with a focus validity replication complemented literature review about status of engineering found that opinions differ considerably when or conduct replications,empirical method grow common software engineering consensus apply properly practical relevance key internally valid study value replicate address tradeoff internal external validity ask community empirical research place focus validity replication complement literature review status engineering find opinion differ considerably conduct replication
Crossover Designs in Software Engineering Experiments Benefits and Perils,"In experiments with crossover design subjects apply more than one treatment. Crossover designs are widespread in software engineering experimentation: they require fewer and control the variability among subjects. However, some researchers disapprove of designs. The main criticisms are: carryover threat its troublesome analysis. Carryover is persistence effect treatment when another applied later. It may invalidate results an experiment. Additionally, often not properly designed and/or analysed, limiting validity results. this paper, we aim to make SE aware perils provide risk avoidance good practices. We study how discipline (medicine) runs experiments. review literature discuss which practices tend be adhered to, giving advice on should illustrate concepts discussed analysing a experiment that have run. conclude can yield valid results, provided that, if correctly addressed, no worse other threats.",01-02-2016,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2015.2467378,"Sira Vegas, Cecilia Apa, Natália Juristo",108,In experiments with crossover design subjects apply more than one treatment Crossover designs are widespread in software engineering experimentation they require fewer and control the variability among subjects However some researchers disapprove of designs The main criticisms are carryover threat its troublesome analysis Carryover is persistence effect treatment when another applied later It may invalidate results an experiment Additionally often not properly designed andor analysed limiting validity results this paper we aim to make SE aware perils provide risk avoidance good practices We study how discipline medicine runs experiments review literature discuss which practices tend be adhered to giving advice on should illustrate concepts discussed analysing a experiment that have run conclude can yield valid results provided that if correctly addressed no worse other threats,experiment crossover design subject apply treatment crossover design widespread software engineering experimentation require few control variability subject researcher disapprove design main criticism carryover threat troublesome analysis carryover persistence effect treatment apply later invalidate result experiment additionally properly design andor analyse limit validity result paper aim se aware peril provide risk avoidance good practice study discipline medicine run experiment review literature discuss practice tend adhere give advice illustrate concept discuss analyse experiment run conclude yield valid result provide correctly address bad threat
Software Engineering Best Practices,"This chapter gives a condensed version of what goes into production-level code and life is like on software engineering team. A central feature writing production good control system. framework that tracks changes programmers make to codebase, syncing them with master copy stored server somewhere. The reviews some the standard testing concepts would see in hardcore environment. It explains how they can use unit tests sure have fixed glitch their without breaking something was already working. “Test-driven development” (TDD) an approach takes this idea extreme. Test-driven development way for individual go about getting work done. Agile, other hand, organize teams developers.",27-01-2017,The Data Science Handbook,https://doi.org/10.1002/9781119092919.ch15,Field Cady,81,This chapter gives a condensed version of what goes into productionlevel code and life is like on software engineering team A central feature writing production good control system framework that tracks changes programmers make to codebase syncing them with master copy stored server somewhere The reviews some the standard testing concepts would see in hardcore environment It explains how they can use unit tests sure have fixed glitch their without breaking something was already working Testdriven development TDD an approach takes this idea extreme Testdriven development way for individual go about getting work done Agile other hand organize teams developers,chapter give condense version go productionlevel code life like software engineering team central feature write production good control system framework track change programmer codebase sync master copy store server review standard testing concept hardcore environment explain use unit test sure fix glitch break work testdriven development tdd approach take idea extreme testdriven development way individual get work agile hand organize team developer
A survey of software engineering practices in Turkey,"Understanding the types of software engineering (SE) practices and techniques used in industry is important. There a wide spectrum terms maturity SE conducted industry. Turkey has vibrant it important to characterize understand state its practices. Our objective grasp high-level view on type Turkish To achieve this objective, we systematically designed an online survey with 46 questions based our past experience Canadian contexts using Software Engineering Body Knowledge (SWEBOK). Two hundred two practicing engineers from participated survey. The results reveal interesting findings about beyond. They also help track profession SE, suggest areas for improved training, education research. Among are followings: (1) military defense sectors quite prominent Turkey, especially capital Ankara region, many practitioners work those companies. (2) 54% participants reported not any size measurement methods, while 33% mentioned that they have measured lines code (LOC). (3) In effort, after development phase (on average, 31% overall project effort), testing, requirements, design maintenance phases come next similar average values (14%, 12%, 12% 11% respectively). (4) Respondents most challenge requirements phase. (5) Waterfall, as rather old but still widely lifecycle model, model more than half respondents (53%) use. preferred models incremental Agile/lean usage rates 38% 34%, respectively. (6) Waterfall Agile methodologies slight negative correlations, denoting if one company, other will less likely be used. interest professionals both world-wide. It benefit researchers observing latest trends identifying strength weakness, which would then hopefully encourage further industry–academia collaborations areas.",23-06-2015,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2015.06.036,"Vahid Garousi, Ahmet Coşkunçay, Aysu Betin-Can, Onur Demirörs",87,Understanding the types of software engineering SE practices and techniques used in industry is important There a wide spectrum terms maturity SE conducted industry Turkey has vibrant it important to characterize understand state its practices Our objective grasp highlevel view on type Turkish To achieve this objective we systematically designed an online survey with 46 questions based our past experience Canadian contexts using Software Engineering Body Knowledge SWEBOK Two hundred two practicing engineers from participated survey The results reveal interesting findings about beyond They also help track profession SE suggest areas for improved training education research Among are followings 1 military defense sectors quite prominent Turkey especially capital Ankara region many practitioners work those companies 2 54 participants reported not any size measurement methods while 33 mentioned that they have measured lines code LOC 3 In effort after development phase on average 31 overall project effort testing requirements design maintenance phases come next similar average values 14 12 12 11 respectively 4 Respondents most challenge requirements phase 5 Waterfall as rather old but still widely lifecycle model model more than half respondents 53 use preferred models incremental Agilelean usage rates 38 34 respectively 6 Waterfall Agile methodologies slight negative correlations denoting if one company other will less likely be used interest professionals both worldwide It benefit researchers observing latest trends identifying strength weakness which would then hopefully encourage further industryacademia collaborations areas,understand type software engineering se practice technique industry important wide spectrum term maturity se conduct industry turkey vibrant important characterize understand state practice objective grasp highlevel view type turkish achieve objective systematically design online survey question base past experience canadian context software engineering body knowledge swebok practice engineer participate survey result reveal interesting finding help track profession se suggest area improved training education research following military defense sector prominent turkey especially capital ankara region practitioner work company participant report size measurement method mention measure line code loc effort development phase average overall project effort testing requirement design maintenance phase come similar average value respectively respondent challenge requirement phase waterfall old widely lifecycle model model half respondent use prefer model incremental agilelean usage rate respectively waterfall agile methodology slight negative correlation denote company likely interest professional worldwide benefit researcher observe late trend identify strength weakness hopefully encourage industryacademia collaboration area
Benchmarking microservice systems for software engineering research,"Despite the prevalence and importance of microservices in industry, there exists limited research on microservices, partly due to lacking a benchmark system that reflects characteristics industrial microservice systems. To fill this gap, we conduct review literature open source systems identify gap between existing Based results analysis, then develop release medium-size architecture.",27-05-2018,Proceedings of the 40th International Conference on Software Engineering Companion Proceeedings,https://doi.org/10.1145/3183440.3194991,"Xiang Zhou, Xin Peng, Tao Xie, Jun Sun, Chenjie Xu, Chao Ji, Wenyun Zhao",102,Despite the prevalence and importance of microservices in industry there exists limited research on microservices partly due to lacking a benchmark system that reflects characteristics industrial microservice systems To fill this gap we conduct review literature open source systems identify gap between existing Based results analysis then develop release mediumsize architecture,despite prevalence importance microservice industry exist limited research microservice partly lack benchmark system reflect characteristics industrial microservice system fill gap conduct review literature open source system identify gap exist base result analysis develop release mediumsize architecture
Crossover Designs in Software Engineering Experiments Benefits and Perils,"In experiments with crossover design subjects apply more than one treatment. Crossover designs are widespread in software engineering experimentation: they require fewer and control the variability among subjects. However, some researchers disapprove of designs. The main criticisms are: carryover threat its troublesome analysis. Carryover is persistence effect treatment when another applied later. It may invalidate results an experiment. Additionally, often not properly designed and/or analysed, limiting validity results. this paper, we aim to make SE aware perils provide risk avoidance good practices. We study how discipline (medicine) runs experiments. review literature discuss which practices tend be adhered to, giving advice on should illustrate concepts discussed analysing a experiment that have run. conclude can yield valid results, provided that, if correctly addressed, no worse other threats.",13-08-2015,IEEE Transactions on Software Engineering,https://doi.org/10.1109/tse.2015.2467378,"Sira Vegas, Cecilia Apa, Natália Juristo",108,In experiments with crossover design subjects apply more than one treatment Crossover designs are widespread in software engineering experimentation they require fewer and control the variability among subjects However some researchers disapprove of designs The main criticisms are carryover threat its troublesome analysis Carryover is persistence effect treatment when another applied later It may invalidate results an experiment Additionally often not properly designed andor analysed limiting validity results this paper we aim to make SE aware perils provide risk avoidance good practices We study how discipline medicine runs experiments review literature discuss which practices tend be adhered to giving advice on should illustrate concepts discussed analysing a experiment that have run conclude can yield valid results provided that if correctly addressed no worse other threats,experiment crossover design subject apply treatment crossover design widespread software engineering experimentation require few control variability subject researcher disapprove design main criticism carryover threat troublesome analysis carryover persistence effect treatment apply later invalidate result experiment additionally properly design andor analyse limit validity result paper aim se aware peril provide risk avoidance good practice study discipline medicine run experiment review literature discuss practice tend adhere give advice illustrate concept discuss analyse experiment run conclude yield valid result provide correctly address bad threat
A systematic mapping study on gamerelated methods for software engineering education,"The use of games in software engineering education is not new. However, recent technologies have provided new opportunities for using and their elements to enhance learning student engagement. goal this paper twofold. First, we discuss how game-related methods been used the context by means a systematic mapping study. Second, investigate these support specific knowledge areas from engineering. By achieving goals, aim only characterize state art on education, but also identify gaps further research. We carried out study primary studies which address use, proposal or evaluation education. classified based type approaches, goals areas, characteristics each approach. identified 156 studies, published between 1974 June 2016. Most describe serious (86) game development (57) while Gamification least explored method (10). Learning skills are mostly related “Software Process”, Design”, “Professional Practices”. there some where can still be explored. trend existing research field quite preliminary. noted lack standardization both definition classification methods.",12-10-2017,Information and Software Technology,https://doi.org/10.1016/j.infsof.2017.09.014,"Maurício Ronny de Almeida Souza, Lucas Furtini Veado, Renata Teles Moreira, Eduardo Figueiredo, Heitor Costa",133,The use of games in software engineering education is not new However recent technologies have provided new opportunities for using and their elements to enhance learning student engagement goal this paper twofold First we discuss how gamerelated methods been used the context by means a systematic mapping study Second investigate these support specific knowledge areas from engineering By achieving goals aim only characterize state art on education but also identify gaps further research We carried out study primary studies which address use proposal or evaluation education classified based type approaches goals areas characteristics each approach identified 156 studies published between 1974 June 2016 Most describe serious 86 game development 57 while Gamification least explored method 10 Learning skills are mostly related Software Process Design Professional Practices there some where can still be explored trend existing research field quite preliminary noted lack standardization both definition classification methods,use game software engineering education new recent technology provide new opportunity element enhance learn student engagement goal paper twofold discuss gamerelated method context mean systematic mapping study second investigate support specific knowledge area engineering achieve goal aim characterize state art education identify gap research carry study primary study address use proposal evaluation education classify base type approach goal area characteristic approach identify study publish june describe game development gamification explore method learning skill relate software process design professional practice explore trend exist research field preliminary note lack standardization definition classification method
Kanban in software engineering A systematic mapping study,"Following a well-established track record of success in other domains such as manufacturing, Kanban is increasingly used to achieve continuous development and delivery value the software industry. However, while research on growing, these articles are largely descriptive, there limited rigorous its application with little cohesive building cumulative knowledge. As result, it extremely difficult determine true engineering. This study investigates scientific evidence date regarding by conducting systematic mapping literature engineering between 2006 2016. The search strategy resulted 382 studies, which 23 were identified primary papers relevant this research. unique compares findings insights from review experience reports during same period. makes four important contributions, (i) state-of-the-art provided, (ii) reported benefits challenges both reports, (iii) recommended practices listed (iv) opportunities for future identified.",24-11-2017,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2017.11.045,"Muhammad Ovais Ahmad, Denis Dennehy, Kieran Conboy, Markku Oivo",98,Following a wellestablished track record of success in other domains such as manufacturing Kanban is increasingly used to achieve continuous development and delivery value the software industry However while research on growing these articles are largely descriptive there limited rigorous its application with little cohesive building cumulative knowledge As result it extremely difficult determine true engineering This study investigates scientific evidence date regarding by conducting systematic mapping literature engineering between 2006 2016 The search strategy resulted 382 studies which 23 were identified primary papers relevant this research unique compares findings insights from review experience reports during same period makes four important contributions i stateoftheart provided ii reported benefits challenges both reports iii recommended practices listed iv opportunities for future identified,follow wellestablished track record success domain manufacturing kanban increasingly achieve continuous development delivery value software industry research grow article largely descriptive limit rigorous application little cohesive building cumulative knowledge result extremely difficult determine true engineering study investigate scientific evidence date conduct systematic mapping literature engineering search strategy result study identify primary paper relevant research unique compare finding insight review experience report period make important contribution stateoftheart provide ii report benefit challenge report iii recommend practice list iv opportunity future identify
MultiCriteria Code Refactoring Using SearchBased Software Engineering,"One of the most widely used techniques to improve quality existing software systems is refactoring—the process improving design code by changing its internal structure without altering external behavior. While it important suggest refactorings that and system, many other criteria are also consider, such as reducing number changes, preserving semantics not only behavior, maintaining consistency with previously applied refactorings. In this article, we propose a multi-objective search-based approach for automating recommendation The aims at finding optimal sequence (i) improves minimizing defects, (ii) minimizes changes required fix those (iii) preserves semantics, (iv) maximizes changes. We evaluated efficiency our using benchmark six open-source systems, 11 different types (move method, move field, pull up push down inline class, extract interface) commonly occurring defect (blob, spaghetti code, functional decomposition, data shotgun surgery, feature envy) through an empirical study conducted experts. addition, performed industrial validation technique, 10 engineers, on large project provided partner. found proposed succeed in coherence acceptable level change score while reusing knowledge from recorded past similar contexts.",30-06-2016,ACM Transactions on Software Engineering and Methodology,https://doi.org/10.1145/2932631,"Ali Ouni, Marouane Kessentini, Houari Sahraoui, Katsuro Inoue, Kalyanmoy Deb",125,One of the most widely used techniques to improve quality existing software systems is refactoringthe process improving design code by changing its internal structure without altering external behavior While it important suggest refactorings that and system many other criteria are also consider such as reducing number changes preserving semantics not only behavior maintaining consistency with previously applied refactorings In this article we propose a multiobjective searchbased approach for automating recommendation The aims at finding optimal sequence i improves minimizing defects ii minimizes changes required fix those iii preserves semantics iv maximizes changes We evaluated efficiency our using benchmark six opensource systems 11 different types move method move field pull up push down inline class extract interface commonly occurring defect blob spaghetti code functional decomposition data shotgun surgery feature envy through an empirical study conducted experts addition performed industrial validation technique 10 engineers on large project provided partner found proposed succeed in coherence acceptable level change score while reusing knowledge from recorded past similar contexts,widely technique improve quality exist software system refactoringthe process improve design code change internal structure alter external behavior important suggest refactoring system criterion consider reduce number change preserve semantic behavior maintain consistency previously apply refactoring article propose multiobjective searchbased approach automate recommendation aim find optimal sequence improves minimize defect ii minimizes change require fix iii preserve semantics iv maximize change evaluate efficiency benchmark opensource system different type method field pull push inline class extract interface commonly occur defect blob spaghetti code functional decomposition datum shotgun surgery feature envy empirical study conduct expert addition perform industrial validation technique engineer large project provide partner find propose succeed coherence acceptable level change score reuse knowledge recorded past similar context
Survey Guidelines in Software Engineering,"Background: Survey is a method of research aiming to gather data from large population interest. Despite being extensively used in software engineering, survey-based faces several challenges, such as selecting representative sample and designing the collection instruments.",08-09-2016,Proceedings of the 10th ACMIEEE International Symposium on Empirical Software Engineering and Measurement,https://doi.org/10.1145/2961111.2962619,"Jefferson Seide Molléri, Kai Petersen, Emília Mendes",75,Background Survey is a method of research aiming to gather data from large population interest Despite being extensively used in software engineering surveybased faces several challenges such as selecting representative sample and designing the collection instruments,background survey method research aim gather datum large population interest despite extensively software engineering surveybase face challenge select representative sample design collection instrument
Software Engineering for the Internet of Things,"No consolidated set of software engineering best practices for the Internet Things (IoT) has yet emerged. Too often, landscape resembles Wild West, with unprepared programmers putting together IoT systems in ad hoc fashion and throwing them out into market, often poorly tested. In addition, academic sector is danger fragmenting specialized, unrelated research areas. This IEEE Software theme issue aims to help provide basis a that will guide industry through challenges",01-01-2017,IEEE Software,https://doi.org/10.1109/ms.2017.28,"Xabier Larrucea, Annie Combelles, John Favaro, Kunal Taneja",78,No consolidated set of software engineering best practices for the Internet Things IoT has yet emerged Too often landscape resembles Wild West with unprepared programmers putting together IoT systems in ad hoc fashion and throwing them out into market often poorly tested In addition academic sector is danger fragmenting specialized unrelated research areas This IEEE Software theme issue aims to help provide basis a that will guide industry through challenges,consolidated set software engineering good practice internet thing iot emerge landscape resemble wild west unprepared programmer put iot system ad hoc fashion throw market poorly test addition academic sector danger fragment specialized unrelated research area ieee software theme issue aim help provide basis guide industry challenge
Kanban in software engineering A systematic mapping study,"Following a well-established track record of success in other domains such as manufacturing, Kanban is increasingly used to achieve continuous development and delivery value the software industry. However, while research on growing, these articles are largely descriptive, there limited rigorous its application with little cohesive building cumulative knowledge. As result, it extremely difficult determine true engineering. This study investigates scientific evidence date regarding by conducting systematic mapping literature engineering between 2006 2016. The search strategy resulted 382 studies, which 23 were identified primary papers relevant this research. unique compares findings insights from review experience reports during same period. makes four important contributions, (i) state-of-the-art provided, (ii) reported benefits challenges both reports, (iii) recommended practices listed (iv) opportunities for future identified.",01-03-2018,Journal of Systems and Software,https://doi.org/10.1016/j.jss.2017.11.045,"Muhammad Ovais Ahmad, Denis Dennehy, Kieran Conboy, Markku Oivo",98,Following a wellestablished track record of success in other domains such as manufacturing Kanban is increasingly used to achieve continuous development and delivery value the software industry However while research on growing these articles are largely descriptive there limited rigorous its application with little cohesive building cumulative knowledge As result it extremely difficult determine true engineering This study investigates scientific evidence date regarding by conducting systematic mapping literature engineering between 2006 2016 The search strategy resulted 382 studies which 23 were identified primary papers relevant this research unique compares findings insights from review experience reports during same period makes four important contributions i stateoftheart provided ii reported benefits challenges both reports iii recommended practices listed iv opportunities for future identified,follow wellestablished track record success domain manufacturing kanban increasingly achieve continuous development delivery value software industry research grow article largely descriptive limit rigorous application little cohesive building cumulative knowledge result extremely difficult determine true engineering study investigate scientific evidence date conduct systematic mapping literature engineering search strategy result study identify primary paper relevant research unique compare finding insight review experience report period make important contribution stateoftheart provide ii report benefit challenge report iii recommend practice list iv opportunity future identify
A systematic mapping study on gamerelated methods for software engineering education,"The use of games in software engineering education is not new. However, recent technologies have provided new opportunities for using and their elements to enhance learning student engagement. goal this paper twofold. First, we discuss how game-related methods been used the context by means a systematic mapping study. Second, investigate these support specific knowledge areas from engineering. By achieving goals, aim only characterize state art on education, but also identify gaps further research. We carried out study primary studies which address use, proposal or evaluation education. classified based type approaches, goals areas, characteristics each approach. identified 156 studies, published between 1974 June 2016. Most describe serious (86) game development (57) while Gamification least explored method (10). Learning skills are mostly related “Software Process”, Design”, “Professional Practices”. there some where can still be explored. trend existing research field quite preliminary. noted lack standardization both definition classification methods.",01-03-2018,Information and Software Technology,https://doi.org/10.1016/j.infsof.2017.09.014,"Maurício Ronny de Almeida Souza, Lucas Furtini Veado, Renata Teles Moreira, Eduardo Figueiredo, Heitor Costa",132,The use of games in software engineering education is not new However recent technologies have provided new opportunities for using and their elements to enhance learning student engagement goal this paper twofold First we discuss how gamerelated methods been used the context by means a systematic mapping study Second investigate these support specific knowledge areas from engineering By achieving goals aim only characterize state art on education but also identify gaps further research We carried out study primary studies which address use proposal or evaluation education classified based type approaches goals areas characteristics each approach identified 156 studies published between 1974 June 2016 Most describe serious 86 game development 57 while Gamification least explored method 10 Learning skills are mostly related Software Process Design Professional Practices there some where can still be explored trend existing research field quite preliminary noted lack standardization both definition classification methods,use game software engineering education new recent technology provide new opportunity element enhance learn student engagement goal paper twofold discuss gamerelated method context mean systematic mapping study second investigate support specific knowledge area engineering achieve goal aim characterize state art education identify gap research carry study primary study address use proposal evaluation education classify base type approach goal area characteristic approach identify study publish june describe game development gamification explore method learning skill relate software process design professional practice explore trend exist research field preliminary note lack standardization definition classification method
Speed Data and Ecosystems The Future of Software Engineering,"An evaluation of recent industrial and societal trends revealed three key factors driving software engineering's future: speed, data, ecosystems. These factors' implications have led to guidelines for companies evolve their engineering practices. This article is part a special issue on the Future Software Engineering.",29-12-2015,IEEE Software,https://doi.org/10.1109/ms.2016.14,Jan Bosch,93,An evaluation of recent industrial and societal trends revealed three key factors driving software engineerings future speed data ecosystems These factors implications have led to guidelines for companies evolve their engineering practices This article is part a special issue on the Future Software Engineering,evaluation recent industrial societal trend reveal key factor drive software engineering future speed data ecosystem factor implication lead guideline company evolve engineering practice article special issue future software engineering
